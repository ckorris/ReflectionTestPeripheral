
ReflectionTestPeripheral.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c8c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08006e8c  08006e8c  00016e8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006eec  08006eec  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08006eec  08006eec  00016eec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006ef4  08006ef4  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ef4  08006ef4  00016ef4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ef8  08006ef8  00016ef8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08006efc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b20  2000005c  08006f58  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b7c  08006f58  00020b7c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008a  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018208  00000000  00000000  000200cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f2e  00000000  00000000  000382d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001550  00000000  00000000  0003b208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010bb  00000000  00000000  0003c758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028eac  00000000  00000000  0003d813  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a472  00000000  00000000  000666bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010261f  00000000  00000000  00080b31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000060b8  00000000  00000000  00183150  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  00189208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000005c 	.word	0x2000005c
 800021c:	00000000 	.word	0x00000000
 8000220:	08006e74 	.word	0x08006e74

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000060 	.word	0x20000060
 800023c:	08006e74 	.word	0x08006e74

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b970 	b.w	80005e8 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	460d      	mov	r5, r1
 8000328:	4604      	mov	r4, r0
 800032a:	460f      	mov	r7, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4694      	mov	ip, r2
 8000334:	d965      	bls.n	8000402 <__udivmoddi4+0xe2>
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	b143      	cbz	r3, 800034e <__udivmoddi4+0x2e>
 800033c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000340:	f1c3 0220 	rsb	r2, r3, #32
 8000344:	409f      	lsls	r7, r3
 8000346:	fa20 f202 	lsr.w	r2, r0, r2
 800034a:	4317      	orrs	r7, r2
 800034c:	409c      	lsls	r4, r3
 800034e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000352:	fa1f f58c 	uxth.w	r5, ip
 8000356:	fbb7 f1fe 	udiv	r1, r7, lr
 800035a:	0c22      	lsrs	r2, r4, #16
 800035c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000360:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000364:	fb01 f005 	mul.w	r0, r1, r5
 8000368:	4290      	cmp	r0, r2
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x62>
 800036c:	eb1c 0202 	adds.w	r2, ip, r2
 8000370:	f101 37ff 	add.w	r7, r1, #4294967295
 8000374:	f080 811c 	bcs.w	80005b0 <__udivmoddi4+0x290>
 8000378:	4290      	cmp	r0, r2
 800037a:	f240 8119 	bls.w	80005b0 <__udivmoddi4+0x290>
 800037e:	3902      	subs	r1, #2
 8000380:	4462      	add	r2, ip
 8000382:	1a12      	subs	r2, r2, r0
 8000384:	b2a4      	uxth	r4, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000392:	fb00 f505 	mul.w	r5, r0, r5
 8000396:	42a5      	cmp	r5, r4
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x90>
 800039a:	eb1c 0404 	adds.w	r4, ip, r4
 800039e:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a2:	f080 8107 	bcs.w	80005b4 <__udivmoddi4+0x294>
 80003a6:	42a5      	cmp	r5, r4
 80003a8:	f240 8104 	bls.w	80005b4 <__udivmoddi4+0x294>
 80003ac:	4464      	add	r4, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11e      	cbz	r6, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40dc      	lsrs	r4, r3
 80003bc:	2300      	movs	r3, #0
 80003be:	e9c6 4300 	strd	r4, r3, [r6]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0xbc>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80ed 	beq.w	80005aa <__udivmoddi4+0x28a>
 80003d0:	2100      	movs	r1, #0
 80003d2:	e9c6 0500 	strd	r0, r5, [r6]
 80003d6:	4608      	mov	r0, r1
 80003d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003dc:	fab3 f183 	clz	r1, r3
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d149      	bne.n	8000478 <__udivmoddi4+0x158>
 80003e4:	42ab      	cmp	r3, r5
 80003e6:	d302      	bcc.n	80003ee <__udivmoddi4+0xce>
 80003e8:	4282      	cmp	r2, r0
 80003ea:	f200 80f8 	bhi.w	80005de <__udivmoddi4+0x2be>
 80003ee:	1a84      	subs	r4, r0, r2
 80003f0:	eb65 0203 	sbc.w	r2, r5, r3
 80003f4:	2001      	movs	r0, #1
 80003f6:	4617      	mov	r7, r2
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d0e2      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000400:	e7df      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000402:	b902      	cbnz	r2, 8000406 <__udivmoddi4+0xe6>
 8000404:	deff      	udf	#255	; 0xff
 8000406:	fab2 f382 	clz	r3, r2
 800040a:	2b00      	cmp	r3, #0
 800040c:	f040 8090 	bne.w	8000530 <__udivmoddi4+0x210>
 8000410:	1a8a      	subs	r2, r1, r2
 8000412:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000416:	fa1f fe8c 	uxth.w	lr, ip
 800041a:	2101      	movs	r1, #1
 800041c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000420:	fb07 2015 	mls	r0, r7, r5, r2
 8000424:	0c22      	lsrs	r2, r4, #16
 8000426:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800042a:	fb0e f005 	mul.w	r0, lr, r5
 800042e:	4290      	cmp	r0, r2
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x124>
 8000432:	eb1c 0202 	adds.w	r2, ip, r2
 8000436:	f105 38ff 	add.w	r8, r5, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4290      	cmp	r0, r2
 800043e:	f200 80cb 	bhi.w	80005d8 <__udivmoddi4+0x2b8>
 8000442:	4645      	mov	r5, r8
 8000444:	1a12      	subs	r2, r2, r0
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb2 f0f7 	udiv	r0, r2, r7
 800044c:	fb07 2210 	mls	r2, r7, r0, r2
 8000450:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000454:	fb0e fe00 	mul.w	lr, lr, r0
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x14e>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 32ff 	add.w	r2, r0, #4294967295
 8000464:	d202      	bcs.n	800046c <__udivmoddi4+0x14c>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f200 80bb 	bhi.w	80005e2 <__udivmoddi4+0x2c2>
 800046c:	4610      	mov	r0, r2
 800046e:	eba4 040e 	sub.w	r4, r4, lr
 8000472:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000476:	e79f      	b.n	80003b8 <__udivmoddi4+0x98>
 8000478:	f1c1 0720 	rsb	r7, r1, #32
 800047c:	408b      	lsls	r3, r1
 800047e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000482:	ea4c 0c03 	orr.w	ip, ip, r3
 8000486:	fa05 f401 	lsl.w	r4, r5, r1
 800048a:	fa20 f307 	lsr.w	r3, r0, r7
 800048e:	40fd      	lsrs	r5, r7
 8000490:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000494:	4323      	orrs	r3, r4
 8000496:	fbb5 f8f9 	udiv	r8, r5, r9
 800049a:	fa1f fe8c 	uxth.w	lr, ip
 800049e:	fb09 5518 	mls	r5, r9, r8, r5
 80004a2:	0c1c      	lsrs	r4, r3, #16
 80004a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a8:	fb08 f50e 	mul.w	r5, r8, lr
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	fa02 f201 	lsl.w	r2, r2, r1
 80004b2:	fa00 f001 	lsl.w	r0, r0, r1
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c0:	f080 8088 	bcs.w	80005d4 <__udivmoddi4+0x2b4>
 80004c4:	42a5      	cmp	r5, r4
 80004c6:	f240 8085 	bls.w	80005d4 <__udivmoddi4+0x2b4>
 80004ca:	f1a8 0802 	sub.w	r8, r8, #2
 80004ce:	4464      	add	r4, ip
 80004d0:	1b64      	subs	r4, r4, r5
 80004d2:	b29d      	uxth	r5, r3
 80004d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d8:	fb09 4413 	mls	r4, r9, r3, r4
 80004dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004e4:	45a6      	cmp	lr, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ec:	f103 35ff 	add.w	r5, r3, #4294967295
 80004f0:	d26c      	bcs.n	80005cc <__udivmoddi4+0x2ac>
 80004f2:	45a6      	cmp	lr, r4
 80004f4:	d96a      	bls.n	80005cc <__udivmoddi4+0x2ac>
 80004f6:	3b02      	subs	r3, #2
 80004f8:	4464      	add	r4, ip
 80004fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000502:	eba4 040e 	sub.w	r4, r4, lr
 8000506:	42ac      	cmp	r4, r5
 8000508:	46c8      	mov	r8, r9
 800050a:	46ae      	mov	lr, r5
 800050c:	d356      	bcc.n	80005bc <__udivmoddi4+0x29c>
 800050e:	d053      	beq.n	80005b8 <__udivmoddi4+0x298>
 8000510:	b156      	cbz	r6, 8000528 <__udivmoddi4+0x208>
 8000512:	ebb0 0208 	subs.w	r2, r0, r8
 8000516:	eb64 040e 	sbc.w	r4, r4, lr
 800051a:	fa04 f707 	lsl.w	r7, r4, r7
 800051e:	40ca      	lsrs	r2, r1
 8000520:	40cc      	lsrs	r4, r1
 8000522:	4317      	orrs	r7, r2
 8000524:	e9c6 7400 	strd	r7, r4, [r6]
 8000528:	4618      	mov	r0, r3
 800052a:	2100      	movs	r1, #0
 800052c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000530:	f1c3 0120 	rsb	r1, r3, #32
 8000534:	fa02 fc03 	lsl.w	ip, r2, r3
 8000538:	fa20 f201 	lsr.w	r2, r0, r1
 800053c:	fa25 f101 	lsr.w	r1, r5, r1
 8000540:	409d      	lsls	r5, r3
 8000542:	432a      	orrs	r2, r5
 8000544:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000550:	fb07 1510 	mls	r5, r7, r0, r1
 8000554:	0c11      	lsrs	r1, r2, #16
 8000556:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800055a:	fb00 f50e 	mul.w	r5, r0, lr
 800055e:	428d      	cmp	r5, r1
 8000560:	fa04 f403 	lsl.w	r4, r4, r3
 8000564:	d908      	bls.n	8000578 <__udivmoddi4+0x258>
 8000566:	eb1c 0101 	adds.w	r1, ip, r1
 800056a:	f100 38ff 	add.w	r8, r0, #4294967295
 800056e:	d22f      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 8000570:	428d      	cmp	r5, r1
 8000572:	d92d      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 8000574:	3802      	subs	r0, #2
 8000576:	4461      	add	r1, ip
 8000578:	1b49      	subs	r1, r1, r5
 800057a:	b292      	uxth	r2, r2
 800057c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000580:	fb07 1115 	mls	r1, r7, r5, r1
 8000584:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000588:	fb05 f10e 	mul.w	r1, r5, lr
 800058c:	4291      	cmp	r1, r2
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x282>
 8000590:	eb1c 0202 	adds.w	r2, ip, r2
 8000594:	f105 38ff 	add.w	r8, r5, #4294967295
 8000598:	d216      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 800059a:	4291      	cmp	r1, r2
 800059c:	d914      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800059e:	3d02      	subs	r5, #2
 80005a0:	4462      	add	r2, ip
 80005a2:	1a52      	subs	r2, r2, r1
 80005a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a8:	e738      	b.n	800041c <__udivmoddi4+0xfc>
 80005aa:	4631      	mov	r1, r6
 80005ac:	4630      	mov	r0, r6
 80005ae:	e708      	b.n	80003c2 <__udivmoddi4+0xa2>
 80005b0:	4639      	mov	r1, r7
 80005b2:	e6e6      	b.n	8000382 <__udivmoddi4+0x62>
 80005b4:	4610      	mov	r0, r2
 80005b6:	e6fb      	b.n	80003b0 <__udivmoddi4+0x90>
 80005b8:	4548      	cmp	r0, r9
 80005ba:	d2a9      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005bc:	ebb9 0802 	subs.w	r8, r9, r2
 80005c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005c4:	3b01      	subs	r3, #1
 80005c6:	e7a3      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c8:	4645      	mov	r5, r8
 80005ca:	e7ea      	b.n	80005a2 <__udivmoddi4+0x282>
 80005cc:	462b      	mov	r3, r5
 80005ce:	e794      	b.n	80004fa <__udivmoddi4+0x1da>
 80005d0:	4640      	mov	r0, r8
 80005d2:	e7d1      	b.n	8000578 <__udivmoddi4+0x258>
 80005d4:	46d0      	mov	r8, sl
 80005d6:	e77b      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d8:	3d02      	subs	r5, #2
 80005da:	4462      	add	r2, ip
 80005dc:	e732      	b.n	8000444 <__udivmoddi4+0x124>
 80005de:	4608      	mov	r0, r1
 80005e0:	e70a      	b.n	80003f8 <__udivmoddi4+0xd8>
 80005e2:	4464      	add	r4, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e742      	b.n	800046e <__udivmoddi4+0x14e>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f2:	f001 f99b 	bl	800192c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f6:	f000 f845 	bl	8000684 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fa:	f000 fc13 	bl	8000e24 <MX_GPIO_Init>
  MX_DMA_Init();
 80005fe:	f000 fbe3 	bl	8000dc8 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000602:	f000 fb83 	bl	8000d0c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000606:	f000 fbb1 	bl	8000d6c <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 800060a:	f000 facf 	bl	8000bac <MX_I2C1_Init>
  MX_ADC1_Init();
 800060e:	f000 f8ab 	bl	8000768 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000612:	f000 fb0b 	bl	8000c2c <MX_TIM2_Init>
  MX_ADC3_Init();
 8000616:	f000 fa13 	bl	8000a40 <MX_ADC3_Init>
  MX_ADC2_Init();
 800061a:	f000 f95b 	bl	80008d4 <MX_ADC2_Init>
    //hadc3.DMA_Handle->XferM1CpltCallback = ADC_DMAConvCplt_M1;

    //HAL_DMA_RegisterCallback(&hdma_adc1, HAL_DMA_XFER_CPLT_CB_ID, &ADC_DMAConvCplt_M1);
    //HAL_DMA_RegisterCallback(&hdma_usart2_tx, HAL_DMA_XFER_CPLT_CB_ID, &ADC_DMAConvCplt_M1);

    int sampleCount = 0;
 800061e:	2300      	movs	r3, #0
 8000620:	607b      	str	r3, [r7, #4]

    const int SAMPLE_DELAY_MS = 100;
 8000622:	2364      	movs	r3, #100	; 0x64
 8000624:	603b      	str	r3, [r7, #0]
	  //char sampleMsg[10];
	  //sprintf(sampleMsg, "%hu\r\n", sampleCount);
	  //PrintUARTMessage(&huart3, "Sample #: ");
	  //PrintUARTMessage(&huart3, sampleMsg);

	  adc1Finished = 0;
 8000626:	4b0e      	ldr	r3, [pc, #56]	; (8000660 <main+0x74>)
 8000628:	2200      	movs	r2, #0
 800062a:	601a      	str	r2, [r3, #0]
	  adc2Finished = 0;
 800062c:	4b0d      	ldr	r3, [pc, #52]	; (8000664 <main+0x78>)
 800062e:	2200      	movs	r2, #0
 8000630:	601a      	str	r2, [r3, #0]
	  adc3Finished = 0;
 8000632:	4b0d      	ldr	r3, [pc, #52]	; (8000668 <main+0x7c>)
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]

	  //hadc->DMA_Handle->Instance->M1AR = (uint32_t)transmitBuffers[1]; //Apply second buffer address. That and the first one will be updated on each pass.
	  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcBuffer_1, 8 * 8);
 8000638:	2240      	movs	r2, #64	; 0x40
 800063a:	490c      	ldr	r1, [pc, #48]	; (800066c <main+0x80>)
 800063c:	480c      	ldr	r0, [pc, #48]	; (8000670 <main+0x84>)
 800063e:	f001 fa43 	bl	8001ac8 <HAL_ADC_Start_DMA>
	  HAL_ADC_Start_DMA(&hadc2, (uint32_t*)adcBuffer_2, 8 * 8);
 8000642:	2240      	movs	r2, #64	; 0x40
 8000644:	490b      	ldr	r1, [pc, #44]	; (8000674 <main+0x88>)
 8000646:	480c      	ldr	r0, [pc, #48]	; (8000678 <main+0x8c>)
 8000648:	f001 fa3e 	bl	8001ac8 <HAL_ADC_Start_DMA>
	  HAL_ADC_Start_DMA(&hadc3, (uint32_t*)adcBuffer_3, 8 * 8);
 800064c:	2240      	movs	r2, #64	; 0x40
 800064e:	490b      	ldr	r1, [pc, #44]	; (800067c <main+0x90>)
 8000650:	480b      	ldr	r0, [pc, #44]	; (8000680 <main+0x94>)
 8000652:	f001 fa39 	bl	8001ac8 <HAL_ADC_Start_DMA>


	  PrintUARTMessage(&huart3, msg);
*/

	  HAL_Delay(SAMPLE_DELAY_MS);
 8000656:	683b      	ldr	r3, [r7, #0]
 8000658:	4618      	mov	r0, r3
 800065a:	f001 f9cd 	bl	80019f8 <HAL_Delay>
	  adc1Finished = 0;
 800065e:	e7e2      	b.n	8000626 <main+0x3a>
 8000660:	20000a20 	.word	0x20000a20
 8000664:	20000a24 	.word	0x20000a24
 8000668:	20000a28 	.word	0x20000a28
 800066c:	200008a0 	.word	0x200008a0
 8000670:	20000078 	.word	0x20000078
 8000674:	20000920 	.word	0x20000920
 8000678:	200000c0 	.word	0x200000c0
 800067c:	200009a0 	.word	0x200009a0
 8000680:	20000108 	.word	0x20000108

08000684 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b094      	sub	sp, #80	; 0x50
 8000688:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800068a:	f107 031c 	add.w	r3, r7, #28
 800068e:	2234      	movs	r2, #52	; 0x34
 8000690:	2100      	movs	r1, #0
 8000692:	4618      	mov	r0, r3
 8000694:	f005 ff6a 	bl	800656c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000698:	f107 0308 	add.w	r3, r7, #8
 800069c:	2200      	movs	r2, #0
 800069e:	601a      	str	r2, [r3, #0]
 80006a0:	605a      	str	r2, [r3, #4]
 80006a2:	609a      	str	r2, [r3, #8]
 80006a4:	60da      	str	r2, [r3, #12]
 80006a6:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80006a8:	f003 fd1c 	bl	80040e4 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ac:	4b2c      	ldr	r3, [pc, #176]	; (8000760 <SystemClock_Config+0xdc>)
 80006ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b0:	4a2b      	ldr	r2, [pc, #172]	; (8000760 <SystemClock_Config+0xdc>)
 80006b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006b6:	6413      	str	r3, [r2, #64]	; 0x40
 80006b8:	4b29      	ldr	r3, [pc, #164]	; (8000760 <SystemClock_Config+0xdc>)
 80006ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006c0:	607b      	str	r3, [r7, #4]
 80006c2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006c4:	4b27      	ldr	r3, [pc, #156]	; (8000764 <SystemClock_Config+0xe0>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006cc:	4a25      	ldr	r2, [pc, #148]	; (8000764 <SystemClock_Config+0xe0>)
 80006ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006d2:	6013      	str	r3, [r2, #0]
 80006d4:	4b23      	ldr	r3, [pc, #140]	; (8000764 <SystemClock_Config+0xe0>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006dc:	603b      	str	r3, [r7, #0]
 80006de:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006e0:	2301      	movs	r3, #1
 80006e2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006e4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006e8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ea:	2302      	movs	r3, #2
 80006ec:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006f2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006f4:	2304      	movs	r3, #4
 80006f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 80006f8:	2360      	movs	r3, #96	; 0x60
 80006fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006fc:	2302      	movs	r3, #2
 80006fe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000700:	2304      	movs	r3, #4
 8000702:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000704:	2302      	movs	r3, #2
 8000706:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000708:	f107 031c 	add.w	r3, r7, #28
 800070c:	4618      	mov	r0, r3
 800070e:	f003 fd49 	bl	80041a4 <HAL_RCC_OscConfig>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000718:	f000 fd50 	bl	80011bc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800071c:	f003 fcf2 	bl	8004104 <HAL_PWREx_EnableOverDrive>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000726:	f000 fd49 	bl	80011bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800072a:	230f      	movs	r3, #15
 800072c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800072e:	2302      	movs	r3, #2
 8000730:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000732:	2300      	movs	r3, #0
 8000734:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000736:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800073a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800073c:	2300      	movs	r3, #0
 800073e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000740:	f107 0308 	add.w	r3, r7, #8
 8000744:	2103      	movs	r1, #3
 8000746:	4618      	mov	r0, r3
 8000748:	f003 ffda 	bl	8004700 <HAL_RCC_ClockConfig>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000752:	f000 fd33 	bl	80011bc <Error_Handler>
  }
}
 8000756:	bf00      	nop
 8000758:	3750      	adds	r7, #80	; 0x50
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	40023800 	.word	0x40023800
 8000764:	40007000 	.word	0x40007000

08000768 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b084      	sub	sp, #16
 800076c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800076e:	463b      	mov	r3, r7
 8000770:	2200      	movs	r2, #0
 8000772:	601a      	str	r2, [r3, #0]
 8000774:	605a      	str	r2, [r3, #4]
 8000776:	609a      	str	r2, [r3, #8]
 8000778:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800077a:	4b53      	ldr	r3, [pc, #332]	; (80008c8 <MX_ADC1_Init+0x160>)
 800077c:	4a53      	ldr	r2, [pc, #332]	; (80008cc <MX_ADC1_Init+0x164>)
 800077e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000780:	4b51      	ldr	r3, [pc, #324]	; (80008c8 <MX_ADC1_Init+0x160>)
 8000782:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000786:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8000788:	4b4f      	ldr	r3, [pc, #316]	; (80008c8 <MX_ADC1_Init+0x160>)
 800078a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800078e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000790:	4b4d      	ldr	r3, [pc, #308]	; (80008c8 <MX_ADC1_Init+0x160>)
 8000792:	2201      	movs	r2, #1
 8000794:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000796:	4b4c      	ldr	r3, [pc, #304]	; (80008c8 <MX_ADC1_Init+0x160>)
 8000798:	2201      	movs	r2, #1
 800079a:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800079c:	4b4a      	ldr	r3, [pc, #296]	; (80008c8 <MX_ADC1_Init+0x160>)
 800079e:	2200      	movs	r2, #0
 80007a0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007a4:	4b48      	ldr	r3, [pc, #288]	; (80008c8 <MX_ADC1_Init+0x160>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007aa:	4b47      	ldr	r3, [pc, #284]	; (80008c8 <MX_ADC1_Init+0x160>)
 80007ac:	4a48      	ldr	r2, [pc, #288]	; (80008d0 <MX_ADC1_Init+0x168>)
 80007ae:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007b0:	4b45      	ldr	r3, [pc, #276]	; (80008c8 <MX_ADC1_Init+0x160>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 8;
 80007b6:	4b44      	ldr	r3, [pc, #272]	; (80008c8 <MX_ADC1_Init+0x160>)
 80007b8:	2208      	movs	r2, #8
 80007ba:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80007bc:	4b42      	ldr	r3, [pc, #264]	; (80008c8 <MX_ADC1_Init+0x160>)
 80007be:	2201      	movs	r2, #1
 80007c0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80007c4:	4b40      	ldr	r3, [pc, #256]	; (80008c8 <MX_ADC1_Init+0x160>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007ca:	483f      	ldr	r0, [pc, #252]	; (80008c8 <MX_ADC1_Init+0x160>)
 80007cc:	f001 f938 	bl	8001a40 <HAL_ADC_Init>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 80007d6:	f000 fcf1 	bl	80011bc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80007da:	2300      	movs	r3, #0
 80007dc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007de:	2301      	movs	r3, #1
 80007e0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80007e2:	2300      	movs	r3, #0
 80007e4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007e6:	463b      	mov	r3, r7
 80007e8:	4619      	mov	r1, r3
 80007ea:	4837      	ldr	r0, [pc, #220]	; (80008c8 <MX_ADC1_Init+0x160>)
 80007ec:	f001 faca 	bl	8001d84 <HAL_ADC_ConfigChannel>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80007f6:	f000 fce1 	bl	80011bc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80007fa:	2301      	movs	r3, #1
 80007fc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80007fe:	2302      	movs	r3, #2
 8000800:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000802:	463b      	mov	r3, r7
 8000804:	4619      	mov	r1, r3
 8000806:	4830      	ldr	r0, [pc, #192]	; (80008c8 <MX_ADC1_Init+0x160>)
 8000808:	f001 fabc 	bl	8001d84 <HAL_ADC_ConfigChannel>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8000812:	f000 fcd3 	bl	80011bc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000816:	2302      	movs	r3, #2
 8000818:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800081a:	2303      	movs	r3, #3
 800081c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800081e:	463b      	mov	r3, r7
 8000820:	4619      	mov	r1, r3
 8000822:	4829      	ldr	r0, [pc, #164]	; (80008c8 <MX_ADC1_Init+0x160>)
 8000824:	f001 faae 	bl	8001d84 <HAL_ADC_ConfigChannel>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 800082e:	f000 fcc5 	bl	80011bc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000832:	2303      	movs	r3, #3
 8000834:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000836:	2304      	movs	r3, #4
 8000838:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800083a:	463b      	mov	r3, r7
 800083c:	4619      	mov	r1, r3
 800083e:	4822      	ldr	r0, [pc, #136]	; (80008c8 <MX_ADC1_Init+0x160>)
 8000840:	f001 faa0 	bl	8001d84 <HAL_ADC_ConfigChannel>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 800084a:	f000 fcb7 	bl	80011bc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800084e:	2304      	movs	r3, #4
 8000850:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000852:	2305      	movs	r3, #5
 8000854:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000856:	463b      	mov	r3, r7
 8000858:	4619      	mov	r1, r3
 800085a:	481b      	ldr	r0, [pc, #108]	; (80008c8 <MX_ADC1_Init+0x160>)
 800085c:	f001 fa92 	bl	8001d84 <HAL_ADC_ConfigChannel>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <MX_ADC1_Init+0x102>
  {
    Error_Handler();
 8000866:	f000 fca9 	bl	80011bc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800086a:	2305      	movs	r3, #5
 800086c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800086e:	2306      	movs	r3, #6
 8000870:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000872:	463b      	mov	r3, r7
 8000874:	4619      	mov	r1, r3
 8000876:	4814      	ldr	r0, [pc, #80]	; (80008c8 <MX_ADC1_Init+0x160>)
 8000878:	f001 fa84 	bl	8001d84 <HAL_ADC_ConfigChannel>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <MX_ADC1_Init+0x11e>
  {
    Error_Handler();
 8000882:	f000 fc9b 	bl	80011bc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000886:	2306      	movs	r3, #6
 8000888:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 800088a:	2307      	movs	r3, #7
 800088c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800088e:	463b      	mov	r3, r7
 8000890:	4619      	mov	r1, r3
 8000892:	480d      	ldr	r0, [pc, #52]	; (80008c8 <MX_ADC1_Init+0x160>)
 8000894:	f001 fa76 	bl	8001d84 <HAL_ADC_ConfigChannel>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <MX_ADC1_Init+0x13a>
  {
    Error_Handler();
 800089e:	f000 fc8d 	bl	80011bc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80008a2:	2307      	movs	r3, #7
 80008a4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80008a6:	2308      	movs	r3, #8
 80008a8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008aa:	463b      	mov	r3, r7
 80008ac:	4619      	mov	r1, r3
 80008ae:	4806      	ldr	r0, [pc, #24]	; (80008c8 <MX_ADC1_Init+0x160>)
 80008b0:	f001 fa68 	bl	8001d84 <HAL_ADC_ConfigChannel>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_ADC1_Init+0x156>
  {
    Error_Handler();
 80008ba:	f000 fc7f 	bl	80011bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008be:	bf00      	nop
 80008c0:	3710      	adds	r7, #16
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	20000078 	.word	0x20000078
 80008cc:	40012000 	.word	0x40012000
 80008d0:	0f000001 	.word	0x0f000001

080008d4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b084      	sub	sp, #16
 80008d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008da:	463b      	mov	r3, r7
 80008dc:	2200      	movs	r2, #0
 80008de:	601a      	str	r2, [r3, #0]
 80008e0:	605a      	str	r2, [r3, #4]
 80008e2:	609a      	str	r2, [r3, #8]
 80008e4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80008e6:	4b53      	ldr	r3, [pc, #332]	; (8000a34 <MX_ADC2_Init+0x160>)
 80008e8:	4a53      	ldr	r2, [pc, #332]	; (8000a38 <MX_ADC2_Init+0x164>)
 80008ea:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80008ec:	4b51      	ldr	r3, [pc, #324]	; (8000a34 <MX_ADC2_Init+0x160>)
 80008ee:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80008f2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_8B;
 80008f4:	4b4f      	ldr	r3, [pc, #316]	; (8000a34 <MX_ADC2_Init+0x160>)
 80008f6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80008fa:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80008fc:	4b4d      	ldr	r3, [pc, #308]	; (8000a34 <MX_ADC2_Init+0x160>)
 80008fe:	2201      	movs	r2, #1
 8000900:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000902:	4b4c      	ldr	r3, [pc, #304]	; (8000a34 <MX_ADC2_Init+0x160>)
 8000904:	2201      	movs	r2, #1
 8000906:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000908:	4b4a      	ldr	r3, [pc, #296]	; (8000a34 <MX_ADC2_Init+0x160>)
 800090a:	2200      	movs	r2, #0
 800090c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000910:	4b48      	ldr	r3, [pc, #288]	; (8000a34 <MX_ADC2_Init+0x160>)
 8000912:	2200      	movs	r2, #0
 8000914:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000916:	4b47      	ldr	r3, [pc, #284]	; (8000a34 <MX_ADC2_Init+0x160>)
 8000918:	4a48      	ldr	r2, [pc, #288]	; (8000a3c <MX_ADC2_Init+0x168>)
 800091a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800091c:	4b45      	ldr	r3, [pc, #276]	; (8000a34 <MX_ADC2_Init+0x160>)
 800091e:	2200      	movs	r2, #0
 8000920:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 8;
 8000922:	4b44      	ldr	r3, [pc, #272]	; (8000a34 <MX_ADC2_Init+0x160>)
 8000924:	2208      	movs	r2, #8
 8000926:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8000928:	4b42      	ldr	r3, [pc, #264]	; (8000a34 <MX_ADC2_Init+0x160>)
 800092a:	2201      	movs	r2, #1
 800092c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000930:	4b40      	ldr	r3, [pc, #256]	; (8000a34 <MX_ADC2_Init+0x160>)
 8000932:	2200      	movs	r2, #0
 8000934:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000936:	483f      	ldr	r0, [pc, #252]	; (8000a34 <MX_ADC2_Init+0x160>)
 8000938:	f001 f882 	bl	8001a40 <HAL_ADC_Init>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <MX_ADC2_Init+0x72>
  {
    Error_Handler();
 8000942:	f000 fc3b 	bl	80011bc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000946:	2308      	movs	r3, #8
 8000948:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800094a:	2301      	movs	r3, #1
 800094c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800094e:	2300      	movs	r3, #0
 8000950:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000952:	463b      	mov	r3, r7
 8000954:	4619      	mov	r1, r3
 8000956:	4837      	ldr	r0, [pc, #220]	; (8000a34 <MX_ADC2_Init+0x160>)
 8000958:	f001 fa14 	bl	8001d84 <HAL_ADC_ConfigChannel>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <MX_ADC2_Init+0x92>
  {
    Error_Handler();
 8000962:	f000 fc2b 	bl	80011bc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000966:	2309      	movs	r3, #9
 8000968:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800096a:	2302      	movs	r3, #2
 800096c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800096e:	463b      	mov	r3, r7
 8000970:	4619      	mov	r1, r3
 8000972:	4830      	ldr	r0, [pc, #192]	; (8000a34 <MX_ADC2_Init+0x160>)
 8000974:	f001 fa06 	bl	8001d84 <HAL_ADC_ConfigChannel>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <MX_ADC2_Init+0xae>
  {
    Error_Handler();
 800097e:	f000 fc1d 	bl	80011bc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000982:	230a      	movs	r3, #10
 8000984:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000986:	2303      	movs	r3, #3
 8000988:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800098a:	463b      	mov	r3, r7
 800098c:	4619      	mov	r1, r3
 800098e:	4829      	ldr	r0, [pc, #164]	; (8000a34 <MX_ADC2_Init+0x160>)
 8000990:	f001 f9f8 	bl	8001d84 <HAL_ADC_ConfigChannel>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <MX_ADC2_Init+0xca>
  {
    Error_Handler();
 800099a:	f000 fc0f 	bl	80011bc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800099e:	230b      	movs	r3, #11
 80009a0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80009a2:	2304      	movs	r3, #4
 80009a4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80009a6:	463b      	mov	r3, r7
 80009a8:	4619      	mov	r1, r3
 80009aa:	4822      	ldr	r0, [pc, #136]	; (8000a34 <MX_ADC2_Init+0x160>)
 80009ac:	f001 f9ea 	bl	8001d84 <HAL_ADC_ConfigChannel>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_ADC2_Init+0xe6>
  {
    Error_Handler();
 80009b6:	f000 fc01 	bl	80011bc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80009ba:	230c      	movs	r3, #12
 80009bc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80009be:	2305      	movs	r3, #5
 80009c0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80009c2:	463b      	mov	r3, r7
 80009c4:	4619      	mov	r1, r3
 80009c6:	481b      	ldr	r0, [pc, #108]	; (8000a34 <MX_ADC2_Init+0x160>)
 80009c8:	f001 f9dc 	bl	8001d84 <HAL_ADC_ConfigChannel>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_ADC2_Init+0x102>
  {
    Error_Handler();
 80009d2:	f000 fbf3 	bl	80011bc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80009d6:	230d      	movs	r3, #13
 80009d8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80009da:	2306      	movs	r3, #6
 80009dc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80009de:	463b      	mov	r3, r7
 80009e0:	4619      	mov	r1, r3
 80009e2:	4814      	ldr	r0, [pc, #80]	; (8000a34 <MX_ADC2_Init+0x160>)
 80009e4:	f001 f9ce 	bl	8001d84 <HAL_ADC_ConfigChannel>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_ADC2_Init+0x11e>
  {
    Error_Handler();
 80009ee:	f000 fbe5 	bl	80011bc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80009f2:	230e      	movs	r3, #14
 80009f4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80009f6:	2307      	movs	r3, #7
 80009f8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80009fa:	463b      	mov	r3, r7
 80009fc:	4619      	mov	r1, r3
 80009fe:	480d      	ldr	r0, [pc, #52]	; (8000a34 <MX_ADC2_Init+0x160>)
 8000a00:	f001 f9c0 	bl	8001d84 <HAL_ADC_ConfigChannel>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <MX_ADC2_Init+0x13a>
  {
    Error_Handler();
 8000a0a:	f000 fbd7 	bl	80011bc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000a0e:	230f      	movs	r3, #15
 8000a10:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000a12:	2308      	movs	r3, #8
 8000a14:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000a16:	463b      	mov	r3, r7
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4806      	ldr	r0, [pc, #24]	; (8000a34 <MX_ADC2_Init+0x160>)
 8000a1c:	f001 f9b2 	bl	8001d84 <HAL_ADC_ConfigChannel>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <MX_ADC2_Init+0x156>
  {
    Error_Handler();
 8000a26:	f000 fbc9 	bl	80011bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000a2a:	bf00      	nop
 8000a2c:	3710      	adds	r7, #16
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	200000c0 	.word	0x200000c0
 8000a38:	40012100 	.word	0x40012100
 8000a3c:	0f000001 	.word	0x0f000001

08000a40 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b084      	sub	sp, #16
 8000a44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a46:	463b      	mov	r3, r7
 8000a48:	2200      	movs	r2, #0
 8000a4a:	601a      	str	r2, [r3, #0]
 8000a4c:	605a      	str	r2, [r3, #4]
 8000a4e:	609a      	str	r2, [r3, #8]
 8000a50:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000a52:	4b53      	ldr	r3, [pc, #332]	; (8000ba0 <MX_ADC3_Init+0x160>)
 8000a54:	4a53      	ldr	r2, [pc, #332]	; (8000ba4 <MX_ADC3_Init+0x164>)
 8000a56:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000a58:	4b51      	ldr	r3, [pc, #324]	; (8000ba0 <MX_ADC3_Init+0x160>)
 8000a5a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000a5e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_8B;
 8000a60:	4b4f      	ldr	r3, [pc, #316]	; (8000ba0 <MX_ADC3_Init+0x160>)
 8000a62:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000a66:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000a68:	4b4d      	ldr	r3, [pc, #308]	; (8000ba0 <MX_ADC3_Init+0x160>)
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8000a6e:	4b4c      	ldr	r3, [pc, #304]	; (8000ba0 <MX_ADC3_Init+0x160>)
 8000a70:	2201      	movs	r2, #1
 8000a72:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000a74:	4b4a      	ldr	r3, [pc, #296]	; (8000ba0 <MX_ADC3_Init+0x160>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a7c:	4b48      	ldr	r3, [pc, #288]	; (8000ba0 <MX_ADC3_Init+0x160>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a82:	4b47      	ldr	r3, [pc, #284]	; (8000ba0 <MX_ADC3_Init+0x160>)
 8000a84:	4a48      	ldr	r2, [pc, #288]	; (8000ba8 <MX_ADC3_Init+0x168>)
 8000a86:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a88:	4b45      	ldr	r3, [pc, #276]	; (8000ba0 <MX_ADC3_Init+0x160>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 8;
 8000a8e:	4b44      	ldr	r3, [pc, #272]	; (8000ba0 <MX_ADC3_Init+0x160>)
 8000a90:	2208      	movs	r2, #8
 8000a92:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8000a94:	4b42      	ldr	r3, [pc, #264]	; (8000ba0 <MX_ADC3_Init+0x160>)
 8000a96:	2201      	movs	r2, #1
 8000a98:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000a9c:	4b40      	ldr	r3, [pc, #256]	; (8000ba0 <MX_ADC3_Init+0x160>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000aa2:	483f      	ldr	r0, [pc, #252]	; (8000ba0 <MX_ADC3_Init+0x160>)
 8000aa4:	f000 ffcc 	bl	8001a40 <HAL_ADC_Init>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <MX_ADC3_Init+0x72>
  {
    Error_Handler();
 8000aae:	f000 fb85 	bl	80011bc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000ab2:	2304      	movs	r3, #4
 8000ab4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000aba:	2300      	movs	r3, #0
 8000abc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000abe:	463b      	mov	r3, r7
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4837      	ldr	r0, [pc, #220]	; (8000ba0 <MX_ADC3_Init+0x160>)
 8000ac4:	f001 f95e 	bl	8001d84 <HAL_ADC_ConfigChannel>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <MX_ADC3_Init+0x92>
  {
    Error_Handler();
 8000ace:	f000 fb75 	bl	80011bc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000ad2:	2305      	movs	r3, #5
 8000ad4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000ada:	463b      	mov	r3, r7
 8000adc:	4619      	mov	r1, r3
 8000ade:	4830      	ldr	r0, [pc, #192]	; (8000ba0 <MX_ADC3_Init+0x160>)
 8000ae0:	f001 f950 	bl	8001d84 <HAL_ADC_ConfigChannel>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <MX_ADC3_Init+0xae>
  {
    Error_Handler();
 8000aea:	f000 fb67 	bl	80011bc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000aee:	2306      	movs	r3, #6
 8000af0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000af2:	2303      	movs	r3, #3
 8000af4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000af6:	463b      	mov	r3, r7
 8000af8:	4619      	mov	r1, r3
 8000afa:	4829      	ldr	r0, [pc, #164]	; (8000ba0 <MX_ADC3_Init+0x160>)
 8000afc:	f001 f942 	bl	8001d84 <HAL_ADC_ConfigChannel>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <MX_ADC3_Init+0xca>
  {
    Error_Handler();
 8000b06:	f000 fb59 	bl	80011bc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000b0a:	2307      	movs	r3, #7
 8000b0c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000b0e:	2304      	movs	r3, #4
 8000b10:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000b12:	463b      	mov	r3, r7
 8000b14:	4619      	mov	r1, r3
 8000b16:	4822      	ldr	r0, [pc, #136]	; (8000ba0 <MX_ADC3_Init+0x160>)
 8000b18:	f001 f934 	bl	8001d84 <HAL_ADC_ConfigChannel>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <MX_ADC3_Init+0xe6>
  {
    Error_Handler();
 8000b22:	f000 fb4b 	bl	80011bc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000b26:	2308      	movs	r3, #8
 8000b28:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000b2a:	2305      	movs	r3, #5
 8000b2c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000b2e:	463b      	mov	r3, r7
 8000b30:	4619      	mov	r1, r3
 8000b32:	481b      	ldr	r0, [pc, #108]	; (8000ba0 <MX_ADC3_Init+0x160>)
 8000b34:	f001 f926 	bl	8001d84 <HAL_ADC_ConfigChannel>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <MX_ADC3_Init+0x102>
  {
    Error_Handler();
 8000b3e:	f000 fb3d 	bl	80011bc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000b42:	2309      	movs	r3, #9
 8000b44:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000b46:	2306      	movs	r3, #6
 8000b48:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000b4a:	463b      	mov	r3, r7
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	4814      	ldr	r0, [pc, #80]	; (8000ba0 <MX_ADC3_Init+0x160>)
 8000b50:	f001 f918 	bl	8001d84 <HAL_ADC_ConfigChannel>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <MX_ADC3_Init+0x11e>
  {
    Error_Handler();
 8000b5a:	f000 fb2f 	bl	80011bc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000b5e:	230e      	movs	r3, #14
 8000b60:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000b62:	2307      	movs	r3, #7
 8000b64:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000b66:	463b      	mov	r3, r7
 8000b68:	4619      	mov	r1, r3
 8000b6a:	480d      	ldr	r0, [pc, #52]	; (8000ba0 <MX_ADC3_Init+0x160>)
 8000b6c:	f001 f90a 	bl	8001d84 <HAL_ADC_ConfigChannel>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <MX_ADC3_Init+0x13a>
  {
    Error_Handler();
 8000b76:	f000 fb21 	bl	80011bc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000b7a:	230f      	movs	r3, #15
 8000b7c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000b7e:	2308      	movs	r3, #8
 8000b80:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000b82:	463b      	mov	r3, r7
 8000b84:	4619      	mov	r1, r3
 8000b86:	4806      	ldr	r0, [pc, #24]	; (8000ba0 <MX_ADC3_Init+0x160>)
 8000b88:	f001 f8fc 	bl	8001d84 <HAL_ADC_ConfigChannel>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <MX_ADC3_Init+0x156>
  {
    Error_Handler();
 8000b92:	f000 fb13 	bl	80011bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000b96:	bf00      	nop
 8000b98:	3710      	adds	r7, #16
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	20000108 	.word	0x20000108
 8000ba4:	40012200 	.word	0x40012200
 8000ba8:	0f000001 	.word	0x0f000001

08000bac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000bb0:	4b1b      	ldr	r3, [pc, #108]	; (8000c20 <MX_I2C1_Init+0x74>)
 8000bb2:	4a1c      	ldr	r2, [pc, #112]	; (8000c24 <MX_I2C1_Init+0x78>)
 8000bb4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 8000bb6:	4b1a      	ldr	r3, [pc, #104]	; (8000c20 <MX_I2C1_Init+0x74>)
 8000bb8:	4a1b      	ldr	r2, [pc, #108]	; (8000c28 <MX_I2C1_Init+0x7c>)
 8000bba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 2;
 8000bbc:	4b18      	ldr	r3, [pc, #96]	; (8000c20 <MX_I2C1_Init+0x74>)
 8000bbe:	2202      	movs	r2, #2
 8000bc0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bc2:	4b17      	ldr	r3, [pc, #92]	; (8000c20 <MX_I2C1_Init+0x74>)
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bc8:	4b15      	ldr	r3, [pc, #84]	; (8000c20 <MX_I2C1_Init+0x74>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000bce:	4b14      	ldr	r3, [pc, #80]	; (8000c20 <MX_I2C1_Init+0x74>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000bd4:	4b12      	ldr	r3, [pc, #72]	; (8000c20 <MX_I2C1_Init+0x74>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bda:	4b11      	ldr	r3, [pc, #68]	; (8000c20 <MX_I2C1_Init+0x74>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000be0:	4b0f      	ldr	r3, [pc, #60]	; (8000c20 <MX_I2C1_Init+0x74>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000be6:	480e      	ldr	r0, [pc, #56]	; (8000c20 <MX_I2C1_Init+0x74>)
 8000be8:	f002 fa8e 	bl	8003108 <HAL_I2C_Init>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000bf2:	f000 fae3 	bl	80011bc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	4809      	ldr	r0, [pc, #36]	; (8000c20 <MX_I2C1_Init+0x74>)
 8000bfa:	f003 f894 	bl	8003d26 <HAL_I2CEx_ConfigAnalogFilter>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000c04:	f000 fada 	bl	80011bc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000c08:	2100      	movs	r1, #0
 8000c0a:	4805      	ldr	r0, [pc, #20]	; (8000c20 <MX_I2C1_Init+0x74>)
 8000c0c:	f003 f8d6 	bl	8003dbc <HAL_I2CEx_ConfigDigitalFilter>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000c16:	f000 fad1 	bl	80011bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c1a:	bf00      	nop
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	20000270 	.word	0x20000270
 8000c24:	40005400 	.word	0x40005400
 8000c28:	20303e5d 	.word	0x20303e5d

08000c2c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b08c      	sub	sp, #48	; 0x30
 8000c30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c32:	f107 0320 	add.w	r3, r7, #32
 8000c36:	2200      	movs	r2, #0
 8000c38:	601a      	str	r2, [r3, #0]
 8000c3a:	605a      	str	r2, [r3, #4]
 8000c3c:	609a      	str	r2, [r3, #8]
 8000c3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c40:	f107 0314 	add.w	r3, r7, #20
 8000c44:	2200      	movs	r2, #0
 8000c46:	601a      	str	r2, [r3, #0]
 8000c48:	605a      	str	r2, [r3, #4]
 8000c4a:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000c4c:	1d3b      	adds	r3, r7, #4
 8000c4e:	2200      	movs	r2, #0
 8000c50:	601a      	str	r2, [r3, #0]
 8000c52:	605a      	str	r2, [r3, #4]
 8000c54:	609a      	str	r2, [r3, #8]
 8000c56:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c58:	4b2b      	ldr	r3, [pc, #172]	; (8000d08 <MX_TIM2_Init+0xdc>)
 8000c5a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c5e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 95;
 8000c60:	4b29      	ldr	r3, [pc, #164]	; (8000d08 <MX_TIM2_Init+0xdc>)
 8000c62:	225f      	movs	r2, #95	; 0x5f
 8000c64:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c66:	4b28      	ldr	r3, [pc, #160]	; (8000d08 <MX_TIM2_Init+0xdc>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000c6c:	4b26      	ldr	r3, [pc, #152]	; (8000d08 <MX_TIM2_Init+0xdc>)
 8000c6e:	f04f 32ff 	mov.w	r2, #4294967295
 8000c72:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c74:	4b24      	ldr	r3, [pc, #144]	; (8000d08 <MX_TIM2_Init+0xdc>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c7a:	4b23      	ldr	r3, [pc, #140]	; (8000d08 <MX_TIM2_Init+0xdc>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c80:	4821      	ldr	r0, [pc, #132]	; (8000d08 <MX_TIM2_Init+0xdc>)
 8000c82:	f003 ff63 	bl	8004b4c <HAL_TIM_Base_Init>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8000c8c:	f000 fa96 	bl	80011bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c94:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c96:	f107 0320 	add.w	r3, r7, #32
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	481a      	ldr	r0, [pc, #104]	; (8000d08 <MX_TIM2_Init+0xdc>)
 8000c9e:	f004 f8a9 	bl	8004df4 <HAL_TIM_ConfigClockSource>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000ca8:	f000 fa88 	bl	80011bc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000cac:	4816      	ldr	r0, [pc, #88]	; (8000d08 <MX_TIM2_Init+0xdc>)
 8000cae:	f003 ffa4 	bl	8004bfa <HAL_TIM_IC_Init>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000cb8:	f000 fa80 	bl	80011bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000cc4:	f107 0314 	add.w	r3, r7, #20
 8000cc8:	4619      	mov	r1, r3
 8000cca:	480f      	ldr	r0, [pc, #60]	; (8000d08 <MX_TIM2_Init+0xdc>)
 8000ccc:	f004 fbc0 	bl	8005450 <HAL_TIMEx_MasterConfigSynchronization>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 8000cd6:	f000 fa71 	bl	80011bc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000cea:	1d3b      	adds	r3, r7, #4
 8000cec:	2200      	movs	r2, #0
 8000cee:	4619      	mov	r1, r3
 8000cf0:	4805      	ldr	r0, [pc, #20]	; (8000d08 <MX_TIM2_Init+0xdc>)
 8000cf2:	f003 ffe3 	bl	8004cbc <HAL_TIM_IC_ConfigChannel>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 8000cfc:	f000 fa5e 	bl	80011bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d00:	bf00      	nop
 8000d02:	3730      	adds	r7, #48	; 0x30
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	200002c4 	.word	0x200002c4

08000d0c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d10:	4b14      	ldr	r3, [pc, #80]	; (8000d64 <MX_USART3_UART_Init+0x58>)
 8000d12:	4a15      	ldr	r2, [pc, #84]	; (8000d68 <MX_USART3_UART_Init+0x5c>)
 8000d14:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 921600;
 8000d16:	4b13      	ldr	r3, [pc, #76]	; (8000d64 <MX_USART3_UART_Init+0x58>)
 8000d18:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8000d1c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d1e:	4b11      	ldr	r3, [pc, #68]	; (8000d64 <MX_USART3_UART_Init+0x58>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d24:	4b0f      	ldr	r3, [pc, #60]	; (8000d64 <MX_USART3_UART_Init+0x58>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d2a:	4b0e      	ldr	r3, [pc, #56]	; (8000d64 <MX_USART3_UART_Init+0x58>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d30:	4b0c      	ldr	r3, [pc, #48]	; (8000d64 <MX_USART3_UART_Init+0x58>)
 8000d32:	220c      	movs	r2, #12
 8000d34:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d36:	4b0b      	ldr	r3, [pc, #44]	; (8000d64 <MX_USART3_UART_Init+0x58>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d3c:	4b09      	ldr	r3, [pc, #36]	; (8000d64 <MX_USART3_UART_Init+0x58>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d42:	4b08      	ldr	r3, [pc, #32]	; (8000d64 <MX_USART3_UART_Init+0x58>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d48:	4b06      	ldr	r3, [pc, #24]	; (8000d64 <MX_USART3_UART_Init+0x58>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d4e:	4805      	ldr	r0, [pc, #20]	; (8000d64 <MX_USART3_UART_Init+0x58>)
 8000d50:	f004 fc0c 	bl	800556c <HAL_UART_Init>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000d5a:	f000 fa2f 	bl	80011bc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d5e:	bf00      	nop
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	20000310 	.word	0x20000310
 8000d68:	40004800 	.word	0x40004800

08000d6c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000d70:	4b14      	ldr	r3, [pc, #80]	; (8000dc4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d72:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000d76:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000d78:	4b12      	ldr	r3, [pc, #72]	; (8000dc4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d7a:	2206      	movs	r2, #6
 8000d7c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000d7e:	4b11      	ldr	r3, [pc, #68]	; (8000dc4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d80:	2202      	movs	r2, #2
 8000d82:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000d84:	4b0f      	ldr	r3, [pc, #60]	; (8000dc4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000d8a:	4b0e      	ldr	r3, [pc, #56]	; (8000dc4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d8c:	2202      	movs	r2, #2
 8000d8e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000d90:	4b0c      	ldr	r3, [pc, #48]	; (8000dc4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d92:	2201      	movs	r2, #1
 8000d94:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000d96:	4b0b      	ldr	r3, [pc, #44]	; (8000dc4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000d9c:	4b09      	ldr	r3, [pc, #36]	; (8000dc4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000da2:	4b08      	ldr	r3, [pc, #32]	; (8000dc4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000da4:	2201      	movs	r2, #1
 8000da6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000da8:	4b06      	ldr	r3, [pc, #24]	; (8000dc4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000dae:	4805      	ldr	r0, [pc, #20]	; (8000dc4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000db0:	f003 f850 	bl	8003e54 <HAL_PCD_Init>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000dba:	f000 f9ff 	bl	80011bc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000dbe:	bf00      	nop
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	20000398 	.word	0x20000398

08000dc8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000dce:	4b14      	ldr	r3, [pc, #80]	; (8000e20 <MX_DMA_Init+0x58>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd2:	4a13      	ldr	r2, [pc, #76]	; (8000e20 <MX_DMA_Init+0x58>)
 8000dd4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000dd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dda:	4b11      	ldr	r3, [pc, #68]	; (8000e20 <MX_DMA_Init+0x58>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000de2:	607b      	str	r3, [r7, #4]
 8000de4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000de6:	2200      	movs	r2, #0
 8000de8:	2100      	movs	r1, #0
 8000dea:	2038      	movs	r0, #56	; 0x38
 8000dec:	f001 fb77 	bl	80024de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000df0:	2038      	movs	r0, #56	; 0x38
 8000df2:	f001 fb90 	bl	8002516 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000df6:	2200      	movs	r2, #0
 8000df8:	2100      	movs	r1, #0
 8000dfa:	2039      	movs	r0, #57	; 0x39
 8000dfc:	f001 fb6f 	bl	80024de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000e00:	2039      	movs	r0, #57	; 0x39
 8000e02:	f001 fb88 	bl	8002516 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000e06:	2200      	movs	r2, #0
 8000e08:	2100      	movs	r1, #0
 8000e0a:	203a      	movs	r0, #58	; 0x3a
 8000e0c:	f001 fb67 	bl	80024de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000e10:	203a      	movs	r0, #58	; 0x3a
 8000e12:	f001 fb80 	bl	8002516 <HAL_NVIC_EnableIRQ>

}
 8000e16:	bf00      	nop
 8000e18:	3708      	adds	r7, #8
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	40023800 	.word	0x40023800

08000e24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b08c      	sub	sp, #48	; 0x30
 8000e28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e2a:	f107 031c 	add.w	r3, r7, #28
 8000e2e:	2200      	movs	r2, #0
 8000e30:	601a      	str	r2, [r3, #0]
 8000e32:	605a      	str	r2, [r3, #4]
 8000e34:	609a      	str	r2, [r3, #8]
 8000e36:	60da      	str	r2, [r3, #12]
 8000e38:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e3a:	4b5e      	ldr	r3, [pc, #376]	; (8000fb4 <MX_GPIO_Init+0x190>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3e:	4a5d      	ldr	r2, [pc, #372]	; (8000fb4 <MX_GPIO_Init+0x190>)
 8000e40:	f043 0304 	orr.w	r3, r3, #4
 8000e44:	6313      	str	r3, [r2, #48]	; 0x30
 8000e46:	4b5b      	ldr	r3, [pc, #364]	; (8000fb4 <MX_GPIO_Init+0x190>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4a:	f003 0304 	and.w	r3, r3, #4
 8000e4e:	61bb      	str	r3, [r7, #24]
 8000e50:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e52:	4b58      	ldr	r3, [pc, #352]	; (8000fb4 <MX_GPIO_Init+0x190>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e56:	4a57      	ldr	r2, [pc, #348]	; (8000fb4 <MX_GPIO_Init+0x190>)
 8000e58:	f043 0320 	orr.w	r3, r3, #32
 8000e5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e5e:	4b55      	ldr	r3, [pc, #340]	; (8000fb4 <MX_GPIO_Init+0x190>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e62:	f003 0320 	and.w	r3, r3, #32
 8000e66:	617b      	str	r3, [r7, #20]
 8000e68:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e6a:	4b52      	ldr	r3, [pc, #328]	; (8000fb4 <MX_GPIO_Init+0x190>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6e:	4a51      	ldr	r2, [pc, #324]	; (8000fb4 <MX_GPIO_Init+0x190>)
 8000e70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e74:	6313      	str	r3, [r2, #48]	; 0x30
 8000e76:	4b4f      	ldr	r3, [pc, #316]	; (8000fb4 <MX_GPIO_Init+0x190>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e7e:	613b      	str	r3, [r7, #16]
 8000e80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e82:	4b4c      	ldr	r3, [pc, #304]	; (8000fb4 <MX_GPIO_Init+0x190>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e86:	4a4b      	ldr	r2, [pc, #300]	; (8000fb4 <MX_GPIO_Init+0x190>)
 8000e88:	f043 0301 	orr.w	r3, r3, #1
 8000e8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e8e:	4b49      	ldr	r3, [pc, #292]	; (8000fb4 <MX_GPIO_Init+0x190>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e92:	f003 0301 	and.w	r3, r3, #1
 8000e96:	60fb      	str	r3, [r7, #12]
 8000e98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e9a:	4b46      	ldr	r3, [pc, #280]	; (8000fb4 <MX_GPIO_Init+0x190>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9e:	4a45      	ldr	r2, [pc, #276]	; (8000fb4 <MX_GPIO_Init+0x190>)
 8000ea0:	f043 0302 	orr.w	r3, r3, #2
 8000ea4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ea6:	4b43      	ldr	r3, [pc, #268]	; (8000fb4 <MX_GPIO_Init+0x190>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eaa:	f003 0302 	and.w	r3, r3, #2
 8000eae:	60bb      	str	r3, [r7, #8]
 8000eb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000eb2:	4b40      	ldr	r3, [pc, #256]	; (8000fb4 <MX_GPIO_Init+0x190>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb6:	4a3f      	ldr	r2, [pc, #252]	; (8000fb4 <MX_GPIO_Init+0x190>)
 8000eb8:	f043 0308 	orr.w	r3, r3, #8
 8000ebc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ebe:	4b3d      	ldr	r3, [pc, #244]	; (8000fb4 <MX_GPIO_Init+0x190>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec2:	f003 0308 	and.w	r3, r3, #8
 8000ec6:	607b      	str	r3, [r7, #4]
 8000ec8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000eca:	4b3a      	ldr	r3, [pc, #232]	; (8000fb4 <MX_GPIO_Init+0x190>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ece:	4a39      	ldr	r2, [pc, #228]	; (8000fb4 <MX_GPIO_Init+0x190>)
 8000ed0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ed4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed6:	4b37      	ldr	r3, [pc, #220]	; (8000fb4 <MX_GPIO_Init+0x190>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ede:	603b      	str	r3, [r7, #0]
 8000ee0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000ee8:	4833      	ldr	r0, [pc, #204]	; (8000fb8 <MX_GPIO_Init+0x194>)
 8000eea:	f002 f8f3 	bl	80030d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000eee:	2200      	movs	r2, #0
 8000ef0:	2140      	movs	r1, #64	; 0x40
 8000ef2:	4832      	ldr	r0, [pc, #200]	; (8000fbc <MX_GPIO_Init+0x198>)
 8000ef4:	f002 f8ee 	bl	80030d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000ef8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000efc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000efe:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f04:	2300      	movs	r3, #0
 8000f06:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000f08:	f107 031c 	add.w	r3, r7, #28
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	482c      	ldr	r0, [pc, #176]	; (8000fc0 <MX_GPIO_Init+0x19c>)
 8000f10:	f001 ff34 	bl	8002d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000f14:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f22:	2303      	movs	r3, #3
 8000f24:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f26:	230b      	movs	r3, #11
 8000f28:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000f2a:	f107 031c 	add.w	r3, r7, #28
 8000f2e:	4619      	mov	r1, r3
 8000f30:	4821      	ldr	r0, [pc, #132]	; (8000fb8 <MX_GPIO_Init+0x194>)
 8000f32:	f001 ff23 	bl	8002d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000f36:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000f3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f40:	2300      	movs	r3, #0
 8000f42:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f44:	2300      	movs	r3, #0
 8000f46:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f48:	f107 031c 	add.w	r3, r7, #28
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	481a      	ldr	r0, [pc, #104]	; (8000fb8 <MX_GPIO_Init+0x194>)
 8000f50:	f001 ff14 	bl	8002d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000f54:	2340      	movs	r3, #64	; 0x40
 8000f56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f60:	2300      	movs	r3, #0
 8000f62:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000f64:	f107 031c 	add.w	r3, r7, #28
 8000f68:	4619      	mov	r1, r3
 8000f6a:	4814      	ldr	r0, [pc, #80]	; (8000fbc <MX_GPIO_Init+0x198>)
 8000f6c:	f001 ff06 	bl	8002d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000f70:	2380      	movs	r3, #128	; 0x80
 8000f72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f74:	2300      	movs	r3, #0
 8000f76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000f7c:	f107 031c 	add.w	r3, r7, #28
 8000f80:	4619      	mov	r1, r3
 8000f82:	480e      	ldr	r0, [pc, #56]	; (8000fbc <MX_GPIO_Init+0x198>)
 8000f84:	f001 fefa 	bl	8002d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000f88:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000f8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f8e:	2302      	movs	r3, #2
 8000f90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f92:	2300      	movs	r3, #0
 8000f94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f96:	2303      	movs	r3, #3
 8000f98:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f9a:	230b      	movs	r3, #11
 8000f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f9e:	f107 031c 	add.w	r3, r7, #28
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	4805      	ldr	r0, [pc, #20]	; (8000fbc <MX_GPIO_Init+0x198>)
 8000fa6:	f001 fee9 	bl	8002d7c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000faa:	bf00      	nop
 8000fac:	3730      	adds	r7, #48	; 0x30
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	40023800 	.word	0x40023800
 8000fb8:	40020400 	.word	0x40020400
 8000fbc:	40021800 	.word	0x40021800
 8000fc0:	40020800 	.word	0x40020800

08000fc4 <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */


void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
	//PrintUARTMessage(&huart3, "Half Complete Callback.");
}
 8000fcc:	bf00      	nop
 8000fce:	370c      	adds	r7, #12
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr

08000fd8 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
	if(hadc == &hadc1)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	4a0f      	ldr	r2, [pc, #60]	; (8001020 <HAL_ADC_ConvCpltCallback+0x48>)
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	d103      	bne.n	8000ff0 <HAL_ADC_ConvCpltCallback+0x18>
	{
		adc1Finished = 1;
 8000fe8:	4b0e      	ldr	r3, [pc, #56]	; (8001024 <HAL_ADC_ConvCpltCallback+0x4c>)
 8000fea:	2201      	movs	r2, #1
 8000fec:	601a      	str	r2, [r3, #0]
 8000fee:	e00e      	b.n	800100e <HAL_ADC_ConvCpltCallback+0x36>
	}
	else if (hadc == &hadc2)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	4a0d      	ldr	r2, [pc, #52]	; (8001028 <HAL_ADC_ConvCpltCallback+0x50>)
 8000ff4:	4293      	cmp	r3, r2
 8000ff6:	d103      	bne.n	8001000 <HAL_ADC_ConvCpltCallback+0x28>
	{
		adc2Finished = 1;
 8000ff8:	4b0c      	ldr	r3, [pc, #48]	; (800102c <HAL_ADC_ConvCpltCallback+0x54>)
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	601a      	str	r2, [r3, #0]
 8000ffe:	e006      	b.n	800100e <HAL_ADC_ConvCpltCallback+0x36>
	}
	else if (hadc == &hadc3)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	4a0b      	ldr	r2, [pc, #44]	; (8001030 <HAL_ADC_ConvCpltCallback+0x58>)
 8001004:	4293      	cmp	r3, r2
 8001006:	d102      	bne.n	800100e <HAL_ADC_ConvCpltCallback+0x36>
	{
		adc3Finished = 1;
 8001008:	4b0a      	ldr	r3, [pc, #40]	; (8001034 <HAL_ADC_ConvCpltCallback+0x5c>)
 800100a:	2201      	movs	r2, #1
 800100c:	601a      	str	r2, [r3, #0]
		sprintf(msg, "%hu\r\n", readValue);
		PrintUARTMessage(&huart3, msg);
	}
	*/

	HAL_ADC_Stop_DMA(hadc);
 800100e:	6878      	ldr	r0, [r7, #4]
 8001010:	f000 fe54 	bl	8001cbc <HAL_ADC_Stop_DMA>

	CheckIfAllBuffersReadyAndSend();
 8001014:	f000 f810 	bl	8001038 <CheckIfAllBuffersReadyAndSend>
	//PrintUARTMessage(&huart3, "Full Complete Callback.");
}
 8001018:	bf00      	nop
 800101a:	3708      	adds	r7, #8
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	20000078 	.word	0x20000078
 8001024:	20000a20 	.word	0x20000a20
 8001028:	200000c0 	.word	0x200000c0
 800102c:	20000a24 	.word	0x20000a24
 8001030:	20000108 	.word	0x20000108
 8001034:	20000a28 	.word	0x20000a28

08001038 <CheckIfAllBuffersReadyAndSend>:

void CheckIfAllBuffersReadyAndSend()
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b0ac      	sub	sp, #176	; 0xb0
 800103c:	af00      	add	r7, sp, #0
	if(adc1Finished == 0 || adc2Finished == 0 || adc3Finished == 0)
 800103e:	4b44      	ldr	r3, [pc, #272]	; (8001150 <CheckIfAllBuffersReadyAndSend+0x118>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d07f      	beq.n	8001146 <CheckIfAllBuffersReadyAndSend+0x10e>
 8001046:	4b43      	ldr	r3, [pc, #268]	; (8001154 <CheckIfAllBuffersReadyAndSend+0x11c>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d07b      	beq.n	8001146 <CheckIfAllBuffersReadyAndSend+0x10e>
 800104e:	4b42      	ldr	r3, [pc, #264]	; (8001158 <CheckIfAllBuffersReadyAndSend+0x120>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d077      	beq.n	8001146 <CheckIfAllBuffersReadyAndSend+0x10e>
	}
	//Construct message that has magic numbers, then each sample separated by a hyphen.

	char msg[25 * 6]; // Adjusted size

	char* msgPtr = msg; // Pointer to track position in msg for sprintf
 8001056:	1d3b      	adds	r3, r7, #4
 8001058:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

	int magicNumber = 12345;
 800105c:	f243 0339 	movw	r3, #12345	; 0x3039
 8001060:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	msgPtr += sprintf(msgPtr, "%hu-", magicNumber);
 8001064:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8001068:	493c      	ldr	r1, [pc, #240]	; (800115c <CheckIfAllBuffersReadyAndSend+0x124>)
 800106a:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800106e:	f005 fa5d 	bl	800652c <siprintf>
 8001072:	4603      	mov	r3, r0
 8001074:	461a      	mov	r2, r3
 8001076:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800107a:	4413      	add	r3, r2
 800107c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

	for (int i = 0; i < 8; ++i)
 8001080:	2300      	movs	r3, #0
 8001082:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001086:	e016      	b.n	80010b6 <CheckIfAllBuffersReadyAndSend+0x7e>
	{
		msgPtr += sprintf(msgPtr, "%hu-", adcBuffer_1[i]);
 8001088:	4a35      	ldr	r2, [pc, #212]	; (8001160 <CheckIfAllBuffersReadyAndSend+0x128>)
 800108a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800108e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001092:	461a      	mov	r2, r3
 8001094:	4931      	ldr	r1, [pc, #196]	; (800115c <CheckIfAllBuffersReadyAndSend+0x124>)
 8001096:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800109a:	f005 fa47 	bl	800652c <siprintf>
 800109e:	4603      	mov	r3, r0
 80010a0:	461a      	mov	r2, r3
 80010a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80010a6:	4413      	add	r3, r2
 80010a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	for (int i = 0; i < 8; ++i)
 80010ac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80010b0:	3301      	adds	r3, #1
 80010b2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80010b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80010ba:	2b07      	cmp	r3, #7
 80010bc:	dde4      	ble.n	8001088 <CheckIfAllBuffersReadyAndSend+0x50>
	}
	for (int i = 0; i < 8; ++i)
 80010be:	2300      	movs	r3, #0
 80010c0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80010c4:	e016      	b.n	80010f4 <CheckIfAllBuffersReadyAndSend+0xbc>
	{
		msgPtr += sprintf(msgPtr, "%hu-", adcBuffer_2[i]);
 80010c6:	4a27      	ldr	r2, [pc, #156]	; (8001164 <CheckIfAllBuffersReadyAndSend+0x12c>)
 80010c8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80010cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80010d0:	461a      	mov	r2, r3
 80010d2:	4922      	ldr	r1, [pc, #136]	; (800115c <CheckIfAllBuffersReadyAndSend+0x124>)
 80010d4:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 80010d8:	f005 fa28 	bl	800652c <siprintf>
 80010dc:	4603      	mov	r3, r0
 80010de:	461a      	mov	r2, r3
 80010e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80010e4:	4413      	add	r3, r2
 80010e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	for (int i = 0; i < 8; ++i)
 80010ea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80010ee:	3301      	adds	r3, #1
 80010f0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80010f4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80010f8:	2b07      	cmp	r3, #7
 80010fa:	dde4      	ble.n	80010c6 <CheckIfAllBuffersReadyAndSend+0x8e>
	}
	for (int i = 0; i < 8; ++i)
 80010fc:	2300      	movs	r3, #0
 80010fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001102:	e016      	b.n	8001132 <CheckIfAllBuffersReadyAndSend+0xfa>
	{
		msgPtr += sprintf(msgPtr, "%hu-", adcBuffer_3[i]);
 8001104:	4a18      	ldr	r2, [pc, #96]	; (8001168 <CheckIfAllBuffersReadyAndSend+0x130>)
 8001106:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800110a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800110e:	461a      	mov	r2, r3
 8001110:	4912      	ldr	r1, [pc, #72]	; (800115c <CheckIfAllBuffersReadyAndSend+0x124>)
 8001112:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8001116:	f005 fa09 	bl	800652c <siprintf>
 800111a:	4603      	mov	r3, r0
 800111c:	461a      	mov	r2, r3
 800111e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001122:	4413      	add	r3, r2
 8001124:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	for (int i = 0; i < 8; ++i)
 8001128:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800112c:	3301      	adds	r3, #1
 800112e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001132:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001136:	2b07      	cmp	r3, #7
 8001138:	dde4      	ble.n	8001104 <CheckIfAllBuffersReadyAndSend+0xcc>
	}

	PrintUARTMessage(&huart3, msg);
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	4619      	mov	r1, r3
 800113e:	480b      	ldr	r0, [pc, #44]	; (800116c <CheckIfAllBuffersReadyAndSend+0x134>)
 8001140:	f000 f816 	bl	8001170 <PrintUARTMessage>
 8001144:	e000      	b.n	8001148 <CheckIfAllBuffersReadyAndSend+0x110>
		return;
 8001146:	bf00      	nop
}
 8001148:	37b0      	adds	r7, #176	; 0xb0
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	20000a20 	.word	0x20000a20
 8001154:	20000a24 	.word	0x20000a24
 8001158:	20000a28 	.word	0x20000a28
 800115c:	08006e8c 	.word	0x08006e8c
 8001160:	200008a0 	.word	0x200008a0
 8001164:	20000920 	.word	0x20000920
 8001168:	200009a0 	.word	0x200009a0
 800116c:	20000310 	.word	0x20000310

08001170 <PrintUARTMessage>:

void PrintUARTMessage(UART_HandleTypeDef *huart, const char message[])
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
 8001178:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(huart, (uint8_t*)message, strlen(message), 10);
 800117a:	6838      	ldr	r0, [r7, #0]
 800117c:	f7ff f860 	bl	8000240 <strlen>
 8001180:	4603      	mov	r3, r0
 8001182:	b29a      	uxth	r2, r3
 8001184:	230a      	movs	r3, #10
 8001186:	6839      	ldr	r1, [r7, #0]
 8001188:	6878      	ldr	r0, [r7, #4]
 800118a:	f004 fa3d 	bl	8005608 <HAL_UART_Transmit>
	char newLine[3] = "\r\n";
 800118e:	4a0a      	ldr	r2, [pc, #40]	; (80011b8 <PrintUARTMessage+0x48>)
 8001190:	f107 030c 	add.w	r3, r7, #12
 8001194:	6812      	ldr	r2, [r2, #0]
 8001196:	4611      	mov	r1, r2
 8001198:	8019      	strh	r1, [r3, #0]
 800119a:	3302      	adds	r3, #2
 800119c:	0c12      	lsrs	r2, r2, #16
 800119e:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(huart, (uint8_t*)newLine, 2, 10);
 80011a0:	f107 010c 	add.w	r1, r7, #12
 80011a4:	230a      	movs	r3, #10
 80011a6:	2202      	movs	r2, #2
 80011a8:	6878      	ldr	r0, [r7, #4]
 80011aa:	f004 fa2d 	bl	8005608 <HAL_UART_Transmit>
}
 80011ae:	bf00      	nop
 80011b0:	3710      	adds	r7, #16
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	08006e94 	.word	0x08006e94

080011bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011c0:	b672      	cpsid	i
}
 80011c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011c4:	e7fe      	b.n	80011c4 <Error_Handler+0x8>
	...

080011c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80011ce:	4b0f      	ldr	r3, [pc, #60]	; (800120c <HAL_MspInit+0x44>)
 80011d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d2:	4a0e      	ldr	r2, [pc, #56]	; (800120c <HAL_MspInit+0x44>)
 80011d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011d8:	6413      	str	r3, [r2, #64]	; 0x40
 80011da:	4b0c      	ldr	r3, [pc, #48]	; (800120c <HAL_MspInit+0x44>)
 80011dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011e2:	607b      	str	r3, [r7, #4]
 80011e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011e6:	4b09      	ldr	r3, [pc, #36]	; (800120c <HAL_MspInit+0x44>)
 80011e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ea:	4a08      	ldr	r2, [pc, #32]	; (800120c <HAL_MspInit+0x44>)
 80011ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011f0:	6453      	str	r3, [r2, #68]	; 0x44
 80011f2:	4b06      	ldr	r3, [pc, #24]	; (800120c <HAL_MspInit+0x44>)
 80011f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011fa:	603b      	str	r3, [r7, #0]
 80011fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011fe:	bf00      	nop
 8001200:	370c      	adds	r7, #12
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	40023800 	.word	0x40023800

08001210 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b090      	sub	sp, #64	; 0x40
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001218:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]
 8001220:	605a      	str	r2, [r3, #4]
 8001222:	609a      	str	r2, [r3, #8]
 8001224:	60da      	str	r2, [r3, #12]
 8001226:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a7e      	ldr	r2, [pc, #504]	; (8001428 <HAL_ADC_MspInit+0x218>)
 800122e:	4293      	cmp	r3, r2
 8001230:	f040 8085 	bne.w	800133e <HAL_ADC_MspInit+0x12e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001234:	4b7d      	ldr	r3, [pc, #500]	; (800142c <HAL_ADC_MspInit+0x21c>)
 8001236:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001238:	4a7c      	ldr	r2, [pc, #496]	; (800142c <HAL_ADC_MspInit+0x21c>)
 800123a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800123e:	6453      	str	r3, [r2, #68]	; 0x44
 8001240:	4b7a      	ldr	r3, [pc, #488]	; (800142c <HAL_ADC_MspInit+0x21c>)
 8001242:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001244:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001248:	62bb      	str	r3, [r7, #40]	; 0x28
 800124a:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800124c:	4b77      	ldr	r3, [pc, #476]	; (800142c <HAL_ADC_MspInit+0x21c>)
 800124e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001250:	4a76      	ldr	r2, [pc, #472]	; (800142c <HAL_ADC_MspInit+0x21c>)
 8001252:	f043 0304 	orr.w	r3, r3, #4
 8001256:	6313      	str	r3, [r2, #48]	; 0x30
 8001258:	4b74      	ldr	r3, [pc, #464]	; (800142c <HAL_ADC_MspInit+0x21c>)
 800125a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125c:	f003 0304 	and.w	r3, r3, #4
 8001260:	627b      	str	r3, [r7, #36]	; 0x24
 8001262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001264:	4b71      	ldr	r3, [pc, #452]	; (800142c <HAL_ADC_MspInit+0x21c>)
 8001266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001268:	4a70      	ldr	r2, [pc, #448]	; (800142c <HAL_ADC_MspInit+0x21c>)
 800126a:	f043 0301 	orr.w	r3, r3, #1
 800126e:	6313      	str	r3, [r2, #48]	; 0x30
 8001270:	4b6e      	ldr	r3, [pc, #440]	; (800142c <HAL_ADC_MspInit+0x21c>)
 8001272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001274:	f003 0301 	and.w	r3, r3, #1
 8001278:	623b      	str	r3, [r7, #32]
 800127a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800127c:	4b6b      	ldr	r3, [pc, #428]	; (800142c <HAL_ADC_MspInit+0x21c>)
 800127e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001280:	4a6a      	ldr	r2, [pc, #424]	; (800142c <HAL_ADC_MspInit+0x21c>)
 8001282:	f043 0302 	orr.w	r3, r3, #2
 8001286:	6313      	str	r3, [r2, #48]	; 0x30
 8001288:	4b68      	ldr	r3, [pc, #416]	; (800142c <HAL_ADC_MspInit+0x21c>)
 800128a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128c:	f003 0302 	and.w	r3, r3, #2
 8001290:	61fb      	str	r3, [r7, #28]
 8001292:	69fb      	ldr	r3, [r7, #28]
    PA7     ------> ADC1_IN7
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001294:	2332      	movs	r3, #50	; 0x32
 8001296:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001298:	2303      	movs	r3, #3
 800129a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129c:	2300      	movs	r3, #0
 800129e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012a4:	4619      	mov	r1, r3
 80012a6:	4862      	ldr	r0, [pc, #392]	; (8001430 <HAL_ADC_MspInit+0x220>)
 80012a8:	f001 fd68 	bl	8002d7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80012ac:	23ff      	movs	r3, #255	; 0xff
 80012ae:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012b0:	2303      	movs	r3, #3
 80012b2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b4:	2300      	movs	r3, #0
 80012b6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012bc:	4619      	mov	r1, r3
 80012be:	485d      	ldr	r0, [pc, #372]	; (8001434 <HAL_ADC_MspInit+0x224>)
 80012c0:	f001 fd5c 	bl	8002d7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80012c4:	2301      	movs	r3, #1
 80012c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012c8:	2303      	movs	r3, #3
 80012ca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012cc:	2300      	movs	r3, #0
 80012ce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012d4:	4619      	mov	r1, r3
 80012d6:	4858      	ldr	r0, [pc, #352]	; (8001438 <HAL_ADC_MspInit+0x228>)
 80012d8:	f001 fd50 	bl	8002d7c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80012dc:	4b57      	ldr	r3, [pc, #348]	; (800143c <HAL_ADC_MspInit+0x22c>)
 80012de:	4a58      	ldr	r2, [pc, #352]	; (8001440 <HAL_ADC_MspInit+0x230>)
 80012e0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80012e2:	4b56      	ldr	r3, [pc, #344]	; (800143c <HAL_ADC_MspInit+0x22c>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012e8:	4b54      	ldr	r3, [pc, #336]	; (800143c <HAL_ADC_MspInit+0x22c>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80012ee:	4b53      	ldr	r3, [pc, #332]	; (800143c <HAL_ADC_MspInit+0x22c>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80012f4:	4b51      	ldr	r3, [pc, #324]	; (800143c <HAL_ADC_MspInit+0x22c>)
 80012f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012fa:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80012fc:	4b4f      	ldr	r3, [pc, #316]	; (800143c <HAL_ADC_MspInit+0x22c>)
 80012fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001302:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001304:	4b4d      	ldr	r3, [pc, #308]	; (800143c <HAL_ADC_MspInit+0x22c>)
 8001306:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800130a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800130c:	4b4b      	ldr	r3, [pc, #300]	; (800143c <HAL_ADC_MspInit+0x22c>)
 800130e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001312:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001314:	4b49      	ldr	r3, [pc, #292]	; (800143c <HAL_ADC_MspInit+0x22c>)
 8001316:	2200      	movs	r2, #0
 8001318:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800131a:	4b48      	ldr	r3, [pc, #288]	; (800143c <HAL_ADC_MspInit+0x22c>)
 800131c:	2200      	movs	r2, #0
 800131e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001320:	4846      	ldr	r0, [pc, #280]	; (800143c <HAL_ADC_MspInit+0x22c>)
 8001322:	f001 f913 	bl	800254c <HAL_DMA_Init>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <HAL_ADC_MspInit+0x120>
    {
      Error_Handler();
 800132c:	f7ff ff46 	bl	80011bc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	4a42      	ldr	r2, [pc, #264]	; (800143c <HAL_ADC_MspInit+0x22c>)
 8001334:	639a      	str	r2, [r3, #56]	; 0x38
 8001336:	4a41      	ldr	r2, [pc, #260]	; (800143c <HAL_ADC_MspInit+0x22c>)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800133c:	e0e3      	b.n	8001506 <HAL_ADC_MspInit+0x2f6>
  else if(hadc->Instance==ADC2)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a40      	ldr	r2, [pc, #256]	; (8001444 <HAL_ADC_MspInit+0x234>)
 8001344:	4293      	cmp	r3, r2
 8001346:	f040 8083 	bne.w	8001450 <HAL_ADC_MspInit+0x240>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800134a:	4b38      	ldr	r3, [pc, #224]	; (800142c <HAL_ADC_MspInit+0x21c>)
 800134c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800134e:	4a37      	ldr	r2, [pc, #220]	; (800142c <HAL_ADC_MspInit+0x21c>)
 8001350:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001354:	6453      	str	r3, [r2, #68]	; 0x44
 8001356:	4b35      	ldr	r3, [pc, #212]	; (800142c <HAL_ADC_MspInit+0x21c>)
 8001358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800135a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800135e:	61bb      	str	r3, [r7, #24]
 8001360:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001362:	4b32      	ldr	r3, [pc, #200]	; (800142c <HAL_ADC_MspInit+0x21c>)
 8001364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001366:	4a31      	ldr	r2, [pc, #196]	; (800142c <HAL_ADC_MspInit+0x21c>)
 8001368:	f043 0304 	orr.w	r3, r3, #4
 800136c:	6313      	str	r3, [r2, #48]	; 0x30
 800136e:	4b2f      	ldr	r3, [pc, #188]	; (800142c <HAL_ADC_MspInit+0x21c>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001372:	f003 0304 	and.w	r3, r3, #4
 8001376:	617b      	str	r3, [r7, #20]
 8001378:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800137a:	4b2c      	ldr	r3, [pc, #176]	; (800142c <HAL_ADC_MspInit+0x21c>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137e:	4a2b      	ldr	r2, [pc, #172]	; (800142c <HAL_ADC_MspInit+0x21c>)
 8001380:	f043 0302 	orr.w	r3, r3, #2
 8001384:	6313      	str	r3, [r2, #48]	; 0x30
 8001386:	4b29      	ldr	r3, [pc, #164]	; (800142c <HAL_ADC_MspInit+0x21c>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138a:	f003 0302 	and.w	r3, r3, #2
 800138e:	613b      	str	r3, [r7, #16]
 8001390:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001392:	233f      	movs	r3, #63	; 0x3f
 8001394:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001396:	2303      	movs	r3, #3
 8001398:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139a:	2300      	movs	r3, #0
 800139c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800139e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013a2:	4619      	mov	r1, r3
 80013a4:	4822      	ldr	r0, [pc, #136]	; (8001430 <HAL_ADC_MspInit+0x220>)
 80013a6:	f001 fce9 	bl	8002d7c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80013aa:	2303      	movs	r3, #3
 80013ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013ae:	2303      	movs	r3, #3
 80013b0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b2:	2300      	movs	r3, #0
 80013b4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013ba:	4619      	mov	r1, r3
 80013bc:	481e      	ldr	r0, [pc, #120]	; (8001438 <HAL_ADC_MspInit+0x228>)
 80013be:	f001 fcdd 	bl	8002d7c <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 80013c2:	4b21      	ldr	r3, [pc, #132]	; (8001448 <HAL_ADC_MspInit+0x238>)
 80013c4:	4a21      	ldr	r2, [pc, #132]	; (800144c <HAL_ADC_MspInit+0x23c>)
 80013c6:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 80013c8:	4b1f      	ldr	r3, [pc, #124]	; (8001448 <HAL_ADC_MspInit+0x238>)
 80013ca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80013ce:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013d0:	4b1d      	ldr	r3, [pc, #116]	; (8001448 <HAL_ADC_MspInit+0x238>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80013d6:	4b1c      	ldr	r3, [pc, #112]	; (8001448 <HAL_ADC_MspInit+0x238>)
 80013d8:	2200      	movs	r2, #0
 80013da:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80013dc:	4b1a      	ldr	r3, [pc, #104]	; (8001448 <HAL_ADC_MspInit+0x238>)
 80013de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013e2:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80013e4:	4b18      	ldr	r3, [pc, #96]	; (8001448 <HAL_ADC_MspInit+0x238>)
 80013e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80013ea:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80013ec:	4b16      	ldr	r3, [pc, #88]	; (8001448 <HAL_ADC_MspInit+0x238>)
 80013ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013f2:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80013f4:	4b14      	ldr	r3, [pc, #80]	; (8001448 <HAL_ADC_MspInit+0x238>)
 80013f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013fa:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80013fc:	4b12      	ldr	r3, [pc, #72]	; (8001448 <HAL_ADC_MspInit+0x238>)
 80013fe:	2200      	movs	r2, #0
 8001400:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001402:	4b11      	ldr	r3, [pc, #68]	; (8001448 <HAL_ADC_MspInit+0x238>)
 8001404:	2200      	movs	r2, #0
 8001406:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001408:	480f      	ldr	r0, [pc, #60]	; (8001448 <HAL_ADC_MspInit+0x238>)
 800140a:	f001 f89f 	bl	800254c <HAL_DMA_Init>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <HAL_ADC_MspInit+0x208>
      Error_Handler();
 8001414:	f7ff fed2 	bl	80011bc <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	4a0b      	ldr	r2, [pc, #44]	; (8001448 <HAL_ADC_MspInit+0x238>)
 800141c:	639a      	str	r2, [r3, #56]	; 0x38
 800141e:	4a0a      	ldr	r2, [pc, #40]	; (8001448 <HAL_ADC_MspInit+0x238>)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001424:	e06f      	b.n	8001506 <HAL_ADC_MspInit+0x2f6>
 8001426:	bf00      	nop
 8001428:	40012000 	.word	0x40012000
 800142c:	40023800 	.word	0x40023800
 8001430:	40020800 	.word	0x40020800
 8001434:	40020000 	.word	0x40020000
 8001438:	40020400 	.word	0x40020400
 800143c:	20000150 	.word	0x20000150
 8001440:	40026410 	.word	0x40026410
 8001444:	40012100 	.word	0x40012100
 8001448:	200001b0 	.word	0x200001b0
 800144c:	40026440 	.word	0x40026440
  else if(hadc->Instance==ADC3)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a2e      	ldr	r2, [pc, #184]	; (8001510 <HAL_ADC_MspInit+0x300>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d155      	bne.n	8001506 <HAL_ADC_MspInit+0x2f6>
    __HAL_RCC_ADC3_CLK_ENABLE();
 800145a:	4b2e      	ldr	r3, [pc, #184]	; (8001514 <HAL_ADC_MspInit+0x304>)
 800145c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800145e:	4a2d      	ldr	r2, [pc, #180]	; (8001514 <HAL_ADC_MspInit+0x304>)
 8001460:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001464:	6453      	str	r3, [r2, #68]	; 0x44
 8001466:	4b2b      	ldr	r3, [pc, #172]	; (8001514 <HAL_ADC_MspInit+0x304>)
 8001468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800146a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800146e:	60fb      	str	r3, [r7, #12]
 8001470:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001472:	4b28      	ldr	r3, [pc, #160]	; (8001514 <HAL_ADC_MspInit+0x304>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001476:	4a27      	ldr	r2, [pc, #156]	; (8001514 <HAL_ADC_MspInit+0x304>)
 8001478:	f043 0320 	orr.w	r3, r3, #32
 800147c:	6313      	str	r3, [r2, #48]	; 0x30
 800147e:	4b25      	ldr	r3, [pc, #148]	; (8001514 <HAL_ADC_MspInit+0x304>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001482:	f003 0320 	and.w	r3, r3, #32
 8001486:	60bb      	str	r3, [r7, #8]
 8001488:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 800148a:	f44f 63ff 	mov.w	r3, #2040	; 0x7f8
 800148e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001490:	2303      	movs	r3, #3
 8001492:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001494:	2300      	movs	r3, #0
 8001496:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001498:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800149c:	4619      	mov	r1, r3
 800149e:	481e      	ldr	r0, [pc, #120]	; (8001518 <HAL_ADC_MspInit+0x308>)
 80014a0:	f001 fc6c 	bl	8002d7c <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream1;
 80014a4:	4b1d      	ldr	r3, [pc, #116]	; (800151c <HAL_ADC_MspInit+0x30c>)
 80014a6:	4a1e      	ldr	r2, [pc, #120]	; (8001520 <HAL_ADC_MspInit+0x310>)
 80014a8:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 80014aa:	4b1c      	ldr	r3, [pc, #112]	; (800151c <HAL_ADC_MspInit+0x30c>)
 80014ac:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80014b0:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014b2:	4b1a      	ldr	r3, [pc, #104]	; (800151c <HAL_ADC_MspInit+0x30c>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 80014b8:	4b18      	ldr	r3, [pc, #96]	; (800151c <HAL_ADC_MspInit+0x30c>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 80014be:	4b17      	ldr	r3, [pc, #92]	; (800151c <HAL_ADC_MspInit+0x30c>)
 80014c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014c4:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80014c6:	4b15      	ldr	r3, [pc, #84]	; (800151c <HAL_ADC_MspInit+0x30c>)
 80014c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80014cc:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80014ce:	4b13      	ldr	r3, [pc, #76]	; (800151c <HAL_ADC_MspInit+0x30c>)
 80014d0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014d4:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 80014d6:	4b11      	ldr	r3, [pc, #68]	; (800151c <HAL_ADC_MspInit+0x30c>)
 80014d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014dc:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 80014de:	4b0f      	ldr	r3, [pc, #60]	; (800151c <HAL_ADC_MspInit+0x30c>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014e4:	4b0d      	ldr	r3, [pc, #52]	; (800151c <HAL_ADC_MspInit+0x30c>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80014ea:	480c      	ldr	r0, [pc, #48]	; (800151c <HAL_ADC_MspInit+0x30c>)
 80014ec:	f001 f82e 	bl	800254c <HAL_DMA_Init>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <HAL_ADC_MspInit+0x2ea>
      Error_Handler();
 80014f6:	f7ff fe61 	bl	80011bc <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	4a07      	ldr	r2, [pc, #28]	; (800151c <HAL_ADC_MspInit+0x30c>)
 80014fe:	639a      	str	r2, [r3, #56]	; 0x38
 8001500:	4a06      	ldr	r2, [pc, #24]	; (800151c <HAL_ADC_MspInit+0x30c>)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001506:	bf00      	nop
 8001508:	3740      	adds	r7, #64	; 0x40
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	40012200 	.word	0x40012200
 8001514:	40023800 	.word	0x40023800
 8001518:	40021400 	.word	0x40021400
 800151c:	20000210 	.word	0x20000210
 8001520:	40026428 	.word	0x40026428

08001524 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b08a      	sub	sp, #40	; 0x28
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800152c:	f107 0314 	add.w	r3, r7, #20
 8001530:	2200      	movs	r2, #0
 8001532:	601a      	str	r2, [r3, #0]
 8001534:	605a      	str	r2, [r3, #4]
 8001536:	609a      	str	r2, [r3, #8]
 8001538:	60da      	str	r2, [r3, #12]
 800153a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a1f      	ldr	r2, [pc, #124]	; (80015c0 <HAL_I2C_MspInit+0x9c>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d138      	bne.n	80015b8 <HAL_I2C_MspInit+0x94>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001546:	4b1f      	ldr	r3, [pc, #124]	; (80015c4 <HAL_I2C_MspInit+0xa0>)
 8001548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154a:	4a1e      	ldr	r2, [pc, #120]	; (80015c4 <HAL_I2C_MspInit+0xa0>)
 800154c:	f043 0302 	orr.w	r3, r3, #2
 8001550:	6313      	str	r3, [r2, #48]	; 0x30
 8001552:	4b1c      	ldr	r3, [pc, #112]	; (80015c4 <HAL_I2C_MspInit+0xa0>)
 8001554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001556:	f003 0302 	and.w	r3, r3, #2
 800155a:	613b      	str	r3, [r7, #16]
 800155c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800155e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001562:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001564:	2312      	movs	r3, #18
 8001566:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001568:	2301      	movs	r3, #1
 800156a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800156c:	2303      	movs	r3, #3
 800156e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001570:	2304      	movs	r3, #4
 8001572:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001574:	f107 0314 	add.w	r3, r7, #20
 8001578:	4619      	mov	r1, r3
 800157a:	4813      	ldr	r0, [pc, #76]	; (80015c8 <HAL_I2C_MspInit+0xa4>)
 800157c:	f001 fbfe 	bl	8002d7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001580:	4b10      	ldr	r3, [pc, #64]	; (80015c4 <HAL_I2C_MspInit+0xa0>)
 8001582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001584:	4a0f      	ldr	r2, [pc, #60]	; (80015c4 <HAL_I2C_MspInit+0xa0>)
 8001586:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800158a:	6413      	str	r3, [r2, #64]	; 0x40
 800158c:	4b0d      	ldr	r3, [pc, #52]	; (80015c4 <HAL_I2C_MspInit+0xa0>)
 800158e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001590:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001594:	60fb      	str	r3, [r7, #12]
 8001596:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001598:	2200      	movs	r2, #0
 800159a:	2100      	movs	r1, #0
 800159c:	201f      	movs	r0, #31
 800159e:	f000 ff9e 	bl	80024de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80015a2:	201f      	movs	r0, #31
 80015a4:	f000 ffb7 	bl	8002516 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80015a8:	2200      	movs	r2, #0
 80015aa:	2100      	movs	r1, #0
 80015ac:	2020      	movs	r0, #32
 80015ae:	f000 ff96 	bl	80024de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80015b2:	2020      	movs	r0, #32
 80015b4:	f000 ffaf 	bl	8002516 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80015b8:	bf00      	nop
 80015ba:	3728      	adds	r7, #40	; 0x28
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	40005400 	.word	0x40005400
 80015c4:	40023800 	.word	0x40023800
 80015c8:	40020400 	.word	0x40020400

080015cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b08a      	sub	sp, #40	; 0x28
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d4:	f107 0314 	add.w	r3, r7, #20
 80015d8:	2200      	movs	r2, #0
 80015da:	601a      	str	r2, [r3, #0]
 80015dc:	605a      	str	r2, [r3, #4]
 80015de:	609a      	str	r2, [r3, #8]
 80015e0:	60da      	str	r2, [r3, #12]
 80015e2:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015ec:	d128      	bne.n	8001640 <HAL_TIM_Base_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015ee:	4b16      	ldr	r3, [pc, #88]	; (8001648 <HAL_TIM_Base_MspInit+0x7c>)
 80015f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f2:	4a15      	ldr	r2, [pc, #84]	; (8001648 <HAL_TIM_Base_MspInit+0x7c>)
 80015f4:	f043 0301 	orr.w	r3, r3, #1
 80015f8:	6413      	str	r3, [r2, #64]	; 0x40
 80015fa:	4b13      	ldr	r3, [pc, #76]	; (8001648 <HAL_TIM_Base_MspInit+0x7c>)
 80015fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fe:	f003 0301 	and.w	r3, r3, #1
 8001602:	613b      	str	r3, [r7, #16]
 8001604:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001606:	4b10      	ldr	r3, [pc, #64]	; (8001648 <HAL_TIM_Base_MspInit+0x7c>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160a:	4a0f      	ldr	r2, [pc, #60]	; (8001648 <HAL_TIM_Base_MspInit+0x7c>)
 800160c:	f043 0301 	orr.w	r3, r3, #1
 8001610:	6313      	str	r3, [r2, #48]	; 0x30
 8001612:	4b0d      	ldr	r3, [pc, #52]	; (8001648 <HAL_TIM_Base_MspInit+0x7c>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001616:	f003 0301 	and.w	r3, r3, #1
 800161a:	60fb      	str	r3, [r7, #12]
 800161c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800161e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001622:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001624:	2302      	movs	r3, #2
 8001626:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001628:	2300      	movs	r3, #0
 800162a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800162c:	2300      	movs	r3, #0
 800162e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001630:	2301      	movs	r3, #1
 8001632:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001634:	f107 0314 	add.w	r3, r7, #20
 8001638:	4619      	mov	r1, r3
 800163a:	4804      	ldr	r0, [pc, #16]	; (800164c <HAL_TIM_Base_MspInit+0x80>)
 800163c:	f001 fb9e 	bl	8002d7c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001640:	bf00      	nop
 8001642:	3728      	adds	r7, #40	; 0x28
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	40023800 	.word	0x40023800
 800164c:	40020000 	.word	0x40020000

08001650 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b08a      	sub	sp, #40	; 0x28
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001658:	f107 0314 	add.w	r3, r7, #20
 800165c:	2200      	movs	r2, #0
 800165e:	601a      	str	r2, [r3, #0]
 8001660:	605a      	str	r2, [r3, #4]
 8001662:	609a      	str	r2, [r3, #8]
 8001664:	60da      	str	r2, [r3, #12]
 8001666:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a17      	ldr	r2, [pc, #92]	; (80016cc <HAL_UART_MspInit+0x7c>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d128      	bne.n	80016c4 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001672:	4b17      	ldr	r3, [pc, #92]	; (80016d0 <HAL_UART_MspInit+0x80>)
 8001674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001676:	4a16      	ldr	r2, [pc, #88]	; (80016d0 <HAL_UART_MspInit+0x80>)
 8001678:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800167c:	6413      	str	r3, [r2, #64]	; 0x40
 800167e:	4b14      	ldr	r3, [pc, #80]	; (80016d0 <HAL_UART_MspInit+0x80>)
 8001680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001682:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001686:	613b      	str	r3, [r7, #16]
 8001688:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800168a:	4b11      	ldr	r3, [pc, #68]	; (80016d0 <HAL_UART_MspInit+0x80>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168e:	4a10      	ldr	r2, [pc, #64]	; (80016d0 <HAL_UART_MspInit+0x80>)
 8001690:	f043 0308 	orr.w	r3, r3, #8
 8001694:	6313      	str	r3, [r2, #48]	; 0x30
 8001696:	4b0e      	ldr	r3, [pc, #56]	; (80016d0 <HAL_UART_MspInit+0x80>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169a:	f003 0308 	and.w	r3, r3, #8
 800169e:	60fb      	str	r3, [r7, #12]
 80016a0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80016a2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80016a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a8:	2302      	movs	r3, #2
 80016aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ac:	2300      	movs	r3, #0
 80016ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016b0:	2303      	movs	r3, #3
 80016b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80016b4:	2307      	movs	r3, #7
 80016b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016b8:	f107 0314 	add.w	r3, r7, #20
 80016bc:	4619      	mov	r1, r3
 80016be:	4805      	ldr	r0, [pc, #20]	; (80016d4 <HAL_UART_MspInit+0x84>)
 80016c0:	f001 fb5c 	bl	8002d7c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80016c4:	bf00      	nop
 80016c6:	3728      	adds	r7, #40	; 0x28
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	40004800 	.word	0x40004800
 80016d0:	40023800 	.word	0x40023800
 80016d4:	40020c00 	.word	0x40020c00

080016d8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b08a      	sub	sp, #40	; 0x28
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e0:	f107 0314 	add.w	r3, r7, #20
 80016e4:	2200      	movs	r2, #0
 80016e6:	601a      	str	r2, [r3, #0]
 80016e8:	605a      	str	r2, [r3, #4]
 80016ea:	609a      	str	r2, [r3, #8]
 80016ec:	60da      	str	r2, [r3, #12]
 80016ee:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80016f8:	d141      	bne.n	800177e <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016fa:	4b23      	ldr	r3, [pc, #140]	; (8001788 <HAL_PCD_MspInit+0xb0>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fe:	4a22      	ldr	r2, [pc, #136]	; (8001788 <HAL_PCD_MspInit+0xb0>)
 8001700:	f043 0301 	orr.w	r3, r3, #1
 8001704:	6313      	str	r3, [r2, #48]	; 0x30
 8001706:	4b20      	ldr	r3, [pc, #128]	; (8001788 <HAL_PCD_MspInit+0xb0>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170a:	f003 0301 	and.w	r3, r3, #1
 800170e:	613b      	str	r3, [r7, #16]
 8001710:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001712:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001716:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001718:	2302      	movs	r3, #2
 800171a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171c:	2300      	movs	r3, #0
 800171e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001720:	2303      	movs	r3, #3
 8001722:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001724:	230a      	movs	r3, #10
 8001726:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001728:	f107 0314 	add.w	r3, r7, #20
 800172c:	4619      	mov	r1, r3
 800172e:	4817      	ldr	r0, [pc, #92]	; (800178c <HAL_PCD_MspInit+0xb4>)
 8001730:	f001 fb24 	bl	8002d7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001734:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001738:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800173a:	2300      	movs	r3, #0
 800173c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173e:	2300      	movs	r3, #0
 8001740:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001742:	f107 0314 	add.w	r3, r7, #20
 8001746:	4619      	mov	r1, r3
 8001748:	4810      	ldr	r0, [pc, #64]	; (800178c <HAL_PCD_MspInit+0xb4>)
 800174a:	f001 fb17 	bl	8002d7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800174e:	4b0e      	ldr	r3, [pc, #56]	; (8001788 <HAL_PCD_MspInit+0xb0>)
 8001750:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001752:	4a0d      	ldr	r2, [pc, #52]	; (8001788 <HAL_PCD_MspInit+0xb0>)
 8001754:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001758:	6353      	str	r3, [r2, #52]	; 0x34
 800175a:	4b0b      	ldr	r3, [pc, #44]	; (8001788 <HAL_PCD_MspInit+0xb0>)
 800175c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800175e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001762:	60fb      	str	r3, [r7, #12]
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	4b08      	ldr	r3, [pc, #32]	; (8001788 <HAL_PCD_MspInit+0xb0>)
 8001768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800176a:	4a07      	ldr	r2, [pc, #28]	; (8001788 <HAL_PCD_MspInit+0xb0>)
 800176c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001770:	6453      	str	r3, [r2, #68]	; 0x44
 8001772:	4b05      	ldr	r3, [pc, #20]	; (8001788 <HAL_PCD_MspInit+0xb0>)
 8001774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001776:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800177a:	60bb      	str	r3, [r7, #8]
 800177c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800177e:	bf00      	nop
 8001780:	3728      	adds	r7, #40	; 0x28
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	40023800 	.word	0x40023800
 800178c:	40020000 	.word	0x40020000

08001790 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001794:	e7fe      	b.n	8001794 <NMI_Handler+0x4>

08001796 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001796:	b480      	push	{r7}
 8001798:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800179a:	e7fe      	b.n	800179a <HardFault_Handler+0x4>

0800179c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017a0:	e7fe      	b.n	80017a0 <MemManage_Handler+0x4>

080017a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017a2:	b480      	push	{r7}
 80017a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017a6:	e7fe      	b.n	80017a6 <BusFault_Handler+0x4>

080017a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017ac:	e7fe      	b.n	80017ac <UsageFault_Handler+0x4>

080017ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017ae:	b480      	push	{r7}
 80017b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017b2:	bf00      	nop
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr

080017bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017c0:	bf00      	nop
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr

080017ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017ca:	b480      	push	{r7}
 80017cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017ce:	bf00      	nop
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr

080017d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017dc:	f000 f8ec 	bl	80019b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017e0:	bf00      	nop
 80017e2:	bd80      	pop	{r7, pc}

080017e4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80017e8:	4802      	ldr	r0, [pc, #8]	; (80017f4 <I2C1_EV_IRQHandler+0x10>)
 80017ea:	f001 fd1d 	bl	8003228 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80017ee:	bf00      	nop
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	20000270 	.word	0x20000270

080017f8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80017fc:	4802      	ldr	r0, [pc, #8]	; (8001808 <I2C1_ER_IRQHandler+0x10>)
 80017fe:	f001 fd2d 	bl	800325c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001802:	bf00      	nop
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	20000270 	.word	0x20000270

0800180c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001810:	4802      	ldr	r0, [pc, #8]	; (800181c <DMA2_Stream0_IRQHandler+0x10>)
 8001812:	f001 f83b 	bl	800288c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001816:	bf00      	nop
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	20000150 	.word	0x20000150

08001820 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8001824:	4802      	ldr	r0, [pc, #8]	; (8001830 <DMA2_Stream1_IRQHandler+0x10>)
 8001826:	f001 f831 	bl	800288c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800182a:	bf00      	nop
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	20000210 	.word	0x20000210

08001834 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001838:	4802      	ldr	r0, [pc, #8]	; (8001844 <DMA2_Stream2_IRQHandler+0x10>)
 800183a:	f001 f827 	bl	800288c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800183e:	bf00      	nop
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	200001b0 	.word	0x200001b0

08001848 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b086      	sub	sp, #24
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001850:	4a14      	ldr	r2, [pc, #80]	; (80018a4 <_sbrk+0x5c>)
 8001852:	4b15      	ldr	r3, [pc, #84]	; (80018a8 <_sbrk+0x60>)
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800185c:	4b13      	ldr	r3, [pc, #76]	; (80018ac <_sbrk+0x64>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d102      	bne.n	800186a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001864:	4b11      	ldr	r3, [pc, #68]	; (80018ac <_sbrk+0x64>)
 8001866:	4a12      	ldr	r2, [pc, #72]	; (80018b0 <_sbrk+0x68>)
 8001868:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800186a:	4b10      	ldr	r3, [pc, #64]	; (80018ac <_sbrk+0x64>)
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4413      	add	r3, r2
 8001872:	693a      	ldr	r2, [r7, #16]
 8001874:	429a      	cmp	r2, r3
 8001876:	d207      	bcs.n	8001888 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001878:	f004 fe80 	bl	800657c <__errno>
 800187c:	4603      	mov	r3, r0
 800187e:	220c      	movs	r2, #12
 8001880:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001882:	f04f 33ff 	mov.w	r3, #4294967295
 8001886:	e009      	b.n	800189c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001888:	4b08      	ldr	r3, [pc, #32]	; (80018ac <_sbrk+0x64>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800188e:	4b07      	ldr	r3, [pc, #28]	; (80018ac <_sbrk+0x64>)
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4413      	add	r3, r2
 8001896:	4a05      	ldr	r2, [pc, #20]	; (80018ac <_sbrk+0x64>)
 8001898:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800189a:	68fb      	ldr	r3, [r7, #12]
}
 800189c:	4618      	mov	r0, r3
 800189e:	3718      	adds	r7, #24
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	20080000 	.word	0x20080000
 80018a8:	00000400 	.word	0x00000400
 80018ac:	20000a2c 	.word	0x20000a2c
 80018b0:	20000b80 	.word	0x20000b80

080018b4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018b8:	4b06      	ldr	r3, [pc, #24]	; (80018d4 <SystemInit+0x20>)
 80018ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018be:	4a05      	ldr	r2, [pc, #20]	; (80018d4 <SystemInit+0x20>)
 80018c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018c8:	bf00      	nop
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	e000ed00 	.word	0xe000ed00

080018d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80018d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001910 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018dc:	480d      	ldr	r0, [pc, #52]	; (8001914 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80018de:	490e      	ldr	r1, [pc, #56]	; (8001918 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80018e0:	4a0e      	ldr	r2, [pc, #56]	; (800191c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80018e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018e4:	e002      	b.n	80018ec <LoopCopyDataInit>

080018e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018ea:	3304      	adds	r3, #4

080018ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018f0:	d3f9      	bcc.n	80018e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018f2:	4a0b      	ldr	r2, [pc, #44]	; (8001920 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80018f4:	4c0b      	ldr	r4, [pc, #44]	; (8001924 <LoopFillZerobss+0x26>)
  movs r3, #0
 80018f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018f8:	e001      	b.n	80018fe <LoopFillZerobss>

080018fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018fc:	3204      	adds	r2, #4

080018fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001900:	d3fb      	bcc.n	80018fa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001902:	f7ff ffd7 	bl	80018b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001906:	f004 fe3f 	bl	8006588 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800190a:	f7fe fe6f 	bl	80005ec <main>
  bx  lr    
 800190e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001910:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001914:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001918:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800191c:	08006efc 	.word	0x08006efc
  ldr r2, =_sbss
 8001920:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001924:	20000b7c 	.word	0x20000b7c

08001928 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001928:	e7fe      	b.n	8001928 <ADC_IRQHandler>
	...

0800192c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCELERATOR_ENABLE != 0)
  __HAL_FLASH_ART_ENABLE();
 8001930:	4b08      	ldr	r3, [pc, #32]	; (8001954 <HAL_Init+0x28>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a07      	ldr	r2, [pc, #28]	; (8001954 <HAL_Init+0x28>)
 8001936:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800193a:	6013      	str	r3, [r2, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800193c:	2003      	movs	r0, #3
 800193e:	f000 fdc3 	bl	80024c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001942:	2000      	movs	r0, #0
 8001944:	f000 f808 	bl	8001958 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001948:	f7ff fc3e 	bl	80011c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800194c:	2300      	movs	r3, #0
}
 800194e:	4618      	mov	r0, r3
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	40023c00 	.word	0x40023c00

08001958 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001960:	4b12      	ldr	r3, [pc, #72]	; (80019ac <HAL_InitTick+0x54>)
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	4b12      	ldr	r3, [pc, #72]	; (80019b0 <HAL_InitTick+0x58>)
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	4619      	mov	r1, r3
 800196a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800196e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001972:	fbb2 f3f3 	udiv	r3, r2, r3
 8001976:	4618      	mov	r0, r3
 8001978:	f000 fddb 	bl	8002532 <HAL_SYSTICK_Config>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e00e      	b.n	80019a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2b0f      	cmp	r3, #15
 800198a:	d80a      	bhi.n	80019a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800198c:	2200      	movs	r2, #0
 800198e:	6879      	ldr	r1, [r7, #4]
 8001990:	f04f 30ff 	mov.w	r0, #4294967295
 8001994:	f000 fda3 	bl	80024de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001998:	4a06      	ldr	r2, [pc, #24]	; (80019b4 <HAL_InitTick+0x5c>)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800199e:	2300      	movs	r3, #0
 80019a0:	e000      	b.n	80019a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	3708      	adds	r7, #8
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	20000000 	.word	0x20000000
 80019b0:	20000008 	.word	0x20000008
 80019b4:	20000004 	.word	0x20000004

080019b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019bc:	4b06      	ldr	r3, [pc, #24]	; (80019d8 <HAL_IncTick+0x20>)
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	461a      	mov	r2, r3
 80019c2:	4b06      	ldr	r3, [pc, #24]	; (80019dc <HAL_IncTick+0x24>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4413      	add	r3, r2
 80019c8:	4a04      	ldr	r2, [pc, #16]	; (80019dc <HAL_IncTick+0x24>)
 80019ca:	6013      	str	r3, [r2, #0]
}
 80019cc:	bf00      	nop
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	20000008 	.word	0x20000008
 80019dc:	20000a30 	.word	0x20000a30

080019e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  return uwTick;
 80019e4:	4b03      	ldr	r3, [pc, #12]	; (80019f4 <HAL_GetTick+0x14>)
 80019e6:	681b      	ldr	r3, [r3, #0]
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	20000a30 	.word	0x20000a30

080019f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a00:	f7ff ffee 	bl	80019e0 <HAL_GetTick>
 8001a04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a10:	d005      	beq.n	8001a1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a12:	4b0a      	ldr	r3, [pc, #40]	; (8001a3c <HAL_Delay+0x44>)
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	461a      	mov	r2, r3
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	4413      	add	r3, r2
 8001a1c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a1e:	bf00      	nop
 8001a20:	f7ff ffde 	bl	80019e0 <HAL_GetTick>
 8001a24:	4602      	mov	r2, r0
 8001a26:	68bb      	ldr	r3, [r7, #8]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	68fa      	ldr	r2, [r7, #12]
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	d8f7      	bhi.n	8001a20 <HAL_Delay+0x28>
  {
  }
}
 8001a30:	bf00      	nop
 8001a32:	bf00      	nop
 8001a34:	3710      	adds	r7, #16
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	20000008 	.word	0x20000008

08001a40 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d101      	bne.n	8001a56 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e031      	b.n	8001aba <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d109      	bne.n	8001a72 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f7ff fbd6 	bl	8001210 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2200      	movs	r2, #0
 8001a68:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a76:	f003 0310 	and.w	r3, r3, #16
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d116      	bne.n	8001aac <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a82:	4b10      	ldr	r3, [pc, #64]	; (8001ac4 <HAL_ADC_Init+0x84>)
 8001a84:	4013      	ands	r3, r2
 8001a86:	f043 0202 	orr.w	r2, r3, #2
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	f000 face 	bl	8002030 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2200      	movs	r2, #0
 8001a98:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9e:	f023 0303 	bic.w	r3, r3, #3
 8001aa2:	f043 0201 	orr.w	r2, r3, #1
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	641a      	str	r2, [r3, #64]	; 0x40
 8001aaa:	e001      	b.n	8001ab0 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001ab8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3710      	adds	r7, #16
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	ffffeefd 	.word	0xffffeefd

08001ac8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b086      	sub	sp, #24
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	60f8      	str	r0, [r7, #12]
 8001ad0:	60b9      	str	r1, [r7, #8]
 8001ad2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d101      	bne.n	8001ae6 <HAL_ADC_Start_DMA+0x1e>
 8001ae2:	2302      	movs	r3, #2
 8001ae4:	e0d4      	b.n	8001c90 <HAL_ADC_Start_DMA+0x1c8>
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	2201      	movs	r2, #1
 8001aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	f003 0301 	and.w	r3, r3, #1
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	d018      	beq.n	8001b2e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	689a      	ldr	r2, [r3, #8]
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f042 0201 	orr.w	r2, r2, #1
 8001b0a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001b0c:	4b62      	ldr	r3, [pc, #392]	; (8001c98 <HAL_ADC_Start_DMA+0x1d0>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a62      	ldr	r2, [pc, #392]	; (8001c9c <HAL_ADC_Start_DMA+0x1d4>)
 8001b12:	fba2 2303 	umull	r2, r3, r2, r3
 8001b16:	0c9a      	lsrs	r2, r3, #18
 8001b18:	4613      	mov	r3, r2
 8001b1a:	005b      	lsls	r3, r3, #1
 8001b1c:	4413      	add	r3, r2
 8001b1e:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8001b20:	e002      	b.n	8001b28 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	3b01      	subs	r3, #1
 8001b26:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d1f9      	bne.n	8001b22 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	f003 0301 	and.w	r3, r3, #1
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	f040 809c 	bne.w	8001c76 <HAL_ADC_Start_DMA+0x1ae>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b42:	4b57      	ldr	r3, [pc, #348]	; (8001ca0 <HAL_ADC_Start_DMA+0x1d8>)
 8001b44:	4013      	ands	r3, r2
 8001b46:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d007      	beq.n	8001b6c <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b60:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b64:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b70:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b78:	d106      	bne.n	8001b88 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b7e:	f023 0206 	bic.w	r2, r3, #6
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	645a      	str	r2, [r3, #68]	; 0x44
 8001b86:	e002      	b.n	8001b8e <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	2200      	movs	r2, #0
 8001b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b9a:	4a42      	ldr	r2, [pc, #264]	; (8001ca4 <HAL_ADC_Start_DMA+0x1dc>)
 8001b9c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ba2:	4a41      	ldr	r2, [pc, #260]	; (8001ca8 <HAL_ADC_Start_DMA+0x1e0>)
 8001ba4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001baa:	4a40      	ldr	r2, [pc, #256]	; (8001cac <HAL_ADC_Start_DMA+0x1e4>)
 8001bac:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001bb6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	685a      	ldr	r2, [r3, #4]
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001bc6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	689a      	ldr	r2, [r3, #8]
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001bd6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	334c      	adds	r3, #76	; 0x4c
 8001be2:	4619      	mov	r1, r3
 8001be4:	68ba      	ldr	r2, [r7, #8]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	f000 fd5e 	bl	80026a8 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001bec:	4b30      	ldr	r3, [pc, #192]	; (8001cb0 <HAL_ADC_Start_DMA+0x1e8>)
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f003 031f 	and.w	r3, r3, #31
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d10f      	bne.n	8001c18 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d143      	bne.n	8001c8e <HAL_ADC_Start_DMA+0x1c6>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	689a      	ldr	r2, [r3, #8]
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001c14:	609a      	str	r2, [r3, #8]
 8001c16:	e03a      	b.n	8001c8e <HAL_ADC_Start_DMA+0x1c6>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a25      	ldr	r2, [pc, #148]	; (8001cb4 <HAL_ADC_Start_DMA+0x1ec>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d10e      	bne.n	8001c40 <HAL_ADC_Start_DMA+0x178>
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d107      	bne.n	8001c40 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	689a      	ldr	r2, [r3, #8]
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001c3e:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8001c40:	4b1b      	ldr	r3, [pc, #108]	; (8001cb0 <HAL_ADC_Start_DMA+0x1e8>)
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f003 0310 	and.w	r3, r3, #16
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d120      	bne.n	8001c8e <HAL_ADC_Start_DMA+0x1c6>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a19      	ldr	r2, [pc, #100]	; (8001cb8 <HAL_ADC_Start_DMA+0x1f0>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d11b      	bne.n	8001c8e <HAL_ADC_Start_DMA+0x1c6>
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d114      	bne.n	8001c8e <HAL_ADC_Start_DMA+0x1c6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	689a      	ldr	r2, [r3, #8]
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001c72:	609a      	str	r2, [r3, #8]
 8001c74:	e00b      	b.n	8001c8e <HAL_ADC_Start_DMA+0x1c6>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7a:	f043 0210 	orr.w	r2, r3, #16
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c86:	f043 0201 	orr.w	r2, r3, #1
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001c8e:	2300      	movs	r3, #0
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3718      	adds	r7, #24
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	20000000 	.word	0x20000000
 8001c9c:	431bde83 	.word	0x431bde83
 8001ca0:	fffff8fe 	.word	0xfffff8fe
 8001ca4:	08002225 	.word	0x08002225
 8001ca8:	080022df 	.word	0x080022df
 8001cac:	080022fb 	.word	0x080022fb
 8001cb0:	40012300 	.word	0x40012300
 8001cb4:	40012000 	.word	0x40012000
 8001cb8:	40012200 	.word	0x40012200

08001cbc <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b084      	sub	sp, #16
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d101      	bne.n	8001cd6 <HAL_ADC_Stop_DMA+0x1a>
 8001cd2:	2302      	movs	r3, #2
 8001cd4:	e046      	b.n	8001d64 <HAL_ADC_Stop_DMA+0xa8>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2201      	movs	r2, #1
 8001cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	689a      	ldr	r2, [r3, #8]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f022 0201 	bic.w	r2, r2, #1
 8001cec:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	f003 0301 	and.w	r3, r3, #1
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d12e      	bne.n	8001d5a <HAL_ADC_Stop_DMA+0x9e>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	689a      	ldr	r2, [r3, #8]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d0a:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d10:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	2b02      	cmp	r3, #2
 8001d18:	d10f      	bne.n	8001d3a <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f000 fd22 	bl	8002768 <HAL_DMA_Abort>
 8001d24:	4603      	mov	r3, r0
 8001d26:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8001d28:	7bfb      	ldrb	r3, [r7, #15]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d005      	beq.n	8001d3a <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d32:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	685a      	ldr	r2, [r3, #4]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8001d48:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d4e:	4b07      	ldr	r3, [pc, #28]	; (8001d6c <HAL_ADC_Stop_DMA+0xb0>)
 8001d50:	4013      	ands	r3, r2
 8001d52:	f043 0201 	orr.w	r2, r3, #1
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001d62:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	3710      	adds	r7, #16
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	ffffeefe 	.word	0xffffeefe

08001d70 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001d78:	bf00      	nop
 8001d7a:	370c      	adds	r7, #12
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr

08001d84 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b085      	sub	sp, #20
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d101      	bne.n	8001da0 <HAL_ADC_ConfigChannel+0x1c>
 8001d9c:	2302      	movs	r3, #2
 8001d9e:	e136      	b.n	800200e <HAL_ADC_ConfigChannel+0x28a>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2201      	movs	r2, #1
 8001da4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	2b09      	cmp	r3, #9
 8001dae:	d93a      	bls.n	8001e26 <HAL_ADC_ConfigChannel+0xa2>
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001db8:	d035      	beq.n	8001e26 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	68d9      	ldr	r1, [r3, #12]
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	b29b      	uxth	r3, r3
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	4613      	mov	r3, r2
 8001dca:	005b      	lsls	r3, r3, #1
 8001dcc:	4413      	add	r3, r2
 8001dce:	3b1e      	subs	r3, #30
 8001dd0:	2207      	movs	r2, #7
 8001dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd6:	43da      	mvns	r2, r3
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	400a      	ands	r2, r1
 8001dde:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a8d      	ldr	r2, [pc, #564]	; (800201c <HAL_ADC_ConfigChannel+0x298>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d10a      	bne.n	8001e00 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	68d9      	ldr	r1, [r3, #12]
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	061a      	lsls	r2, r3, #24
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	430a      	orrs	r2, r1
 8001dfc:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001dfe:	e035      	b.n	8001e6c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	68d9      	ldr	r1, [r3, #12]
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	689a      	ldr	r2, [r3, #8]
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	b29b      	uxth	r3, r3
 8001e10:	4618      	mov	r0, r3
 8001e12:	4603      	mov	r3, r0
 8001e14:	005b      	lsls	r3, r3, #1
 8001e16:	4403      	add	r3, r0
 8001e18:	3b1e      	subs	r3, #30
 8001e1a:	409a      	lsls	r2, r3
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	430a      	orrs	r2, r1
 8001e22:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e24:	e022      	b.n	8001e6c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	6919      	ldr	r1, [r3, #16]
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	b29b      	uxth	r3, r3
 8001e32:	461a      	mov	r2, r3
 8001e34:	4613      	mov	r3, r2
 8001e36:	005b      	lsls	r3, r3, #1
 8001e38:	4413      	add	r3, r2
 8001e3a:	2207      	movs	r2, #7
 8001e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e40:	43da      	mvns	r2, r3
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	400a      	ands	r2, r1
 8001e48:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	6919      	ldr	r1, [r3, #16]
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	689a      	ldr	r2, [r3, #8]
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	b29b      	uxth	r3, r3
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	005b      	lsls	r3, r3, #1
 8001e60:	4403      	add	r3, r0
 8001e62:	409a      	lsls	r2, r3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	430a      	orrs	r2, r1
 8001e6a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	2b06      	cmp	r3, #6
 8001e72:	d824      	bhi.n	8001ebe <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	685a      	ldr	r2, [r3, #4]
 8001e7e:	4613      	mov	r3, r2
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	4413      	add	r3, r2
 8001e84:	3b05      	subs	r3, #5
 8001e86:	221f      	movs	r2, #31
 8001e88:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8c:	43da      	mvns	r2, r3
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	400a      	ands	r2, r1
 8001e94:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	b29b      	uxth	r3, r3
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	685a      	ldr	r2, [r3, #4]
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	4413      	add	r3, r2
 8001eae:	3b05      	subs	r3, #5
 8001eb0:	fa00 f203 	lsl.w	r2, r0, r3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	430a      	orrs	r2, r1
 8001eba:	635a      	str	r2, [r3, #52]	; 0x34
 8001ebc:	e04c      	b.n	8001f58 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	2b0c      	cmp	r3, #12
 8001ec4:	d824      	bhi.n	8001f10 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	685a      	ldr	r2, [r3, #4]
 8001ed0:	4613      	mov	r3, r2
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	4413      	add	r3, r2
 8001ed6:	3b23      	subs	r3, #35	; 0x23
 8001ed8:	221f      	movs	r2, #31
 8001eda:	fa02 f303 	lsl.w	r3, r2, r3
 8001ede:	43da      	mvns	r2, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	400a      	ands	r2, r1
 8001ee6:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	b29b      	uxth	r3, r3
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	685a      	ldr	r2, [r3, #4]
 8001efa:	4613      	mov	r3, r2
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	4413      	add	r3, r2
 8001f00:	3b23      	subs	r3, #35	; 0x23
 8001f02:	fa00 f203 	lsl.w	r2, r0, r3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	430a      	orrs	r2, r1
 8001f0c:	631a      	str	r2, [r3, #48]	; 0x30
 8001f0e:	e023      	b.n	8001f58 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	685a      	ldr	r2, [r3, #4]
 8001f1a:	4613      	mov	r3, r2
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	4413      	add	r3, r2
 8001f20:	3b41      	subs	r3, #65	; 0x41
 8001f22:	221f      	movs	r2, #31
 8001f24:	fa02 f303 	lsl.w	r3, r2, r3
 8001f28:	43da      	mvns	r2, r3
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	400a      	ands	r2, r1
 8001f30:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	b29b      	uxth	r3, r3
 8001f3e:	4618      	mov	r0, r3
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	685a      	ldr	r2, [r3, #4]
 8001f44:	4613      	mov	r3, r2
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	4413      	add	r3, r2
 8001f4a:	3b41      	subs	r3, #65	; 0x41
 8001f4c:	fa00 f203 	lsl.w	r2, r0, r3
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	430a      	orrs	r2, r1
 8001f56:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a30      	ldr	r2, [pc, #192]	; (8002020 <HAL_ADC_ConfigChannel+0x29c>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d10a      	bne.n	8001f78 <HAL_ADC_ConfigChannel+0x1f4>
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001f6a:	d105      	bne.n	8001f78 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001f6c:	4b2d      	ldr	r3, [pc, #180]	; (8002024 <HAL_ADC_ConfigChannel+0x2a0>)
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	4a2c      	ldr	r2, [pc, #176]	; (8002024 <HAL_ADC_ConfigChannel+0x2a0>)
 8001f72:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001f76:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a28      	ldr	r2, [pc, #160]	; (8002020 <HAL_ADC_ConfigChannel+0x29c>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d10f      	bne.n	8001fa2 <HAL_ADC_ConfigChannel+0x21e>
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	2b12      	cmp	r3, #18
 8001f88:	d10b      	bne.n	8001fa2 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8001f8a:	4b26      	ldr	r3, [pc, #152]	; (8002024 <HAL_ADC_ConfigChannel+0x2a0>)
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	4a25      	ldr	r2, [pc, #148]	; (8002024 <HAL_ADC_ConfigChannel+0x2a0>)
 8001f90:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001f94:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001f96:	4b23      	ldr	r3, [pc, #140]	; (8002024 <HAL_ADC_ConfigChannel+0x2a0>)
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	4a22      	ldr	r2, [pc, #136]	; (8002024 <HAL_ADC_ConfigChannel+0x2a0>)
 8001f9c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001fa0:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a1e      	ldr	r2, [pc, #120]	; (8002020 <HAL_ADC_ConfigChannel+0x29c>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d12b      	bne.n	8002004 <HAL_ADC_ConfigChannel+0x280>
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a1a      	ldr	r2, [pc, #104]	; (800201c <HAL_ADC_ConfigChannel+0x298>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d003      	beq.n	8001fbe <HAL_ADC_ConfigChannel+0x23a>
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	2b11      	cmp	r3, #17
 8001fbc:	d122      	bne.n	8002004 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8001fbe:	4b19      	ldr	r3, [pc, #100]	; (8002024 <HAL_ADC_ConfigChannel+0x2a0>)
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	4a18      	ldr	r2, [pc, #96]	; (8002024 <HAL_ADC_ConfigChannel+0x2a0>)
 8001fc4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001fc8:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001fca:	4b16      	ldr	r3, [pc, #88]	; (8002024 <HAL_ADC_ConfigChannel+0x2a0>)
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	4a15      	ldr	r2, [pc, #84]	; (8002024 <HAL_ADC_ConfigChannel+0x2a0>)
 8001fd0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001fd4:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a10      	ldr	r2, [pc, #64]	; (800201c <HAL_ADC_ConfigChannel+0x298>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d111      	bne.n	8002004 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001fe0:	4b11      	ldr	r3, [pc, #68]	; (8002028 <HAL_ADC_ConfigChannel+0x2a4>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a11      	ldr	r2, [pc, #68]	; (800202c <HAL_ADC_ConfigChannel+0x2a8>)
 8001fe6:	fba2 2303 	umull	r2, r3, r2, r3
 8001fea:	0c9a      	lsrs	r2, r3, #18
 8001fec:	4613      	mov	r3, r2
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	4413      	add	r3, r2
 8001ff2:	005b      	lsls	r3, r3, #1
 8001ff4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001ff6:	e002      	b.n	8001ffe <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	3b01      	subs	r3, #1
 8001ffc:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d1f9      	bne.n	8001ff8 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2200      	movs	r2, #0
 8002008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800200c:	2300      	movs	r3, #0
}
 800200e:	4618      	mov	r0, r3
 8002010:	3714      	adds	r7, #20
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop
 800201c:	10000012 	.word	0x10000012
 8002020:	40012000 	.word	0x40012000
 8002024:	40012300 	.word	0x40012300
 8002028:	20000000 	.word	0x20000000
 800202c:	431bde83 	.word	0x431bde83

08002030 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002030:	b480      	push	{r7}
 8002032:	b083      	sub	sp, #12
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002038:	4b78      	ldr	r3, [pc, #480]	; (800221c <ADC_Init+0x1ec>)
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	4a77      	ldr	r2, [pc, #476]	; (800221c <ADC_Init+0x1ec>)
 800203e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002042:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002044:	4b75      	ldr	r3, [pc, #468]	; (800221c <ADC_Init+0x1ec>)
 8002046:	685a      	ldr	r2, [r3, #4]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	4973      	ldr	r1, [pc, #460]	; (800221c <ADC_Init+0x1ec>)
 800204e:	4313      	orrs	r3, r2
 8002050:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	685a      	ldr	r2, [r3, #4]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002060:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	6859      	ldr	r1, [r3, #4]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	691b      	ldr	r3, [r3, #16]
 800206c:	021a      	lsls	r2, r3, #8
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	430a      	orrs	r2, r1
 8002074:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	685a      	ldr	r2, [r3, #4]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002084:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	6859      	ldr	r1, [r3, #4]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	689a      	ldr	r2, [r3, #8]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	430a      	orrs	r2, r1
 8002096:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	689a      	ldr	r2, [r3, #8]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	6899      	ldr	r1, [r3, #8]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	68da      	ldr	r2, [r3, #12]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	430a      	orrs	r2, r1
 80020b8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020be:	4a58      	ldr	r2, [pc, #352]	; (8002220 <ADC_Init+0x1f0>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d022      	beq.n	800210a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	689a      	ldr	r2, [r3, #8]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80020d2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	6899      	ldr	r1, [r3, #8]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	430a      	orrs	r2, r1
 80020e4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	689a      	ldr	r2, [r3, #8]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80020f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	6899      	ldr	r1, [r3, #8]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	430a      	orrs	r2, r1
 8002106:	609a      	str	r2, [r3, #8]
 8002108:	e00f      	b.n	800212a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	689a      	ldr	r2, [r3, #8]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002118:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	689a      	ldr	r2, [r3, #8]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002128:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	689a      	ldr	r2, [r3, #8]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f022 0202 	bic.w	r2, r2, #2
 8002138:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	6899      	ldr	r1, [r3, #8]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	699b      	ldr	r3, [r3, #24]
 8002144:	005a      	lsls	r2, r3, #1
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	430a      	orrs	r2, r1
 800214c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d01b      	beq.n	8002190 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	685a      	ldr	r2, [r3, #4]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002166:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	685a      	ldr	r2, [r3, #4]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002176:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	6859      	ldr	r1, [r3, #4]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002182:	3b01      	subs	r3, #1
 8002184:	035a      	lsls	r2, r3, #13
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	430a      	orrs	r2, r1
 800218c:	605a      	str	r2, [r3, #4]
 800218e:	e007      	b.n	80021a0 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	685a      	ldr	r2, [r3, #4]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800219e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80021ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	69db      	ldr	r3, [r3, #28]
 80021ba:	3b01      	subs	r3, #1
 80021bc:	051a      	lsls	r2, r3, #20
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	430a      	orrs	r2, r1
 80021c4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	689a      	ldr	r2, [r3, #8]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80021d4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	6899      	ldr	r1, [r3, #8]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80021e2:	025a      	lsls	r2, r3, #9
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	430a      	orrs	r2, r1
 80021ea:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	689a      	ldr	r2, [r3, #8]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	6899      	ldr	r1, [r3, #8]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	695b      	ldr	r3, [r3, #20]
 8002206:	029a      	lsls	r2, r3, #10
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	430a      	orrs	r2, r1
 800220e:	609a      	str	r2, [r3, #8]
}
 8002210:	bf00      	nop
 8002212:	370c      	adds	r7, #12
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr
 800221c:	40012300 	.word	0x40012300
 8002220:	0f000001 	.word	0x0f000001

08002224 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b084      	sub	sp, #16
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002230:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002236:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800223a:	2b00      	cmp	r3, #0
 800223c:	d13c      	bne.n	80022b8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002242:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002254:	2b00      	cmp	r3, #0
 8002256:	d12b      	bne.n	80022b0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800225c:	2b00      	cmp	r3, #0
 800225e:	d127      	bne.n	80022b0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002266:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800226a:	2b00      	cmp	r3, #0
 800226c:	d006      	beq.n	800227c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002278:	2b00      	cmp	r3, #0
 800227a:	d119      	bne.n	80022b0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	685a      	ldr	r2, [r3, #4]
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f022 0220 	bic.w	r2, r2, #32
 800228a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002290:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d105      	bne.n	80022b0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a8:	f043 0201 	orr.w	r2, r3, #1
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80022b0:	68f8      	ldr	r0, [r7, #12]
 80022b2:	f7fe fe91 	bl	8000fd8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80022b6:	e00e      	b.n	80022d6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022bc:	f003 0310 	and.w	r3, r3, #16
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d003      	beq.n	80022cc <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80022c4:	68f8      	ldr	r0, [r7, #12]
 80022c6:	f7ff fd53 	bl	8001d70 <HAL_ADC_ErrorCallback>
}
 80022ca:	e004      	b.n	80022d6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	4798      	blx	r3
}
 80022d6:	bf00      	nop
 80022d8:	3710      	adds	r7, #16
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}

080022de <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80022de:	b580      	push	{r7, lr}
 80022e0:	b084      	sub	sp, #16
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022ea:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80022ec:	68f8      	ldr	r0, [r7, #12]
 80022ee:	f7fe fe69 	bl	8000fc4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80022f2:	bf00      	nop
 80022f4:	3710      	adds	r7, #16
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}

080022fa <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80022fa:	b580      	push	{r7, lr}
 80022fc:	b084      	sub	sp, #16
 80022fe:	af00      	add	r7, sp, #0
 8002300:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002306:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2240      	movs	r2, #64	; 0x40
 800230c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002312:	f043 0204 	orr.w	r2, r3, #4
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800231a:	68f8      	ldr	r0, [r7, #12]
 800231c:	f7ff fd28 	bl	8001d70 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002320:	bf00      	nop
 8002322:	3710      	adds	r7, #16
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}

08002328 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002328:	b480      	push	{r7}
 800232a:	b085      	sub	sp, #20
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	f003 0307 	and.w	r3, r3, #7
 8002336:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002338:	4b0b      	ldr	r3, [pc, #44]	; (8002368 <__NVIC_SetPriorityGrouping+0x40>)
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800233e:	68ba      	ldr	r2, [r7, #8]
 8002340:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002344:	4013      	ands	r3, r2
 8002346:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002350:	4b06      	ldr	r3, [pc, #24]	; (800236c <__NVIC_SetPriorityGrouping+0x44>)
 8002352:	4313      	orrs	r3, r2
 8002354:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002356:	4a04      	ldr	r2, [pc, #16]	; (8002368 <__NVIC_SetPriorityGrouping+0x40>)
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	60d3      	str	r3, [r2, #12]
}
 800235c:	bf00      	nop
 800235e:	3714      	adds	r7, #20
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr
 8002368:	e000ed00 	.word	0xe000ed00
 800236c:	05fa0000 	.word	0x05fa0000

08002370 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002370:	b480      	push	{r7}
 8002372:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002374:	4b04      	ldr	r3, [pc, #16]	; (8002388 <__NVIC_GetPriorityGrouping+0x18>)
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	0a1b      	lsrs	r3, r3, #8
 800237a:	f003 0307 	and.w	r3, r3, #7
}
 800237e:	4618      	mov	r0, r3
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr
 8002388:	e000ed00 	.word	0xe000ed00

0800238c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800238c:	b480      	push	{r7}
 800238e:	b083      	sub	sp, #12
 8002390:	af00      	add	r7, sp, #0
 8002392:	4603      	mov	r3, r0
 8002394:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800239a:	2b00      	cmp	r3, #0
 800239c:	db0b      	blt.n	80023b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800239e:	79fb      	ldrb	r3, [r7, #7]
 80023a0:	f003 021f 	and.w	r2, r3, #31
 80023a4:	4907      	ldr	r1, [pc, #28]	; (80023c4 <__NVIC_EnableIRQ+0x38>)
 80023a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023aa:	095b      	lsrs	r3, r3, #5
 80023ac:	2001      	movs	r0, #1
 80023ae:	fa00 f202 	lsl.w	r2, r0, r2
 80023b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023b6:	bf00      	nop
 80023b8:	370c      	adds	r7, #12
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr
 80023c2:	bf00      	nop
 80023c4:	e000e100 	.word	0xe000e100

080023c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	4603      	mov	r3, r0
 80023d0:	6039      	str	r1, [r7, #0]
 80023d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	db0a      	blt.n	80023f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	b2da      	uxtb	r2, r3
 80023e0:	490c      	ldr	r1, [pc, #48]	; (8002414 <__NVIC_SetPriority+0x4c>)
 80023e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023e6:	0112      	lsls	r2, r2, #4
 80023e8:	b2d2      	uxtb	r2, r2
 80023ea:	440b      	add	r3, r1
 80023ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023f0:	e00a      	b.n	8002408 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	b2da      	uxtb	r2, r3
 80023f6:	4908      	ldr	r1, [pc, #32]	; (8002418 <__NVIC_SetPriority+0x50>)
 80023f8:	79fb      	ldrb	r3, [r7, #7]
 80023fa:	f003 030f 	and.w	r3, r3, #15
 80023fe:	3b04      	subs	r3, #4
 8002400:	0112      	lsls	r2, r2, #4
 8002402:	b2d2      	uxtb	r2, r2
 8002404:	440b      	add	r3, r1
 8002406:	761a      	strb	r2, [r3, #24]
}
 8002408:	bf00      	nop
 800240a:	370c      	adds	r7, #12
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr
 8002414:	e000e100 	.word	0xe000e100
 8002418:	e000ed00 	.word	0xe000ed00

0800241c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800241c:	b480      	push	{r7}
 800241e:	b089      	sub	sp, #36	; 0x24
 8002420:	af00      	add	r7, sp, #0
 8002422:	60f8      	str	r0, [r7, #12]
 8002424:	60b9      	str	r1, [r7, #8]
 8002426:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	f003 0307 	and.w	r3, r3, #7
 800242e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	f1c3 0307 	rsb	r3, r3, #7
 8002436:	2b04      	cmp	r3, #4
 8002438:	bf28      	it	cs
 800243a:	2304      	movcs	r3, #4
 800243c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800243e:	69fb      	ldr	r3, [r7, #28]
 8002440:	3304      	adds	r3, #4
 8002442:	2b06      	cmp	r3, #6
 8002444:	d902      	bls.n	800244c <NVIC_EncodePriority+0x30>
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	3b03      	subs	r3, #3
 800244a:	e000      	b.n	800244e <NVIC_EncodePriority+0x32>
 800244c:	2300      	movs	r3, #0
 800244e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002450:	f04f 32ff 	mov.w	r2, #4294967295
 8002454:	69bb      	ldr	r3, [r7, #24]
 8002456:	fa02 f303 	lsl.w	r3, r2, r3
 800245a:	43da      	mvns	r2, r3
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	401a      	ands	r2, r3
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002464:	f04f 31ff 	mov.w	r1, #4294967295
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	fa01 f303 	lsl.w	r3, r1, r3
 800246e:	43d9      	mvns	r1, r3
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002474:	4313      	orrs	r3, r2
         );
}
 8002476:	4618      	mov	r0, r3
 8002478:	3724      	adds	r7, #36	; 0x24
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr
	...

08002484 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	3b01      	subs	r3, #1
 8002490:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002494:	d301      	bcc.n	800249a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002496:	2301      	movs	r3, #1
 8002498:	e00f      	b.n	80024ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800249a:	4a0a      	ldr	r2, [pc, #40]	; (80024c4 <SysTick_Config+0x40>)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	3b01      	subs	r3, #1
 80024a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024a2:	210f      	movs	r1, #15
 80024a4:	f04f 30ff 	mov.w	r0, #4294967295
 80024a8:	f7ff ff8e 	bl	80023c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024ac:	4b05      	ldr	r3, [pc, #20]	; (80024c4 <SysTick_Config+0x40>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024b2:	4b04      	ldr	r3, [pc, #16]	; (80024c4 <SysTick_Config+0x40>)
 80024b4:	2207      	movs	r2, #7
 80024b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024b8:	2300      	movs	r3, #0
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3708      	adds	r7, #8
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	e000e010 	.word	0xe000e010

080024c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024d0:	6878      	ldr	r0, [r7, #4]
 80024d2:	f7ff ff29 	bl	8002328 <__NVIC_SetPriorityGrouping>
}
 80024d6:	bf00      	nop
 80024d8:	3708      	adds	r7, #8
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}

080024de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024de:	b580      	push	{r7, lr}
 80024e0:	b086      	sub	sp, #24
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	4603      	mov	r3, r0
 80024e6:	60b9      	str	r1, [r7, #8]
 80024e8:	607a      	str	r2, [r7, #4]
 80024ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80024ec:	2300      	movs	r3, #0
 80024ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024f0:	f7ff ff3e 	bl	8002370 <__NVIC_GetPriorityGrouping>
 80024f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024f6:	687a      	ldr	r2, [r7, #4]
 80024f8:	68b9      	ldr	r1, [r7, #8]
 80024fa:	6978      	ldr	r0, [r7, #20]
 80024fc:	f7ff ff8e 	bl	800241c <NVIC_EncodePriority>
 8002500:	4602      	mov	r2, r0
 8002502:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002506:	4611      	mov	r1, r2
 8002508:	4618      	mov	r0, r3
 800250a:	f7ff ff5d 	bl	80023c8 <__NVIC_SetPriority>
}
 800250e:	bf00      	nop
 8002510:	3718      	adds	r7, #24
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}

08002516 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002516:	b580      	push	{r7, lr}
 8002518:	b082      	sub	sp, #8
 800251a:	af00      	add	r7, sp, #0
 800251c:	4603      	mov	r3, r0
 800251e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002520:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002524:	4618      	mov	r0, r3
 8002526:	f7ff ff31 	bl	800238c <__NVIC_EnableIRQ>
}
 800252a:	bf00      	nop
 800252c:	3708      	adds	r7, #8
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}

08002532 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002532:	b580      	push	{r7, lr}
 8002534:	b082      	sub	sp, #8
 8002536:	af00      	add	r7, sp, #0
 8002538:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f7ff ffa2 	bl	8002484 <SysTick_Config>
 8002540:	4603      	mov	r3, r0
}
 8002542:	4618      	mov	r0, r3
 8002544:	3708      	adds	r7, #8
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
	...

0800254c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b086      	sub	sp, #24
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002554:	2300      	movs	r3, #0
 8002556:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002558:	f7ff fa42 	bl	80019e0 <HAL_GetTick>
 800255c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d101      	bne.n	8002568 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	e099      	b.n	800269c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2202      	movs	r2, #2
 800256c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2200      	movs	r2, #0
 8002574:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f022 0201 	bic.w	r2, r2, #1
 8002586:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002588:	e00f      	b.n	80025aa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800258a:	f7ff fa29 	bl	80019e0 <HAL_GetTick>
 800258e:	4602      	mov	r2, r0
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	1ad3      	subs	r3, r2, r3
 8002594:	2b05      	cmp	r3, #5
 8002596:	d908      	bls.n	80025aa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2220      	movs	r2, #32
 800259c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2203      	movs	r2, #3
 80025a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80025a6:	2303      	movs	r3, #3
 80025a8:	e078      	b.n	800269c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0301 	and.w	r3, r3, #1
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d1e8      	bne.n	800258a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80025c0:	697a      	ldr	r2, [r7, #20]
 80025c2:	4b38      	ldr	r3, [pc, #224]	; (80026a4 <HAL_DMA_Init+0x158>)
 80025c4:	4013      	ands	r3, r2
 80025c6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	685a      	ldr	r2, [r3, #4]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	691b      	ldr	r3, [r3, #16]
 80025dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	699b      	ldr	r3, [r3, #24]
 80025e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6a1b      	ldr	r3, [r3, #32]
 80025f4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025f6:	697a      	ldr	r2, [r7, #20]
 80025f8:	4313      	orrs	r3, r2
 80025fa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002600:	2b04      	cmp	r3, #4
 8002602:	d107      	bne.n	8002614 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260c:	4313      	orrs	r3, r2
 800260e:	697a      	ldr	r2, [r7, #20]
 8002610:	4313      	orrs	r3, r2
 8002612:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	697a      	ldr	r2, [r7, #20]
 800261a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	695b      	ldr	r3, [r3, #20]
 8002622:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	f023 0307 	bic.w	r3, r3, #7
 800262a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002630:	697a      	ldr	r2, [r7, #20]
 8002632:	4313      	orrs	r3, r2
 8002634:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263a:	2b04      	cmp	r3, #4
 800263c:	d117      	bne.n	800266e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002642:	697a      	ldr	r2, [r7, #20]
 8002644:	4313      	orrs	r3, r2
 8002646:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800264c:	2b00      	cmp	r3, #0
 800264e:	d00e      	beq.n	800266e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	f000 fb17 	bl	8002c84 <DMA_CheckFifoParam>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d008      	beq.n	800266e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2240      	movs	r2, #64	; 0x40
 8002660:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2201      	movs	r2, #1
 8002666:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800266a:	2301      	movs	r3, #1
 800266c:	e016      	b.n	800269c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	697a      	ldr	r2, [r7, #20]
 8002674:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f000 face 	bl	8002c18 <DMA_CalcBaseAndBitshift>
 800267c:	4603      	mov	r3, r0
 800267e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002684:	223f      	movs	r2, #63	; 0x3f
 8002686:	409a      	lsls	r2, r3
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2200      	movs	r2, #0
 8002690:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2201      	movs	r2, #1
 8002696:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800269a:	2300      	movs	r3, #0
}
 800269c:	4618      	mov	r0, r3
 800269e:	3718      	adds	r7, #24
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	e010803f 	.word	0xe010803f

080026a8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b086      	sub	sp, #24
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	60f8      	str	r0, [r7, #12]
 80026b0:	60b9      	str	r1, [r7, #8]
 80026b2:	607a      	str	r2, [r7, #4]
 80026b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026b6:	2300      	movs	r3, #0
 80026b8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026be:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d101      	bne.n	80026ce <HAL_DMA_Start_IT+0x26>
 80026ca:	2302      	movs	r3, #2
 80026cc:	e048      	b.n	8002760 <HAL_DMA_Start_IT+0xb8>
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2201      	movs	r2, #1
 80026d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d137      	bne.n	8002752 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	2202      	movs	r2, #2
 80026e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2200      	movs	r2, #0
 80026ee:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	687a      	ldr	r2, [r7, #4]
 80026f4:	68b9      	ldr	r1, [r7, #8]
 80026f6:	68f8      	ldr	r0, [r7, #12]
 80026f8:	f000 fa60 	bl	8002bbc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002700:	223f      	movs	r2, #63	; 0x3f
 8002702:	409a      	lsls	r2, r3
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f042 0216 	orr.w	r2, r2, #22
 8002716:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	695a      	ldr	r2, [r3, #20]
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002726:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272c:	2b00      	cmp	r3, #0
 800272e:	d007      	beq.n	8002740 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f042 0208 	orr.w	r2, r2, #8
 800273e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f042 0201 	orr.w	r2, r2, #1
 800274e:	601a      	str	r2, [r3, #0]
 8002750:	e005      	b.n	800275e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2200      	movs	r2, #0
 8002756:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800275a:	2302      	movs	r3, #2
 800275c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800275e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002760:	4618      	mov	r0, r3
 8002762:	3718      	adds	r7, #24
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}

08002768 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b084      	sub	sp, #16
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002774:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002776:	f7ff f933 	bl	80019e0 <HAL_GetTick>
 800277a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002782:	b2db      	uxtb	r3, r3
 8002784:	2b02      	cmp	r3, #2
 8002786:	d008      	beq.n	800279a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2280      	movs	r2, #128	; 0x80
 800278c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2200      	movs	r2, #0
 8002792:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e052      	b.n	8002840 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f022 0216 	bic.w	r2, r2, #22
 80027a8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	695a      	ldr	r2, [r3, #20]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80027b8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d103      	bne.n	80027ca <HAL_DMA_Abort+0x62>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d007      	beq.n	80027da <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f022 0208 	bic.w	r2, r2, #8
 80027d8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f022 0201 	bic.w	r2, r2, #1
 80027e8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027ea:	e013      	b.n	8002814 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80027ec:	f7ff f8f8 	bl	80019e0 <HAL_GetTick>
 80027f0:	4602      	mov	r2, r0
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	2b05      	cmp	r3, #5
 80027f8:	d90c      	bls.n	8002814 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2220      	movs	r2, #32
 80027fe:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2203      	movs	r2, #3
 8002804:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2200      	movs	r2, #0
 800280c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002810:	2303      	movs	r3, #3
 8002812:	e015      	b.n	8002840 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0301 	and.w	r3, r3, #1
 800281e:	2b00      	cmp	r3, #0
 8002820:	d1e4      	bne.n	80027ec <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002826:	223f      	movs	r2, #63	; 0x3f
 8002828:	409a      	lsls	r2, r3
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2201      	movs	r2, #1
 8002832:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2200      	movs	r2, #0
 800283a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 800283e:	2300      	movs	r3, #0
}
 8002840:	4618      	mov	r0, r3
 8002842:	3710      	adds	r7, #16
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}

08002848 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002848:	b480      	push	{r7}
 800284a:	b083      	sub	sp, #12
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002856:	b2db      	uxtb	r3, r3
 8002858:	2b02      	cmp	r3, #2
 800285a:	d004      	beq.n	8002866 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2280      	movs	r2, #128	; 0x80
 8002860:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e00c      	b.n	8002880 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2205      	movs	r2, #5
 800286a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f022 0201 	bic.w	r2, r2, #1
 800287c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800287e:	2300      	movs	r3, #0
}
 8002880:	4618      	mov	r0, r3
 8002882:	370c      	adds	r7, #12
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr

0800288c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b086      	sub	sp, #24
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002894:	2300      	movs	r3, #0
 8002896:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002898:	4b8e      	ldr	r3, [pc, #568]	; (8002ad4 <HAL_DMA_IRQHandler+0x248>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a8e      	ldr	r2, [pc, #568]	; (8002ad8 <HAL_DMA_IRQHandler+0x24c>)
 800289e:	fba2 2303 	umull	r2, r3, r2, r3
 80028a2:	0a9b      	lsrs	r3, r3, #10
 80028a4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028aa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028b6:	2208      	movs	r2, #8
 80028b8:	409a      	lsls	r2, r3
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	4013      	ands	r3, r2
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d01a      	beq.n	80028f8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 0304 	and.w	r3, r3, #4
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d013      	beq.n	80028f8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f022 0204 	bic.w	r2, r2, #4
 80028de:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028e4:	2208      	movs	r2, #8
 80028e6:	409a      	lsls	r2, r3
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028f0:	f043 0201 	orr.w	r2, r3, #1
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028fc:	2201      	movs	r2, #1
 80028fe:	409a      	lsls	r2, r3
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	4013      	ands	r3, r2
 8002904:	2b00      	cmp	r3, #0
 8002906:	d012      	beq.n	800292e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	695b      	ldr	r3, [r3, #20]
 800290e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002912:	2b00      	cmp	r3, #0
 8002914:	d00b      	beq.n	800292e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800291a:	2201      	movs	r2, #1
 800291c:	409a      	lsls	r2, r3
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002926:	f043 0202 	orr.w	r2, r3, #2
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002932:	2204      	movs	r2, #4
 8002934:	409a      	lsls	r2, r3
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	4013      	ands	r3, r2
 800293a:	2b00      	cmp	r3, #0
 800293c:	d012      	beq.n	8002964 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f003 0302 	and.w	r3, r3, #2
 8002948:	2b00      	cmp	r3, #0
 800294a:	d00b      	beq.n	8002964 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002950:	2204      	movs	r2, #4
 8002952:	409a      	lsls	r2, r3
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800295c:	f043 0204 	orr.w	r2, r3, #4
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002968:	2210      	movs	r2, #16
 800296a:	409a      	lsls	r2, r3
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	4013      	ands	r3, r2
 8002970:	2b00      	cmp	r3, #0
 8002972:	d043      	beq.n	80029fc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 0308 	and.w	r3, r3, #8
 800297e:	2b00      	cmp	r3, #0
 8002980:	d03c      	beq.n	80029fc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002986:	2210      	movs	r2, #16
 8002988:	409a      	lsls	r2, r3
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002998:	2b00      	cmp	r3, #0
 800299a:	d018      	beq.n	80029ce <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d108      	bne.n	80029bc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d024      	beq.n	80029fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	4798      	blx	r3
 80029ba:	e01f      	b.n	80029fc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d01b      	beq.n	80029fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	4798      	blx	r3
 80029cc:	e016      	b.n	80029fc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d107      	bne.n	80029ec <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f022 0208 	bic.w	r2, r2, #8
 80029ea:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d003      	beq.n	80029fc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f8:	6878      	ldr	r0, [r7, #4]
 80029fa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a00:	2220      	movs	r2, #32
 8002a02:	409a      	lsls	r2, r3
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	4013      	ands	r3, r2
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	f000 808f 	beq.w	8002b2c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 0310 	and.w	r3, r3, #16
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	f000 8087 	beq.w	8002b2c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a22:	2220      	movs	r2, #32
 8002a24:	409a      	lsls	r2, r3
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	2b05      	cmp	r3, #5
 8002a34:	d136      	bne.n	8002aa4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f022 0216 	bic.w	r2, r2, #22
 8002a44:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	695a      	ldr	r2, [r3, #20]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a54:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d103      	bne.n	8002a66 <HAL_DMA_IRQHandler+0x1da>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d007      	beq.n	8002a76 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f022 0208 	bic.w	r2, r2, #8
 8002a74:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a7a:	223f      	movs	r2, #63	; 0x3f
 8002a7c:	409a      	lsls	r2, r3
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2201      	movs	r2, #1
 8002a86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d07e      	beq.n	8002b98 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	4798      	blx	r3
        }
        return;
 8002aa2:	e079      	b.n	8002b98 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d01d      	beq.n	8002aee <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d10d      	bne.n	8002adc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d031      	beq.n	8002b2c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002acc:	6878      	ldr	r0, [r7, #4]
 8002ace:	4798      	blx	r3
 8002ad0:	e02c      	b.n	8002b2c <HAL_DMA_IRQHandler+0x2a0>
 8002ad2:	bf00      	nop
 8002ad4:	20000000 	.word	0x20000000
 8002ad8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d023      	beq.n	8002b2c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	4798      	blx	r3
 8002aec:	e01e      	b.n	8002b2c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d10f      	bne.n	8002b1c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f022 0210 	bic.w	r2, r2, #16
 8002b0a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2200      	movs	r2, #0
 8002b18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d003      	beq.n	8002b2c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d032      	beq.n	8002b9a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b38:	f003 0301 	and.w	r3, r3, #1
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d022      	beq.n	8002b86 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2205      	movs	r2, #5
 8002b44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f022 0201 	bic.w	r2, r2, #1
 8002b56:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	3301      	adds	r3, #1
 8002b5c:	60bb      	str	r3, [r7, #8]
 8002b5e:	697a      	ldr	r2, [r7, #20]
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d307      	bcc.n	8002b74 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0301 	and.w	r3, r3, #1
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d1f2      	bne.n	8002b58 <HAL_DMA_IRQHandler+0x2cc>
 8002b72:	e000      	b.n	8002b76 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002b74:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2201      	movs	r2, #1
 8002b7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2200      	movs	r2, #0
 8002b82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d005      	beq.n	8002b9a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	4798      	blx	r3
 8002b96:	e000      	b.n	8002b9a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002b98:	bf00      	nop
    }
  }
}
 8002b9a:	3718      	adds	r7, #24
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}

08002ba0 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b083      	sub	sp, #12
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002bae:	b2db      	uxtb	r3, r3
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	370c      	adds	r7, #12
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr

08002bbc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b085      	sub	sp, #20
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	60f8      	str	r0, [r7, #12]
 8002bc4:	60b9      	str	r1, [r7, #8]
 8002bc6:	607a      	str	r2, [r7, #4]
 8002bc8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002bd8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	683a      	ldr	r2, [r7, #0]
 8002be0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	2b40      	cmp	r3, #64	; 0x40
 8002be8:	d108      	bne.n	8002bfc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	687a      	ldr	r2, [r7, #4]
 8002bf0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	68ba      	ldr	r2, [r7, #8]
 8002bf8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002bfa:	e007      	b.n	8002c0c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	68ba      	ldr	r2, [r7, #8]
 8002c02:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	687a      	ldr	r2, [r7, #4]
 8002c0a:	60da      	str	r2, [r3, #12]
}
 8002c0c:	bf00      	nop
 8002c0e:	3714      	adds	r7, #20
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr

08002c18 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b085      	sub	sp, #20
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	3b10      	subs	r3, #16
 8002c28:	4a13      	ldr	r2, [pc, #76]	; (8002c78 <DMA_CalcBaseAndBitshift+0x60>)
 8002c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c2e:	091b      	lsrs	r3, r3, #4
 8002c30:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002c32:	4a12      	ldr	r2, [pc, #72]	; (8002c7c <DMA_CalcBaseAndBitshift+0x64>)
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	4413      	add	r3, r2
 8002c38:	781b      	ldrb	r3, [r3, #0]
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2b03      	cmp	r3, #3
 8002c44:	d908      	bls.n	8002c58 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	4b0c      	ldr	r3, [pc, #48]	; (8002c80 <DMA_CalcBaseAndBitshift+0x68>)
 8002c4e:	4013      	ands	r3, r2
 8002c50:	1d1a      	adds	r2, r3, #4
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	659a      	str	r2, [r3, #88]	; 0x58
 8002c56:	e006      	b.n	8002c66 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	4b08      	ldr	r3, [pc, #32]	; (8002c80 <DMA_CalcBaseAndBitshift+0x68>)
 8002c60:	4013      	ands	r3, r2
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3714      	adds	r7, #20
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr
 8002c76:	bf00      	nop
 8002c78:	aaaaaaab 	.word	0xaaaaaaab
 8002c7c:	08006eb0 	.word	0x08006eb0
 8002c80:	fffffc00 	.word	0xfffffc00

08002c84 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b085      	sub	sp, #20
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c94:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	699b      	ldr	r3, [r3, #24]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d11f      	bne.n	8002cde <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	2b03      	cmp	r3, #3
 8002ca2:	d856      	bhi.n	8002d52 <DMA_CheckFifoParam+0xce>
 8002ca4:	a201      	add	r2, pc, #4	; (adr r2, 8002cac <DMA_CheckFifoParam+0x28>)
 8002ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002caa:	bf00      	nop
 8002cac:	08002cbd 	.word	0x08002cbd
 8002cb0:	08002ccf 	.word	0x08002ccf
 8002cb4:	08002cbd 	.word	0x08002cbd
 8002cb8:	08002d53 	.word	0x08002d53
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d046      	beq.n	8002d56 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ccc:	e043      	b.n	8002d56 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002cd6:	d140      	bne.n	8002d5a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cdc:	e03d      	b.n	8002d5a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	699b      	ldr	r3, [r3, #24]
 8002ce2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ce6:	d121      	bne.n	8002d2c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	2b03      	cmp	r3, #3
 8002cec:	d837      	bhi.n	8002d5e <DMA_CheckFifoParam+0xda>
 8002cee:	a201      	add	r2, pc, #4	; (adr r2, 8002cf4 <DMA_CheckFifoParam+0x70>)
 8002cf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cf4:	08002d05 	.word	0x08002d05
 8002cf8:	08002d0b 	.word	0x08002d0b
 8002cfc:	08002d05 	.word	0x08002d05
 8002d00:	08002d1d 	.word	0x08002d1d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	73fb      	strb	r3, [r7, #15]
      break;
 8002d08:	e030      	b.n	8002d6c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d0e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d025      	beq.n	8002d62 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d1a:	e022      	b.n	8002d62 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d20:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002d24:	d11f      	bne.n	8002d66 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002d2a:	e01c      	b.n	8002d66 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	d903      	bls.n	8002d3a <DMA_CheckFifoParam+0xb6>
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	2b03      	cmp	r3, #3
 8002d36:	d003      	beq.n	8002d40 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002d38:	e018      	b.n	8002d6c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	73fb      	strb	r3, [r7, #15]
      break;
 8002d3e:	e015      	b.n	8002d6c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d00e      	beq.n	8002d6a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	73fb      	strb	r3, [r7, #15]
      break;
 8002d50:	e00b      	b.n	8002d6a <DMA_CheckFifoParam+0xe6>
      break;
 8002d52:	bf00      	nop
 8002d54:	e00a      	b.n	8002d6c <DMA_CheckFifoParam+0xe8>
      break;
 8002d56:	bf00      	nop
 8002d58:	e008      	b.n	8002d6c <DMA_CheckFifoParam+0xe8>
      break;
 8002d5a:	bf00      	nop
 8002d5c:	e006      	b.n	8002d6c <DMA_CheckFifoParam+0xe8>
      break;
 8002d5e:	bf00      	nop
 8002d60:	e004      	b.n	8002d6c <DMA_CheckFifoParam+0xe8>
      break;
 8002d62:	bf00      	nop
 8002d64:	e002      	b.n	8002d6c <DMA_CheckFifoParam+0xe8>
      break;   
 8002d66:	bf00      	nop
 8002d68:	e000      	b.n	8002d6c <DMA_CheckFifoParam+0xe8>
      break;
 8002d6a:	bf00      	nop
    }
  } 
  
  return status; 
 8002d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3714      	adds	r7, #20
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr
 8002d7a:	bf00      	nop

08002d7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b089      	sub	sp, #36	; 0x24
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002d86:	2300      	movs	r3, #0
 8002d88:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002d92:	2300      	movs	r3, #0
 8002d94:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002d96:	2300      	movs	r3, #0
 8002d98:	61fb      	str	r3, [r7, #28]
 8002d9a:	e175      	b.n	8003088 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	69fb      	ldr	r3, [r7, #28]
 8002da0:	fa02 f303 	lsl.w	r3, r2, r3
 8002da4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	697a      	ldr	r2, [r7, #20]
 8002dac:	4013      	ands	r3, r2
 8002dae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002db0:	693a      	ldr	r2, [r7, #16]
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	429a      	cmp	r2, r3
 8002db6:	f040 8164 	bne.w	8003082 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	f003 0303 	and.w	r3, r3, #3
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d005      	beq.n	8002dd2 <HAL_GPIO_Init+0x56>
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	f003 0303 	and.w	r3, r3, #3
 8002dce:	2b02      	cmp	r3, #2
 8002dd0:	d130      	bne.n	8002e34 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002dd8:	69fb      	ldr	r3, [r7, #28]
 8002dda:	005b      	lsls	r3, r3, #1
 8002ddc:	2203      	movs	r2, #3
 8002dde:	fa02 f303 	lsl.w	r3, r2, r3
 8002de2:	43db      	mvns	r3, r3
 8002de4:	69ba      	ldr	r2, [r7, #24]
 8002de6:	4013      	ands	r3, r2
 8002de8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	68da      	ldr	r2, [r3, #12]
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	005b      	lsls	r3, r3, #1
 8002df2:	fa02 f303 	lsl.w	r3, r2, r3
 8002df6:	69ba      	ldr	r2, [r7, #24]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	69ba      	ldr	r2, [r7, #24]
 8002e00:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e08:	2201      	movs	r2, #1
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e10:	43db      	mvns	r3, r3
 8002e12:	69ba      	ldr	r2, [r7, #24]
 8002e14:	4013      	ands	r3, r2
 8002e16:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	091b      	lsrs	r3, r3, #4
 8002e1e:	f003 0201 	and.w	r2, r3, #1
 8002e22:	69fb      	ldr	r3, [r7, #28]
 8002e24:	fa02 f303 	lsl.w	r3, r2, r3
 8002e28:	69ba      	ldr	r2, [r7, #24]
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	69ba      	ldr	r2, [r7, #24]
 8002e32:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	f003 0303 	and.w	r3, r3, #3
 8002e3c:	2b03      	cmp	r3, #3
 8002e3e:	d017      	beq.n	8002e70 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	005b      	lsls	r3, r3, #1
 8002e4a:	2203      	movs	r2, #3
 8002e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e50:	43db      	mvns	r3, r3
 8002e52:	69ba      	ldr	r2, [r7, #24]
 8002e54:	4013      	ands	r3, r2
 8002e56:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	689a      	ldr	r2, [r3, #8]
 8002e5c:	69fb      	ldr	r3, [r7, #28]
 8002e5e:	005b      	lsls	r3, r3, #1
 8002e60:	fa02 f303 	lsl.w	r3, r2, r3
 8002e64:	69ba      	ldr	r2, [r7, #24]
 8002e66:	4313      	orrs	r3, r2
 8002e68:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	69ba      	ldr	r2, [r7, #24]
 8002e6e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	f003 0303 	and.w	r3, r3, #3
 8002e78:	2b02      	cmp	r3, #2
 8002e7a:	d123      	bne.n	8002ec4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002e7c:	69fb      	ldr	r3, [r7, #28]
 8002e7e:	08da      	lsrs	r2, r3, #3
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	3208      	adds	r2, #8
 8002e84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002e8a:	69fb      	ldr	r3, [r7, #28]
 8002e8c:	f003 0307 	and.w	r3, r3, #7
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	220f      	movs	r2, #15
 8002e94:	fa02 f303 	lsl.w	r3, r2, r3
 8002e98:	43db      	mvns	r3, r3
 8002e9a:	69ba      	ldr	r2, [r7, #24]
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	691a      	ldr	r2, [r3, #16]
 8002ea4:	69fb      	ldr	r3, [r7, #28]
 8002ea6:	f003 0307 	and.w	r3, r3, #7
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb0:	69ba      	ldr	r2, [r7, #24]
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002eb6:	69fb      	ldr	r3, [r7, #28]
 8002eb8:	08da      	lsrs	r2, r3, #3
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	3208      	adds	r2, #8
 8002ebe:	69b9      	ldr	r1, [r7, #24]
 8002ec0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002eca:	69fb      	ldr	r3, [r7, #28]
 8002ecc:	005b      	lsls	r3, r3, #1
 8002ece:	2203      	movs	r2, #3
 8002ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed4:	43db      	mvns	r3, r3
 8002ed6:	69ba      	ldr	r2, [r7, #24]
 8002ed8:	4013      	ands	r3, r2
 8002eda:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	f003 0203 	and.w	r2, r3, #3
 8002ee4:	69fb      	ldr	r3, [r7, #28]
 8002ee6:	005b      	lsls	r3, r3, #1
 8002ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8002eec:	69ba      	ldr	r2, [r7, #24]
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	69ba      	ldr	r2, [r7, #24]
 8002ef6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	f000 80be 	beq.w	8003082 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f06:	4b66      	ldr	r3, [pc, #408]	; (80030a0 <HAL_GPIO_Init+0x324>)
 8002f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f0a:	4a65      	ldr	r2, [pc, #404]	; (80030a0 <HAL_GPIO_Init+0x324>)
 8002f0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f10:	6453      	str	r3, [r2, #68]	; 0x44
 8002f12:	4b63      	ldr	r3, [pc, #396]	; (80030a0 <HAL_GPIO_Init+0x324>)
 8002f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f1a:	60fb      	str	r3, [r7, #12]
 8002f1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002f1e:	4a61      	ldr	r2, [pc, #388]	; (80030a4 <HAL_GPIO_Init+0x328>)
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	089b      	lsrs	r3, r3, #2
 8002f24:	3302      	adds	r3, #2
 8002f26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002f2c:	69fb      	ldr	r3, [r7, #28]
 8002f2e:	f003 0303 	and.w	r3, r3, #3
 8002f32:	009b      	lsls	r3, r3, #2
 8002f34:	220f      	movs	r2, #15
 8002f36:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3a:	43db      	mvns	r3, r3
 8002f3c:	69ba      	ldr	r2, [r7, #24]
 8002f3e:	4013      	ands	r3, r2
 8002f40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	4a58      	ldr	r2, [pc, #352]	; (80030a8 <HAL_GPIO_Init+0x32c>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d037      	beq.n	8002fba <HAL_GPIO_Init+0x23e>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	4a57      	ldr	r2, [pc, #348]	; (80030ac <HAL_GPIO_Init+0x330>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d031      	beq.n	8002fb6 <HAL_GPIO_Init+0x23a>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	4a56      	ldr	r2, [pc, #344]	; (80030b0 <HAL_GPIO_Init+0x334>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d02b      	beq.n	8002fb2 <HAL_GPIO_Init+0x236>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	4a55      	ldr	r2, [pc, #340]	; (80030b4 <HAL_GPIO_Init+0x338>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d025      	beq.n	8002fae <HAL_GPIO_Init+0x232>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	4a54      	ldr	r2, [pc, #336]	; (80030b8 <HAL_GPIO_Init+0x33c>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d01f      	beq.n	8002faa <HAL_GPIO_Init+0x22e>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	4a53      	ldr	r2, [pc, #332]	; (80030bc <HAL_GPIO_Init+0x340>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d019      	beq.n	8002fa6 <HAL_GPIO_Init+0x22a>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	4a52      	ldr	r2, [pc, #328]	; (80030c0 <HAL_GPIO_Init+0x344>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d013      	beq.n	8002fa2 <HAL_GPIO_Init+0x226>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	4a51      	ldr	r2, [pc, #324]	; (80030c4 <HAL_GPIO_Init+0x348>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d00d      	beq.n	8002f9e <HAL_GPIO_Init+0x222>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	4a50      	ldr	r2, [pc, #320]	; (80030c8 <HAL_GPIO_Init+0x34c>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d007      	beq.n	8002f9a <HAL_GPIO_Init+0x21e>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	4a4f      	ldr	r2, [pc, #316]	; (80030cc <HAL_GPIO_Init+0x350>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d101      	bne.n	8002f96 <HAL_GPIO_Init+0x21a>
 8002f92:	2309      	movs	r3, #9
 8002f94:	e012      	b.n	8002fbc <HAL_GPIO_Init+0x240>
 8002f96:	230a      	movs	r3, #10
 8002f98:	e010      	b.n	8002fbc <HAL_GPIO_Init+0x240>
 8002f9a:	2308      	movs	r3, #8
 8002f9c:	e00e      	b.n	8002fbc <HAL_GPIO_Init+0x240>
 8002f9e:	2307      	movs	r3, #7
 8002fa0:	e00c      	b.n	8002fbc <HAL_GPIO_Init+0x240>
 8002fa2:	2306      	movs	r3, #6
 8002fa4:	e00a      	b.n	8002fbc <HAL_GPIO_Init+0x240>
 8002fa6:	2305      	movs	r3, #5
 8002fa8:	e008      	b.n	8002fbc <HAL_GPIO_Init+0x240>
 8002faa:	2304      	movs	r3, #4
 8002fac:	e006      	b.n	8002fbc <HAL_GPIO_Init+0x240>
 8002fae:	2303      	movs	r3, #3
 8002fb0:	e004      	b.n	8002fbc <HAL_GPIO_Init+0x240>
 8002fb2:	2302      	movs	r3, #2
 8002fb4:	e002      	b.n	8002fbc <HAL_GPIO_Init+0x240>
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e000      	b.n	8002fbc <HAL_GPIO_Init+0x240>
 8002fba:	2300      	movs	r3, #0
 8002fbc:	69fa      	ldr	r2, [r7, #28]
 8002fbe:	f002 0203 	and.w	r2, r2, #3
 8002fc2:	0092      	lsls	r2, r2, #2
 8002fc4:	4093      	lsls	r3, r2
 8002fc6:	69ba      	ldr	r2, [r7, #24]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002fcc:	4935      	ldr	r1, [pc, #212]	; (80030a4 <HAL_GPIO_Init+0x328>)
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	089b      	lsrs	r3, r3, #2
 8002fd2:	3302      	adds	r3, #2
 8002fd4:	69ba      	ldr	r2, [r7, #24]
 8002fd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002fda:	4b3d      	ldr	r3, [pc, #244]	; (80030d0 <HAL_GPIO_Init+0x354>)
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	43db      	mvns	r3, r3
 8002fe4:	69ba      	ldr	r2, [r7, #24]
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d003      	beq.n	8002ffe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002ff6:	69ba      	ldr	r2, [r7, #24]
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ffe:	4a34      	ldr	r2, [pc, #208]	; (80030d0 <HAL_GPIO_Init+0x354>)
 8003000:	69bb      	ldr	r3, [r7, #24]
 8003002:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003004:	4b32      	ldr	r3, [pc, #200]	; (80030d0 <HAL_GPIO_Init+0x354>)
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	43db      	mvns	r3, r3
 800300e:	69ba      	ldr	r2, [r7, #24]
 8003010:	4013      	ands	r3, r2
 8003012:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800301c:	2b00      	cmp	r3, #0
 800301e:	d003      	beq.n	8003028 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003020:	69ba      	ldr	r2, [r7, #24]
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	4313      	orrs	r3, r2
 8003026:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003028:	4a29      	ldr	r2, [pc, #164]	; (80030d0 <HAL_GPIO_Init+0x354>)
 800302a:	69bb      	ldr	r3, [r7, #24]
 800302c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800302e:	4b28      	ldr	r3, [pc, #160]	; (80030d0 <HAL_GPIO_Init+0x354>)
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	43db      	mvns	r3, r3
 8003038:	69ba      	ldr	r2, [r7, #24]
 800303a:	4013      	ands	r3, r2
 800303c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003046:	2b00      	cmp	r3, #0
 8003048:	d003      	beq.n	8003052 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800304a:	69ba      	ldr	r2, [r7, #24]
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	4313      	orrs	r3, r2
 8003050:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003052:	4a1f      	ldr	r2, [pc, #124]	; (80030d0 <HAL_GPIO_Init+0x354>)
 8003054:	69bb      	ldr	r3, [r7, #24]
 8003056:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003058:	4b1d      	ldr	r3, [pc, #116]	; (80030d0 <HAL_GPIO_Init+0x354>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	43db      	mvns	r3, r3
 8003062:	69ba      	ldr	r2, [r7, #24]
 8003064:	4013      	ands	r3, r2
 8003066:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003070:	2b00      	cmp	r3, #0
 8003072:	d003      	beq.n	800307c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003074:	69ba      	ldr	r2, [r7, #24]
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	4313      	orrs	r3, r2
 800307a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800307c:	4a14      	ldr	r2, [pc, #80]	; (80030d0 <HAL_GPIO_Init+0x354>)
 800307e:	69bb      	ldr	r3, [r7, #24]
 8003080:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	3301      	adds	r3, #1
 8003086:	61fb      	str	r3, [r7, #28]
 8003088:	69fb      	ldr	r3, [r7, #28]
 800308a:	2b0f      	cmp	r3, #15
 800308c:	f67f ae86 	bls.w	8002d9c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003090:	bf00      	nop
 8003092:	bf00      	nop
 8003094:	3724      	adds	r7, #36	; 0x24
 8003096:	46bd      	mov	sp, r7
 8003098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309c:	4770      	bx	lr
 800309e:	bf00      	nop
 80030a0:	40023800 	.word	0x40023800
 80030a4:	40013800 	.word	0x40013800
 80030a8:	40020000 	.word	0x40020000
 80030ac:	40020400 	.word	0x40020400
 80030b0:	40020800 	.word	0x40020800
 80030b4:	40020c00 	.word	0x40020c00
 80030b8:	40021000 	.word	0x40021000
 80030bc:	40021400 	.word	0x40021400
 80030c0:	40021800 	.word	0x40021800
 80030c4:	40021c00 	.word	0x40021c00
 80030c8:	40022000 	.word	0x40022000
 80030cc:	40022400 	.word	0x40022400
 80030d0:	40013c00 	.word	0x40013c00

080030d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	460b      	mov	r3, r1
 80030de:	807b      	strh	r3, [r7, #2]
 80030e0:	4613      	mov	r3, r2
 80030e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80030e4:	787b      	ldrb	r3, [r7, #1]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d003      	beq.n	80030f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030ea:	887a      	ldrh	r2, [r7, #2]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80030f0:	e003      	b.n	80030fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80030f2:	887b      	ldrh	r3, [r7, #2]
 80030f4:	041a      	lsls	r2, r3, #16
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	619a      	str	r2, [r3, #24]
}
 80030fa:	bf00      	nop
 80030fc:	370c      	adds	r7, #12
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr
	...

08003108 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b082      	sub	sp, #8
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d101      	bne.n	800311a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e07f      	b.n	800321a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003120:	b2db      	uxtb	r3, r3
 8003122:	2b00      	cmp	r3, #0
 8003124:	d106      	bne.n	8003134 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2200      	movs	r2, #0
 800312a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f7fe f9f8 	bl	8001524 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2224      	movs	r2, #36	; 0x24
 8003138:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f022 0201 	bic.w	r2, r2, #1
 800314a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	685a      	ldr	r2, [r3, #4]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003158:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	689a      	ldr	r2, [r3, #8]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003168:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	68db      	ldr	r3, [r3, #12]
 800316e:	2b01      	cmp	r3, #1
 8003170:	d107      	bne.n	8003182 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	689a      	ldr	r2, [r3, #8]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800317e:	609a      	str	r2, [r3, #8]
 8003180:	e006      	b.n	8003190 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	689a      	ldr	r2, [r3, #8]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800318e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	2b02      	cmp	r3, #2
 8003196:	d104      	bne.n	80031a2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80031a0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	6859      	ldr	r1, [r3, #4]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	4b1d      	ldr	r3, [pc, #116]	; (8003224 <HAL_I2C_Init+0x11c>)
 80031ae:	430b      	orrs	r3, r1
 80031b0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	68da      	ldr	r2, [r3, #12]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80031c0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	691a      	ldr	r2, [r3, #16]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	695b      	ldr	r3, [r3, #20]
 80031ca:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	699b      	ldr	r3, [r3, #24]
 80031d2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	430a      	orrs	r2, r1
 80031da:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	69d9      	ldr	r1, [r3, #28]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6a1a      	ldr	r2, [r3, #32]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	430a      	orrs	r2, r1
 80031ea:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f042 0201 	orr.w	r2, r2, #1
 80031fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2200      	movs	r2, #0
 8003200:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2220      	movs	r2, #32
 8003206:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2200      	movs	r2, #0
 800320e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2200      	movs	r2, #0
 8003214:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003218:	2300      	movs	r3, #0
}
 800321a:	4618      	mov	r0, r3
 800321c:	3708      	adds	r7, #8
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	02008000 	.word	0x02008000

08003228 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b084      	sub	sp, #16
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	699b      	ldr	r3, [r3, #24]
 8003236:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003244:	2b00      	cmp	r3, #0
 8003246:	d005      	beq.n	8003254 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800324c:	68ba      	ldr	r2, [r7, #8]
 800324e:	68f9      	ldr	r1, [r7, #12]
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	4798      	blx	r3
  }
}
 8003254:	bf00      	nop
 8003256:	3710      	adds	r7, #16
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}

0800325c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b086      	sub	sp, #24
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	699b      	ldr	r3, [r3, #24]
 800326a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800327a:	2b00      	cmp	r3, #0
 800327c:	d00f      	beq.n	800329e <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003284:	2b00      	cmp	r3, #0
 8003286:	d00a      	beq.n	800329e <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800328c:	f043 0201 	orr.w	r2, r3, #1
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f44f 7280 	mov.w	r2, #256	; 0x100
 800329c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d00f      	beq.n	80032c8 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d00a      	beq.n	80032c8 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032b6:	f043 0208 	orr.w	r2, r3, #8
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80032c6:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d00f      	beq.n	80032f2 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d00a      	beq.n	80032f2 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032e0:	f043 0202 	orr.w	r2, r3, #2
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032f0:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032f6:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	f003 030b 	and.w	r3, r3, #11
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d003      	beq.n	800330a <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8003302:	68f9      	ldr	r1, [r7, #12]
 8003304:	6878      	ldr	r0, [r7, #4]
 8003306:	f000 fb77 	bl	80039f8 <I2C_ITError>
  }
}
 800330a:	bf00      	nop
 800330c:	3718      	adds	r7, #24
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}

08003312 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003312:	b480      	push	{r7}
 8003314:	b083      	sub	sp, #12
 8003316:	af00      	add	r7, sp, #0
 8003318:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800331a:	bf00      	nop
 800331c:	370c      	adds	r7, #12
 800331e:	46bd      	mov	sp, r7
 8003320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003324:	4770      	bx	lr

08003326 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003326:	b480      	push	{r7}
 8003328:	b083      	sub	sp, #12
 800332a:	af00      	add	r7, sp, #0
 800332c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800332e:	bf00      	nop
 8003330:	370c      	adds	r7, #12
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr

0800333a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800333a:	b480      	push	{r7}
 800333c:	b083      	sub	sp, #12
 800333e:	af00      	add	r7, sp, #0
 8003340:	6078      	str	r0, [r7, #4]
 8003342:	460b      	mov	r3, r1
 8003344:	70fb      	strb	r3, [r7, #3]
 8003346:	4613      	mov	r3, r2
 8003348:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800334a:	bf00      	nop
 800334c:	370c      	adds	r7, #12
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr

08003356 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003356:	b480      	push	{r7}
 8003358:	b083      	sub	sp, #12
 800335a:	af00      	add	r7, sp, #0
 800335c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800335e:	bf00      	nop
 8003360:	370c      	adds	r7, #12
 8003362:	46bd      	mov	sp, r7
 8003364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003368:	4770      	bx	lr

0800336a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800336a:	b480      	push	{r7}
 800336c:	b083      	sub	sp, #12
 800336e:	af00      	add	r7, sp, #0
 8003370:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003372:	bf00      	nop
 8003374:	370c      	adds	r7, #12
 8003376:	46bd      	mov	sp, r7
 8003378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337c:	4770      	bx	lr

0800337e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800337e:	b480      	push	{r7}
 8003380:	b083      	sub	sp, #12
 8003382:	af00      	add	r7, sp, #0
 8003384:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003386:	bf00      	nop
 8003388:	370c      	adds	r7, #12
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr

08003392 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8003392:	b580      	push	{r7, lr}
 8003394:	b086      	sub	sp, #24
 8003396:	af00      	add	r7, sp, #0
 8003398:	60f8      	str	r0, [r7, #12]
 800339a:	60b9      	str	r1, [r7, #8]
 800339c:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033a2:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d101      	bne.n	80033b6 <I2C_Slave_ISR_IT+0x24>
 80033b2:	2302      	movs	r3, #2
 80033b4:	e0e1      	b.n	800357a <I2C_Slave_ISR_IT+0x1e8>
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2201      	movs	r2, #1
 80033ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	f003 0320 	and.w	r3, r3, #32
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d008      	beq.n	80033da <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d003      	beq.n	80033da <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80033d2:	6939      	ldr	r1, [r7, #16]
 80033d4:	68f8      	ldr	r0, [r7, #12]
 80033d6:	f000 f9b5 	bl	8003744 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	f003 0310 	and.w	r3, r3, #16
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d04b      	beq.n	800347c <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d046      	beq.n	800347c <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033f2:	b29b      	uxth	r3, r3
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d128      	bne.n	800344a <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	2b28      	cmp	r3, #40	; 0x28
 8003402:	d108      	bne.n	8003416 <I2C_Slave_ISR_IT+0x84>
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800340a:	d104      	bne.n	8003416 <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800340c:	6939      	ldr	r1, [r7, #16]
 800340e:	68f8      	ldr	r0, [r7, #12]
 8003410:	f000 fa9e 	bl	8003950 <I2C_ITListenCplt>
 8003414:	e031      	b.n	800347a <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800341c:	b2db      	uxtb	r3, r3
 800341e:	2b29      	cmp	r3, #41	; 0x29
 8003420:	d10e      	bne.n	8003440 <I2C_Slave_ISR_IT+0xae>
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003428:	d00a      	beq.n	8003440 <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	2210      	movs	r2, #16
 8003430:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003432:	68f8      	ldr	r0, [r7, #12]
 8003434:	f000 fbd7 	bl	8003be6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003438:	68f8      	ldr	r0, [r7, #12]
 800343a:	f000 f926 	bl	800368a <I2C_ITSlaveSeqCplt>
 800343e:	e01c      	b.n	800347a <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	2210      	movs	r2, #16
 8003446:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8003448:	e08f      	b.n	800356a <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	2210      	movs	r2, #16
 8003450:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003456:	f043 0204 	orr.w	r2, r3, #4
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d003      	beq.n	800346c <I2C_Slave_ISR_IT+0xda>
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800346a:	d17e      	bne.n	800356a <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003470:	4619      	mov	r1, r3
 8003472:	68f8      	ldr	r0, [r7, #12]
 8003474:	f000 fac0 	bl	80039f8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003478:	e077      	b.n	800356a <I2C_Slave_ISR_IT+0x1d8>
 800347a:	e076      	b.n	800356a <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	f003 0304 	and.w	r3, r3, #4
 8003482:	2b00      	cmp	r3, #0
 8003484:	d02f      	beq.n	80034e6 <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800348c:	2b00      	cmp	r3, #0
 800348e:	d02a      	beq.n	80034e6 <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003494:	b29b      	uxth	r3, r3
 8003496:	2b00      	cmp	r3, #0
 8003498:	d018      	beq.n	80034cc <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a4:	b2d2      	uxtb	r2, r2
 80034a6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ac:	1c5a      	adds	r2, r3, #1
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034b6:	3b01      	subs	r3, #1
 80034b8:	b29a      	uxth	r2, r3
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034c2:	b29b      	uxth	r3, r3
 80034c4:	3b01      	subs	r3, #1
 80034c6:	b29a      	uxth	r2, r3
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034d0:	b29b      	uxth	r3, r3
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d14b      	bne.n	800356e <I2C_Slave_ISR_IT+0x1dc>
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80034dc:	d047      	beq.n	800356e <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80034de:	68f8      	ldr	r0, [r7, #12]
 80034e0:	f000 f8d3 	bl	800368a <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80034e4:	e043      	b.n	800356e <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	f003 0308 	and.w	r3, r3, #8
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d009      	beq.n	8003504 <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d004      	beq.n	8003504 <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80034fa:	6939      	ldr	r1, [r7, #16]
 80034fc:	68f8      	ldr	r0, [r7, #12]
 80034fe:	f000 f840 	bl	8003582 <I2C_ITAddrCplt>
 8003502:	e035      	b.n	8003570 <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	f003 0302 	and.w	r3, r3, #2
 800350a:	2b00      	cmp	r3, #0
 800350c:	d030      	beq.n	8003570 <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003514:	2b00      	cmp	r3, #0
 8003516:	d02b      	beq.n	8003570 <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800351c:	b29b      	uxth	r3, r3
 800351e:	2b00      	cmp	r3, #0
 8003520:	d018      	beq.n	8003554 <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003526:	781a      	ldrb	r2, [r3, #0]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003532:	1c5a      	adds	r2, r3, #1
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800353c:	b29b      	uxth	r3, r3
 800353e:	3b01      	subs	r3, #1
 8003540:	b29a      	uxth	r2, r3
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800354a:	3b01      	subs	r3, #1
 800354c:	b29a      	uxth	r2, r3
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	851a      	strh	r2, [r3, #40]	; 0x28
 8003552:	e00d      	b.n	8003570 <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800355a:	d002      	beq.n	8003562 <I2C_Slave_ISR_IT+0x1d0>
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d106      	bne.n	8003570 <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003562:	68f8      	ldr	r0, [r7, #12]
 8003564:	f000 f891 	bl	800368a <I2C_ITSlaveSeqCplt>
 8003568:	e002      	b.n	8003570 <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 800356a:	bf00      	nop
 800356c:	e000      	b.n	8003570 <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 800356e:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2200      	movs	r2, #0
 8003574:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003578:	2300      	movs	r3, #0
}
 800357a:	4618      	mov	r0, r3
 800357c:	3718      	adds	r7, #24
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}

08003582 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003582:	b580      	push	{r7, lr}
 8003584:	b084      	sub	sp, #16
 8003586:	af00      	add	r7, sp, #0
 8003588:	6078      	str	r0, [r7, #4]
 800358a:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003592:	b2db      	uxtb	r3, r3
 8003594:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003598:	2b28      	cmp	r3, #40	; 0x28
 800359a:	d16a      	bne.n	8003672 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	699b      	ldr	r3, [r3, #24]
 80035a2:	0c1b      	lsrs	r3, r3, #16
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	f003 0301 	and.w	r3, r3, #1
 80035aa:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	699b      	ldr	r3, [r3, #24]
 80035b2:	0c1b      	lsrs	r3, r3, #16
 80035b4:	b29b      	uxth	r3, r3
 80035b6:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80035ba:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	b29b      	uxth	r3, r3
 80035c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80035c8:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	68db      	ldr	r3, [r3, #12]
 80035d0:	b29b      	uxth	r3, r3
 80035d2:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80035d6:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	68db      	ldr	r3, [r3, #12]
 80035dc:	2b02      	cmp	r3, #2
 80035de:	d138      	bne.n	8003652 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80035e0:	897b      	ldrh	r3, [r7, #10]
 80035e2:	09db      	lsrs	r3, r3, #7
 80035e4:	b29a      	uxth	r2, r3
 80035e6:	89bb      	ldrh	r3, [r7, #12]
 80035e8:	4053      	eors	r3, r2
 80035ea:	b29b      	uxth	r3, r3
 80035ec:	f003 0306 	and.w	r3, r3, #6
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d11c      	bne.n	800362e <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80035f4:	897b      	ldrh	r3, [r7, #10]
 80035f6:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035fc:	1c5a      	adds	r2, r3, #1
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003606:	2b02      	cmp	r3, #2
 8003608:	d13b      	bne.n	8003682 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2200      	movs	r2, #0
 800360e:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	2208      	movs	r2, #8
 8003616:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2200      	movs	r2, #0
 800361c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003620:	89ba      	ldrh	r2, [r7, #12]
 8003622:	7bfb      	ldrb	r3, [r7, #15]
 8003624:	4619      	mov	r1, r3
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f7ff fe87 	bl	800333a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800362c:	e029      	b.n	8003682 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800362e:	893b      	ldrh	r3, [r7, #8]
 8003630:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003632:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f000 fb17 	bl	8003c6a <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2200      	movs	r2, #0
 8003640:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003644:	89ba      	ldrh	r2, [r7, #12]
 8003646:	7bfb      	ldrb	r3, [r7, #15]
 8003648:	4619      	mov	r1, r3
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f7ff fe75 	bl	800333a <HAL_I2C_AddrCallback>
}
 8003650:	e017      	b.n	8003682 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003652:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f000 fb07 	bl	8003c6a <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2200      	movs	r2, #0
 8003660:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003664:	89ba      	ldrh	r2, [r7, #12]
 8003666:	7bfb      	ldrb	r3, [r7, #15]
 8003668:	4619      	mov	r1, r3
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f7ff fe65 	bl	800333a <HAL_I2C_AddrCallback>
}
 8003670:	e007      	b.n	8003682 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	2208      	movs	r2, #8
 8003678:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2200      	movs	r2, #0
 800367e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8003682:	bf00      	nop
 8003684:	3710      	adds	r7, #16
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}

0800368a <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800368a:	b580      	push	{r7, lr}
 800368c:	b084      	sub	sp, #16
 800368e:	af00      	add	r7, sp, #0
 8003690:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2200      	movs	r2, #0
 800369e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d008      	beq.n	80036be <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80036ba:	601a      	str	r2, [r3, #0]
 80036bc:	e00c      	b.n	80036d8 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d007      	beq.n	80036d8 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80036d6:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	2b29      	cmp	r3, #41	; 0x29
 80036e2:	d112      	bne.n	800370a <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2228      	movs	r2, #40	; 0x28
 80036e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2221      	movs	r2, #33	; 0x21
 80036f0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80036f2:	2101      	movs	r1, #1
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	f000 fab8 	bl	8003c6a <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2200      	movs	r2, #0
 80036fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f7ff fe05 	bl	8003312 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003708:	e017      	b.n	800373a <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003710:	b2db      	uxtb	r3, r3
 8003712:	2b2a      	cmp	r3, #42	; 0x2a
 8003714:	d111      	bne.n	800373a <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2228      	movs	r2, #40	; 0x28
 800371a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2222      	movs	r2, #34	; 0x22
 8003722:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003724:	2102      	movs	r1, #2
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f000 fa9f 	bl	8003c6a <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2200      	movs	r2, #0
 8003730:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	f7ff fdf6 	bl	8003326 <HAL_I2C_SlaveRxCpltCallback>
}
 800373a:	bf00      	nop
 800373c:	3710      	adds	r7, #16
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}
	...

08003744 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b086      	sub	sp, #24
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
 800374c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003760:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	2220      	movs	r2, #32
 8003768:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800376a:	7bfb      	ldrb	r3, [r7, #15]
 800376c:	2b21      	cmp	r3, #33	; 0x21
 800376e:	d002      	beq.n	8003776 <I2C_ITSlaveCplt+0x32>
 8003770:	7bfb      	ldrb	r3, [r7, #15]
 8003772:	2b29      	cmp	r3, #41	; 0x29
 8003774:	d108      	bne.n	8003788 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003776:	f248 0101 	movw	r1, #32769	; 0x8001
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f000 fa75 	bl	8003c6a <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2221      	movs	r2, #33	; 0x21
 8003784:	631a      	str	r2, [r3, #48]	; 0x30
 8003786:	e00d      	b.n	80037a4 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003788:	7bfb      	ldrb	r3, [r7, #15]
 800378a:	2b22      	cmp	r3, #34	; 0x22
 800378c:	d002      	beq.n	8003794 <I2C_ITSlaveCplt+0x50>
 800378e:	7bfb      	ldrb	r3, [r7, #15]
 8003790:	2b2a      	cmp	r3, #42	; 0x2a
 8003792:	d107      	bne.n	80037a4 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8003794:	f248 0102 	movw	r1, #32770	; 0x8002
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	f000 fa66 	bl	8003c6a <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2222      	movs	r2, #34	; 0x22
 80037a2:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	685a      	ldr	r2, [r3, #4]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80037b2:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	6859      	ldr	r1, [r3, #4]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	4b62      	ldr	r3, [pc, #392]	; (8003948 <I2C_ITSlaveCplt+0x204>)
 80037c0:	400b      	ands	r3, r1
 80037c2:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80037c4:	6878      	ldr	r0, [r7, #4]
 80037c6:	f000 fa0e 	bl	8003be6 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d013      	beq.n	80037fc <I2C_ITSlaveCplt+0xb8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80037e2:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d01f      	beq.n	800382c <I2C_ITSlaveCplt+0xe8>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	b29a      	uxth	r2, r3
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80037fa:	e017      	b.n	800382c <I2C_ITSlaveCplt+0xe8>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003802:	2b00      	cmp	r3, #0
 8003804:	d012      	beq.n	800382c <I2C_ITSlaveCplt+0xe8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003814:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800381a:	2b00      	cmp	r3, #0
 800381c:	d006      	beq.n	800382c <I2C_ITSlaveCplt+0xe8>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	b29a      	uxth	r2, r3
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	f003 0304 	and.w	r3, r3, #4
 8003832:	2b00      	cmp	r3, #0
 8003834:	d020      	beq.n	8003878 <I2C_ITSlaveCplt+0x134>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	f023 0304 	bic.w	r3, r3, #4
 800383c:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003848:	b2d2      	uxtb	r2, r2
 800384a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003850:	1c5a      	adds	r2, r3, #1
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800385a:	2b00      	cmp	r3, #0
 800385c:	d00c      	beq.n	8003878 <I2C_ITSlaveCplt+0x134>
    {
      hi2c->XferSize--;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003862:	3b01      	subs	r3, #1
 8003864:	b29a      	uxth	r2, r3
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800386e:	b29b      	uxth	r3, r3
 8003870:	3b01      	subs	r3, #1
 8003872:	b29a      	uxth	r2, r3
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800387c:	b29b      	uxth	r3, r3
 800387e:	2b00      	cmp	r3, #0
 8003880:	d005      	beq.n	800388e <I2C_ITSlaveCplt+0x14a>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003886:	f043 0204 	orr.w	r2, r3, #4
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2200      	movs	r2, #0
 8003892:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2200      	movs	r2, #0
 800389a:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d010      	beq.n	80038c6 <I2C_ITSlaveCplt+0x182>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038a8:	4619      	mov	r1, r3
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f000 f8a4 	bl	80039f8 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038b6:	b2db      	uxtb	r3, r3
 80038b8:	2b28      	cmp	r3, #40	; 0x28
 80038ba:	d141      	bne.n	8003940 <I2C_ITSlaveCplt+0x1fc>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80038bc:	6979      	ldr	r1, [r7, #20]
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f000 f846 	bl	8003950 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80038c4:	e03c      	b.n	8003940 <I2C_ITSlaveCplt+0x1fc>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ca:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80038ce:	d014      	beq.n	80038fa <I2C_ITSlaveCplt+0x1b6>
    I2C_ITSlaveSeqCplt(hi2c);
 80038d0:	6878      	ldr	r0, [r7, #4]
 80038d2:	f7ff feda 	bl	800368a <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4a1c      	ldr	r2, [pc, #112]	; (800394c <I2C_ITSlaveCplt+0x208>)
 80038da:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2220      	movs	r2, #32
 80038e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2200      	movs	r2, #0
 80038e8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2200      	movs	r2, #0
 80038ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f7ff fd2f 	bl	8003356 <HAL_I2C_ListenCpltCallback>
}
 80038f8:	e022      	b.n	8003940 <I2C_ITSlaveCplt+0x1fc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003900:	b2db      	uxtb	r3, r3
 8003902:	2b22      	cmp	r3, #34	; 0x22
 8003904:	d10e      	bne.n	8003924 <I2C_ITSlaveCplt+0x1e0>
    hi2c->State = HAL_I2C_STATE_READY;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2220      	movs	r2, #32
 800390a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2200      	movs	r2, #0
 8003912:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2200      	movs	r2, #0
 8003918:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	f7ff fd02 	bl	8003326 <HAL_I2C_SlaveRxCpltCallback>
}
 8003922:	e00d      	b.n	8003940 <I2C_ITSlaveCplt+0x1fc>
    hi2c->State = HAL_I2C_STATE_READY;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2220      	movs	r2, #32
 8003928:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2200      	movs	r2, #0
 8003930:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2200      	movs	r2, #0
 8003936:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f7ff fce9 	bl	8003312 <HAL_I2C_SlaveTxCpltCallback>
}
 8003940:	bf00      	nop
 8003942:	3718      	adds	r7, #24
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}
 8003948:	fe00e800 	.word	0xfe00e800
 800394c:	ffff0000 	.word	0xffff0000

08003950 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b082      	sub	sp, #8
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
 8003958:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	4a25      	ldr	r2, [pc, #148]	; (80039f4 <I2C_ITListenCplt+0xa4>)
 800395e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2200      	movs	r2, #0
 8003964:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2220      	movs	r2, #32
 800396a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2200      	movs	r2, #0
 8003972:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2200      	movs	r2, #0
 800397a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	f003 0304 	and.w	r3, r3, #4
 8003982:	2b00      	cmp	r3, #0
 8003984:	d022      	beq.n	80039cc <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003990:	b2d2      	uxtb	r2, r2
 8003992:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003998:	1c5a      	adds	r2, r3, #1
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d012      	beq.n	80039cc <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039aa:	3b01      	subs	r3, #1
 80039ac:	b29a      	uxth	r2, r3
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039b6:	b29b      	uxth	r3, r3
 80039b8:	3b01      	subs	r3, #1
 80039ba:	b29a      	uxth	r2, r3
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039c4:	f043 0204 	orr.w	r2, r3, #4
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80039cc:	f248 0103 	movw	r1, #32771	; 0x8003
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	f000 f94a 	bl	8003c6a <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	2210      	movs	r2, #16
 80039dc:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2200      	movs	r2, #0
 80039e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f7ff fcb5 	bl	8003356 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80039ec:	bf00      	nop
 80039ee:	3708      	adds	r7, #8
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}
 80039f4:	ffff0000 	.word	0xffff0000

080039f8 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b084      	sub	sp, #16
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
 8003a00:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a08:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	4a5d      	ldr	r2, [pc, #372]	; (8003b8c <I2C_ITError+0x194>)
 8003a16:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	431a      	orrs	r2, r3
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8003a2a:	7bfb      	ldrb	r3, [r7, #15]
 8003a2c:	2b28      	cmp	r3, #40	; 0x28
 8003a2e:	d005      	beq.n	8003a3c <I2C_ITError+0x44>
 8003a30:	7bfb      	ldrb	r3, [r7, #15]
 8003a32:	2b29      	cmp	r3, #41	; 0x29
 8003a34:	d002      	beq.n	8003a3c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8003a36:	7bfb      	ldrb	r3, [r7, #15]
 8003a38:	2b2a      	cmp	r3, #42	; 0x2a
 8003a3a:	d10b      	bne.n	8003a54 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003a3c:	2103      	movs	r1, #3
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f000 f913 	bl	8003c6a <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2228      	movs	r2, #40	; 0x28
 8003a48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	4a50      	ldr	r2, [pc, #320]	; (8003b90 <I2C_ITError+0x198>)
 8003a50:	635a      	str	r2, [r3, #52]	; 0x34
 8003a52:	e011      	b.n	8003a78 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003a54:	f248 0103 	movw	r1, #32771	; 0x8003
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	f000 f906 	bl	8003c6a <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	2b60      	cmp	r3, #96	; 0x60
 8003a68:	d003      	beq.n	8003a72 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2220      	movs	r2, #32
 8003a6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2200      	movs	r2, #0
 8003a76:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a7c:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d039      	beq.n	8003afa <I2C_ITError+0x102>
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	2b11      	cmp	r3, #17
 8003a8a:	d002      	beq.n	8003a92 <I2C_ITError+0x9a>
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	2b21      	cmp	r3, #33	; 0x21
 8003a90:	d133      	bne.n	8003afa <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a9c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003aa0:	d107      	bne.n	8003ab2 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003ab0:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f7ff f872 	bl	8002ba0 <HAL_DMA_GetState>
 8003abc:	4603      	mov	r3, r0
 8003abe:	2b01      	cmp	r3, #1
 8003ac0:	d017      	beq.n	8003af2 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ac6:	4a33      	ldr	r2, [pc, #204]	; (8003b94 <I2C_ITError+0x19c>)
 8003ac8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2200      	movs	r2, #0
 8003ace:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f7fe feb6 	bl	8002848 <HAL_DMA_Abort_IT>
 8003adc:	4603      	mov	r3, r0
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d04d      	beq.n	8003b7e <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ae6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ae8:	687a      	ldr	r2, [r7, #4]
 8003aea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003aec:	4610      	mov	r0, r2
 8003aee:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003af0:	e045      	b.n	8003b7e <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f000 f850 	bl	8003b98 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003af8:	e041      	b.n	8003b7e <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d039      	beq.n	8003b76 <I2C_ITError+0x17e>
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	2b12      	cmp	r3, #18
 8003b06:	d002      	beq.n	8003b0e <I2C_ITError+0x116>
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	2b22      	cmp	r3, #34	; 0x22
 8003b0c:	d133      	bne.n	8003b76 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b1c:	d107      	bne.n	8003b2e <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b2c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b32:	4618      	mov	r0, r3
 8003b34:	f7ff f834 	bl	8002ba0 <HAL_DMA_GetState>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	2b01      	cmp	r3, #1
 8003b3c:	d017      	beq.n	8003b6e <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b42:	4a14      	ldr	r2, [pc, #80]	; (8003b94 <I2C_ITError+0x19c>)
 8003b44:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b52:	4618      	mov	r0, r3
 8003b54:	f7fe fe78 	bl	8002848 <HAL_DMA_Abort_IT>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d011      	beq.n	8003b82 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b64:	687a      	ldr	r2, [r7, #4]
 8003b66:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003b68:	4610      	mov	r0, r2
 8003b6a:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003b6c:	e009      	b.n	8003b82 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f000 f812 	bl	8003b98 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003b74:	e005      	b.n	8003b82 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f000 f80e 	bl	8003b98 <I2C_TreatErrorCallback>
  }
}
 8003b7c:	e002      	b.n	8003b84 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003b7e:	bf00      	nop
 8003b80:	e000      	b.n	8003b84 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003b82:	bf00      	nop
}
 8003b84:	bf00      	nop
 8003b86:	3710      	adds	r7, #16
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}
 8003b8c:	ffff0000 	.word	0xffff0000
 8003b90:	08003393 	.word	0x08003393
 8003b94:	08003c2f 	.word	0x08003c2f

08003b98 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b082      	sub	sp, #8
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ba6:	b2db      	uxtb	r3, r3
 8003ba8:	2b60      	cmp	r3, #96	; 0x60
 8003baa:	d10e      	bne.n	8003bca <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2220      	movs	r2, #32
 8003bb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f7ff fbdb 	bl	800337e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003bc8:	e009      	b.n	8003bde <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	f7ff fbc6 	bl	800336a <HAL_I2C_ErrorCallback>
}
 8003bde:	bf00      	nop
 8003be0:	3708      	adds	r7, #8
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}

08003be6 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003be6:	b480      	push	{r7}
 8003be8:	b083      	sub	sp, #12
 8003bea:	af00      	add	r7, sp, #0
 8003bec:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	699b      	ldr	r3, [r3, #24]
 8003bf4:	f003 0302 	and.w	r3, r3, #2
 8003bf8:	2b02      	cmp	r3, #2
 8003bfa:	d103      	bne.n	8003c04 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	2200      	movs	r2, #0
 8003c02:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	699b      	ldr	r3, [r3, #24]
 8003c0a:	f003 0301 	and.w	r3, r3, #1
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d007      	beq.n	8003c22 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	699a      	ldr	r2, [r3, #24]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f042 0201 	orr.w	r2, r2, #1
 8003c20:	619a      	str	r2, [r3, #24]
  }
}
 8003c22:	bf00      	nop
 8003c24:	370c      	adds	r7, #12
 8003c26:	46bd      	mov	sp, r7
 8003c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2c:	4770      	bx	lr

08003c2e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003c2e:	b580      	push	{r7, lr}
 8003c30:	b084      	sub	sp, #16
 8003c32:	af00      	add	r7, sp, #0
 8003c34:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c3a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d003      	beq.n	8003c4c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c48:	2200      	movs	r2, #0
 8003c4a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d003      	beq.n	8003c5c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c58:	2200      	movs	r2, #0
 8003c5a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8003c5c:	68f8      	ldr	r0, [r7, #12]
 8003c5e:	f7ff ff9b 	bl	8003b98 <I2C_TreatErrorCallback>
}
 8003c62:	bf00      	nop
 8003c64:	3710      	adds	r7, #16
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}

08003c6a <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003c6a:	b480      	push	{r7}
 8003c6c:	b085      	sub	sp, #20
 8003c6e:	af00      	add	r7, sp, #0
 8003c70:	6078      	str	r0, [r7, #4]
 8003c72:	460b      	mov	r3, r1
 8003c74:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003c76:	2300      	movs	r3, #0
 8003c78:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003c7a:	887b      	ldrh	r3, [r7, #2]
 8003c7c:	f003 0301 	and.w	r3, r3, #1
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d00f      	beq.n	8003ca4 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8003c8a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003c98:	2b28      	cmp	r3, #40	; 0x28
 8003c9a:	d003      	beq.n	8003ca4 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003ca2:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003ca4:	887b      	ldrh	r3, [r7, #2]
 8003ca6:	f003 0302 	and.w	r3, r3, #2
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d00f      	beq.n	8003cce <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8003cb4:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003cc2:	2b28      	cmp	r3, #40	; 0x28
 8003cc4:	d003      	beq.n	8003cce <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003ccc:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003cce:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	da03      	bge.n	8003cde <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003cdc:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003cde:	887b      	ldrh	r3, [r7, #2]
 8003ce0:	2b10      	cmp	r3, #16
 8003ce2:	d103      	bne.n	8003cec <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003cea:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003cec:	887b      	ldrh	r3, [r7, #2]
 8003cee:	2b20      	cmp	r3, #32
 8003cf0:	d103      	bne.n	8003cfa <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	f043 0320 	orr.w	r3, r3, #32
 8003cf8:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003cfa:	887b      	ldrh	r3, [r7, #2]
 8003cfc:	2b40      	cmp	r3, #64	; 0x40
 8003cfe:	d103      	bne.n	8003d08 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d06:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	6819      	ldr	r1, [r3, #0]
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	43da      	mvns	r2, r3
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	400a      	ands	r2, r1
 8003d18:	601a      	str	r2, [r3, #0]
}
 8003d1a:	bf00      	nop
 8003d1c:	3714      	adds	r7, #20
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d24:	4770      	bx	lr

08003d26 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003d26:	b480      	push	{r7}
 8003d28:	b083      	sub	sp, #12
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	6078      	str	r0, [r7, #4]
 8003d2e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	2b20      	cmp	r3, #32
 8003d3a:	d138      	bne.n	8003dae <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d42:	2b01      	cmp	r3, #1
 8003d44:	d101      	bne.n	8003d4a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003d46:	2302      	movs	r3, #2
 8003d48:	e032      	b.n	8003db0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2224      	movs	r2, #36	; 0x24
 8003d56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f022 0201 	bic.w	r2, r2, #1
 8003d68:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003d78:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	6819      	ldr	r1, [r3, #0]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	683a      	ldr	r2, [r7, #0]
 8003d86:	430a      	orrs	r2, r1
 8003d88:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f042 0201 	orr.w	r2, r2, #1
 8003d98:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2220      	movs	r2, #32
 8003d9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2200      	movs	r2, #0
 8003da6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003daa:	2300      	movs	r3, #0
 8003dac:	e000      	b.n	8003db0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003dae:	2302      	movs	r3, #2
  }
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	370c      	adds	r7, #12
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr

08003dbc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b085      	sub	sp, #20
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
 8003dc4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	2b20      	cmp	r3, #32
 8003dd0:	d139      	bne.n	8003e46 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d101      	bne.n	8003de0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003ddc:	2302      	movs	r3, #2
 8003dde:	e033      	b.n	8003e48 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2201      	movs	r2, #1
 8003de4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2224      	movs	r2, #36	; 0x24
 8003dec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f022 0201 	bic.w	r2, r2, #1
 8003dfe:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003e0e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	021b      	lsls	r3, r3, #8
 8003e14:	68fa      	ldr	r2, [r7, #12]
 8003e16:	4313      	orrs	r3, r2
 8003e18:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	68fa      	ldr	r2, [r7, #12]
 8003e20:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f042 0201 	orr.w	r2, r2, #1
 8003e30:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2220      	movs	r2, #32
 8003e36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003e42:	2300      	movs	r3, #0
 8003e44:	e000      	b.n	8003e48 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003e46:	2302      	movs	r3, #2
  }
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	3714      	adds	r7, #20
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr

08003e54 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003e54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e56:	b08f      	sub	sp, #60	; 0x3c
 8003e58:	af0a      	add	r7, sp, #40	; 0x28
 8003e5a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d101      	bne.n	8003e66 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e116      	b.n	8004094 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003e72:	b2db      	uxtb	r3, r3
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d106      	bne.n	8003e86 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	f7fd fc29 	bl	80016d8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2203      	movs	r2, #3
 8003e8a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d102      	bne.n	8003ea0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f002 f8a5 	bl	8005ff4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	603b      	str	r3, [r7, #0]
 8003eb0:	687e      	ldr	r6, [r7, #4]
 8003eb2:	466d      	mov	r5, sp
 8003eb4:	f106 0410 	add.w	r4, r6, #16
 8003eb8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003eba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ebc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ebe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ec0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003ec4:	e885 0003 	stmia.w	r5, {r0, r1}
 8003ec8:	1d33      	adds	r3, r6, #4
 8003eca:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ecc:	6838      	ldr	r0, [r7, #0]
 8003ece:	f002 f839 	bl	8005f44 <USB_CoreInit>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d005      	beq.n	8003ee4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2202      	movs	r2, #2
 8003edc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	e0d7      	b.n	8004094 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	2100      	movs	r1, #0
 8003eea:	4618      	mov	r0, r3
 8003eec:	f002 f893 	bl	8006016 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	73fb      	strb	r3, [r7, #15]
 8003ef4:	e04a      	b.n	8003f8c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003ef6:	7bfa      	ldrb	r2, [r7, #15]
 8003ef8:	6879      	ldr	r1, [r7, #4]
 8003efa:	4613      	mov	r3, r2
 8003efc:	00db      	lsls	r3, r3, #3
 8003efe:	4413      	add	r3, r2
 8003f00:	009b      	lsls	r3, r3, #2
 8003f02:	440b      	add	r3, r1
 8003f04:	333d      	adds	r3, #61	; 0x3d
 8003f06:	2201      	movs	r2, #1
 8003f08:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003f0a:	7bfa      	ldrb	r2, [r7, #15]
 8003f0c:	6879      	ldr	r1, [r7, #4]
 8003f0e:	4613      	mov	r3, r2
 8003f10:	00db      	lsls	r3, r3, #3
 8003f12:	4413      	add	r3, r2
 8003f14:	009b      	lsls	r3, r3, #2
 8003f16:	440b      	add	r3, r1
 8003f18:	333c      	adds	r3, #60	; 0x3c
 8003f1a:	7bfa      	ldrb	r2, [r7, #15]
 8003f1c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003f1e:	7bfa      	ldrb	r2, [r7, #15]
 8003f20:	7bfb      	ldrb	r3, [r7, #15]
 8003f22:	b298      	uxth	r0, r3
 8003f24:	6879      	ldr	r1, [r7, #4]
 8003f26:	4613      	mov	r3, r2
 8003f28:	00db      	lsls	r3, r3, #3
 8003f2a:	4413      	add	r3, r2
 8003f2c:	009b      	lsls	r3, r3, #2
 8003f2e:	440b      	add	r3, r1
 8003f30:	3344      	adds	r3, #68	; 0x44
 8003f32:	4602      	mov	r2, r0
 8003f34:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003f36:	7bfa      	ldrb	r2, [r7, #15]
 8003f38:	6879      	ldr	r1, [r7, #4]
 8003f3a:	4613      	mov	r3, r2
 8003f3c:	00db      	lsls	r3, r3, #3
 8003f3e:	4413      	add	r3, r2
 8003f40:	009b      	lsls	r3, r3, #2
 8003f42:	440b      	add	r3, r1
 8003f44:	3340      	adds	r3, #64	; 0x40
 8003f46:	2200      	movs	r2, #0
 8003f48:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003f4a:	7bfa      	ldrb	r2, [r7, #15]
 8003f4c:	6879      	ldr	r1, [r7, #4]
 8003f4e:	4613      	mov	r3, r2
 8003f50:	00db      	lsls	r3, r3, #3
 8003f52:	4413      	add	r3, r2
 8003f54:	009b      	lsls	r3, r3, #2
 8003f56:	440b      	add	r3, r1
 8003f58:	3348      	adds	r3, #72	; 0x48
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003f5e:	7bfa      	ldrb	r2, [r7, #15]
 8003f60:	6879      	ldr	r1, [r7, #4]
 8003f62:	4613      	mov	r3, r2
 8003f64:	00db      	lsls	r3, r3, #3
 8003f66:	4413      	add	r3, r2
 8003f68:	009b      	lsls	r3, r3, #2
 8003f6a:	440b      	add	r3, r1
 8003f6c:	334c      	adds	r3, #76	; 0x4c
 8003f6e:	2200      	movs	r2, #0
 8003f70:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003f72:	7bfa      	ldrb	r2, [r7, #15]
 8003f74:	6879      	ldr	r1, [r7, #4]
 8003f76:	4613      	mov	r3, r2
 8003f78:	00db      	lsls	r3, r3, #3
 8003f7a:	4413      	add	r3, r2
 8003f7c:	009b      	lsls	r3, r3, #2
 8003f7e:	440b      	add	r3, r1
 8003f80:	3354      	adds	r3, #84	; 0x54
 8003f82:	2200      	movs	r2, #0
 8003f84:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f86:	7bfb      	ldrb	r3, [r7, #15]
 8003f88:	3301      	adds	r3, #1
 8003f8a:	73fb      	strb	r3, [r7, #15]
 8003f8c:	7bfa      	ldrb	r2, [r7, #15]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d3af      	bcc.n	8003ef6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f96:	2300      	movs	r3, #0
 8003f98:	73fb      	strb	r3, [r7, #15]
 8003f9a:	e044      	b.n	8004026 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003f9c:	7bfa      	ldrb	r2, [r7, #15]
 8003f9e:	6879      	ldr	r1, [r7, #4]
 8003fa0:	4613      	mov	r3, r2
 8003fa2:	00db      	lsls	r3, r3, #3
 8003fa4:	4413      	add	r3, r2
 8003fa6:	009b      	lsls	r3, r3, #2
 8003fa8:	440b      	add	r3, r1
 8003faa:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003fae:	2200      	movs	r2, #0
 8003fb0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003fb2:	7bfa      	ldrb	r2, [r7, #15]
 8003fb4:	6879      	ldr	r1, [r7, #4]
 8003fb6:	4613      	mov	r3, r2
 8003fb8:	00db      	lsls	r3, r3, #3
 8003fba:	4413      	add	r3, r2
 8003fbc:	009b      	lsls	r3, r3, #2
 8003fbe:	440b      	add	r3, r1
 8003fc0:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003fc4:	7bfa      	ldrb	r2, [r7, #15]
 8003fc6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003fc8:	7bfa      	ldrb	r2, [r7, #15]
 8003fca:	6879      	ldr	r1, [r7, #4]
 8003fcc:	4613      	mov	r3, r2
 8003fce:	00db      	lsls	r3, r3, #3
 8003fd0:	4413      	add	r3, r2
 8003fd2:	009b      	lsls	r3, r3, #2
 8003fd4:	440b      	add	r3, r1
 8003fd6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003fda:	2200      	movs	r2, #0
 8003fdc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003fde:	7bfa      	ldrb	r2, [r7, #15]
 8003fe0:	6879      	ldr	r1, [r7, #4]
 8003fe2:	4613      	mov	r3, r2
 8003fe4:	00db      	lsls	r3, r3, #3
 8003fe6:	4413      	add	r3, r2
 8003fe8:	009b      	lsls	r3, r3, #2
 8003fea:	440b      	add	r3, r1
 8003fec:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003ff4:	7bfa      	ldrb	r2, [r7, #15]
 8003ff6:	6879      	ldr	r1, [r7, #4]
 8003ff8:	4613      	mov	r3, r2
 8003ffa:	00db      	lsls	r3, r3, #3
 8003ffc:	4413      	add	r3, r2
 8003ffe:	009b      	lsls	r3, r3, #2
 8004000:	440b      	add	r3, r1
 8004002:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004006:	2200      	movs	r2, #0
 8004008:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800400a:	7bfa      	ldrb	r2, [r7, #15]
 800400c:	6879      	ldr	r1, [r7, #4]
 800400e:	4613      	mov	r3, r2
 8004010:	00db      	lsls	r3, r3, #3
 8004012:	4413      	add	r3, r2
 8004014:	009b      	lsls	r3, r3, #2
 8004016:	440b      	add	r3, r1
 8004018:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800401c:	2200      	movs	r2, #0
 800401e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004020:	7bfb      	ldrb	r3, [r7, #15]
 8004022:	3301      	adds	r3, #1
 8004024:	73fb      	strb	r3, [r7, #15]
 8004026:	7bfa      	ldrb	r2, [r7, #15]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	429a      	cmp	r2, r3
 800402e:	d3b5      	bcc.n	8003f9c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	603b      	str	r3, [r7, #0]
 8004036:	687e      	ldr	r6, [r7, #4]
 8004038:	466d      	mov	r5, sp
 800403a:	f106 0410 	add.w	r4, r6, #16
 800403e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004040:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004042:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004044:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004046:	e894 0003 	ldmia.w	r4, {r0, r1}
 800404a:	e885 0003 	stmia.w	r5, {r0, r1}
 800404e:	1d33      	adds	r3, r6, #4
 8004050:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004052:	6838      	ldr	r0, [r7, #0]
 8004054:	f002 f82c 	bl	80060b0 <USB_DevInit>
 8004058:	4603      	mov	r3, r0
 800405a:	2b00      	cmp	r3, #0
 800405c:	d005      	beq.n	800406a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2202      	movs	r2, #2
 8004062:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	e014      	b.n	8004094 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2200      	movs	r2, #0
 800406e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2201      	movs	r2, #1
 8004076:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800407e:	2b01      	cmp	r3, #1
 8004080:	d102      	bne.n	8004088 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f000 f80a 	bl	800409c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4618      	mov	r0, r3
 800408e:	f002 f9ea 	bl	8006466 <USB_DevDisconnect>

  return HAL_OK;
 8004092:	2300      	movs	r3, #0
}
 8004094:	4618      	mov	r0, r3
 8004096:	3714      	adds	r7, #20
 8004098:	46bd      	mov	sp, r7
 800409a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800409c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800409c:	b480      	push	{r7}
 800409e:	b085      	sub	sp, #20
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2201      	movs	r2, #1
 80040ae:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2200      	movs	r2, #0
 80040b6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	699b      	ldr	r3, [r3, #24]
 80040be:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80040ca:	4b05      	ldr	r3, [pc, #20]	; (80040e0 <HAL_PCDEx_ActivateLPM+0x44>)
 80040cc:	4313      	orrs	r3, r2
 80040ce:	68fa      	ldr	r2, [r7, #12]
 80040d0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80040d2:	2300      	movs	r3, #0
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	3714      	adds	r7, #20
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr
 80040e0:	10000003 	.word	0x10000003

080040e4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80040e4:	b480      	push	{r7}
 80040e6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80040e8:	4b05      	ldr	r3, [pc, #20]	; (8004100 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a04      	ldr	r2, [pc, #16]	; (8004100 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80040ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040f2:	6013      	str	r3, [r2, #0]
}
 80040f4:	bf00      	nop
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr
 80040fe:	bf00      	nop
 8004100:	40007000 	.word	0x40007000

08004104 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b082      	sub	sp, #8
 8004108:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800410a:	2300      	movs	r3, #0
 800410c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800410e:	4b23      	ldr	r3, [pc, #140]	; (800419c <HAL_PWREx_EnableOverDrive+0x98>)
 8004110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004112:	4a22      	ldr	r2, [pc, #136]	; (800419c <HAL_PWREx_EnableOverDrive+0x98>)
 8004114:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004118:	6413      	str	r3, [r2, #64]	; 0x40
 800411a:	4b20      	ldr	r3, [pc, #128]	; (800419c <HAL_PWREx_EnableOverDrive+0x98>)
 800411c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800411e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004122:	603b      	str	r3, [r7, #0]
 8004124:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004126:	4b1e      	ldr	r3, [pc, #120]	; (80041a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a1d      	ldr	r2, [pc, #116]	; (80041a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800412c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004130:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004132:	f7fd fc55 	bl	80019e0 <HAL_GetTick>
 8004136:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004138:	e009      	b.n	800414e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800413a:	f7fd fc51 	bl	80019e0 <HAL_GetTick>
 800413e:	4602      	mov	r2, r0
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	1ad3      	subs	r3, r2, r3
 8004144:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004148:	d901      	bls.n	800414e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800414a:	2303      	movs	r3, #3
 800414c:	e022      	b.n	8004194 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800414e:	4b14      	ldr	r3, [pc, #80]	; (80041a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004156:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800415a:	d1ee      	bne.n	800413a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800415c:	4b10      	ldr	r3, [pc, #64]	; (80041a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a0f      	ldr	r2, [pc, #60]	; (80041a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004162:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004166:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004168:	f7fd fc3a 	bl	80019e0 <HAL_GetTick>
 800416c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800416e:	e009      	b.n	8004184 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004170:	f7fd fc36 	bl	80019e0 <HAL_GetTick>
 8004174:	4602      	mov	r2, r0
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	1ad3      	subs	r3, r2, r3
 800417a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800417e:	d901      	bls.n	8004184 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004180:	2303      	movs	r3, #3
 8004182:	e007      	b.n	8004194 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004184:	4b06      	ldr	r3, [pc, #24]	; (80041a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800418c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004190:	d1ee      	bne.n	8004170 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004192:	2300      	movs	r3, #0
}
 8004194:	4618      	mov	r0, r3
 8004196:	3708      	adds	r7, #8
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}
 800419c:	40023800 	.word	0x40023800
 80041a0:	40007000 	.word	0x40007000

080041a4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b086      	sub	sp, #24
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80041ac:	2300      	movs	r3, #0
 80041ae:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d101      	bne.n	80041ba <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	e29b      	b.n	80046f2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 0301 	and.w	r3, r3, #1
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	f000 8087 	beq.w	80042d6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80041c8:	4b96      	ldr	r3, [pc, #600]	; (8004424 <HAL_RCC_OscConfig+0x280>)
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	f003 030c 	and.w	r3, r3, #12
 80041d0:	2b04      	cmp	r3, #4
 80041d2:	d00c      	beq.n	80041ee <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041d4:	4b93      	ldr	r3, [pc, #588]	; (8004424 <HAL_RCC_OscConfig+0x280>)
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	f003 030c 	and.w	r3, r3, #12
 80041dc:	2b08      	cmp	r3, #8
 80041de:	d112      	bne.n	8004206 <HAL_RCC_OscConfig+0x62>
 80041e0:	4b90      	ldr	r3, [pc, #576]	; (8004424 <HAL_RCC_OscConfig+0x280>)
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041ec:	d10b      	bne.n	8004206 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041ee:	4b8d      	ldr	r3, [pc, #564]	; (8004424 <HAL_RCC_OscConfig+0x280>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d06c      	beq.n	80042d4 <HAL_RCC_OscConfig+0x130>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d168      	bne.n	80042d4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	e275      	b.n	80046f2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800420e:	d106      	bne.n	800421e <HAL_RCC_OscConfig+0x7a>
 8004210:	4b84      	ldr	r3, [pc, #528]	; (8004424 <HAL_RCC_OscConfig+0x280>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a83      	ldr	r2, [pc, #524]	; (8004424 <HAL_RCC_OscConfig+0x280>)
 8004216:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800421a:	6013      	str	r3, [r2, #0]
 800421c:	e02e      	b.n	800427c <HAL_RCC_OscConfig+0xd8>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d10c      	bne.n	8004240 <HAL_RCC_OscConfig+0x9c>
 8004226:	4b7f      	ldr	r3, [pc, #508]	; (8004424 <HAL_RCC_OscConfig+0x280>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a7e      	ldr	r2, [pc, #504]	; (8004424 <HAL_RCC_OscConfig+0x280>)
 800422c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004230:	6013      	str	r3, [r2, #0]
 8004232:	4b7c      	ldr	r3, [pc, #496]	; (8004424 <HAL_RCC_OscConfig+0x280>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a7b      	ldr	r2, [pc, #492]	; (8004424 <HAL_RCC_OscConfig+0x280>)
 8004238:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800423c:	6013      	str	r3, [r2, #0]
 800423e:	e01d      	b.n	800427c <HAL_RCC_OscConfig+0xd8>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004248:	d10c      	bne.n	8004264 <HAL_RCC_OscConfig+0xc0>
 800424a:	4b76      	ldr	r3, [pc, #472]	; (8004424 <HAL_RCC_OscConfig+0x280>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a75      	ldr	r2, [pc, #468]	; (8004424 <HAL_RCC_OscConfig+0x280>)
 8004250:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004254:	6013      	str	r3, [r2, #0]
 8004256:	4b73      	ldr	r3, [pc, #460]	; (8004424 <HAL_RCC_OscConfig+0x280>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a72      	ldr	r2, [pc, #456]	; (8004424 <HAL_RCC_OscConfig+0x280>)
 800425c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004260:	6013      	str	r3, [r2, #0]
 8004262:	e00b      	b.n	800427c <HAL_RCC_OscConfig+0xd8>
 8004264:	4b6f      	ldr	r3, [pc, #444]	; (8004424 <HAL_RCC_OscConfig+0x280>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a6e      	ldr	r2, [pc, #440]	; (8004424 <HAL_RCC_OscConfig+0x280>)
 800426a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800426e:	6013      	str	r3, [r2, #0]
 8004270:	4b6c      	ldr	r3, [pc, #432]	; (8004424 <HAL_RCC_OscConfig+0x280>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a6b      	ldr	r2, [pc, #428]	; (8004424 <HAL_RCC_OscConfig+0x280>)
 8004276:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800427a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d013      	beq.n	80042ac <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004284:	f7fd fbac 	bl	80019e0 <HAL_GetTick>
 8004288:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800428a:	e008      	b.n	800429e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800428c:	f7fd fba8 	bl	80019e0 <HAL_GetTick>
 8004290:	4602      	mov	r2, r0
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	1ad3      	subs	r3, r2, r3
 8004296:	2b64      	cmp	r3, #100	; 0x64
 8004298:	d901      	bls.n	800429e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800429a:	2303      	movs	r3, #3
 800429c:	e229      	b.n	80046f2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800429e:	4b61      	ldr	r3, [pc, #388]	; (8004424 <HAL_RCC_OscConfig+0x280>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d0f0      	beq.n	800428c <HAL_RCC_OscConfig+0xe8>
 80042aa:	e014      	b.n	80042d6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042ac:	f7fd fb98 	bl	80019e0 <HAL_GetTick>
 80042b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042b2:	e008      	b.n	80042c6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042b4:	f7fd fb94 	bl	80019e0 <HAL_GetTick>
 80042b8:	4602      	mov	r2, r0
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	1ad3      	subs	r3, r2, r3
 80042be:	2b64      	cmp	r3, #100	; 0x64
 80042c0:	d901      	bls.n	80042c6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80042c2:	2303      	movs	r3, #3
 80042c4:	e215      	b.n	80046f2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042c6:	4b57      	ldr	r3, [pc, #348]	; (8004424 <HAL_RCC_OscConfig+0x280>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d1f0      	bne.n	80042b4 <HAL_RCC_OscConfig+0x110>
 80042d2:	e000      	b.n	80042d6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f003 0302 	and.w	r3, r3, #2
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d069      	beq.n	80043b6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80042e2:	4b50      	ldr	r3, [pc, #320]	; (8004424 <HAL_RCC_OscConfig+0x280>)
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	f003 030c 	and.w	r3, r3, #12
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d00b      	beq.n	8004306 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042ee:	4b4d      	ldr	r3, [pc, #308]	; (8004424 <HAL_RCC_OscConfig+0x280>)
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	f003 030c 	and.w	r3, r3, #12
 80042f6:	2b08      	cmp	r3, #8
 80042f8:	d11c      	bne.n	8004334 <HAL_RCC_OscConfig+0x190>
 80042fa:	4b4a      	ldr	r3, [pc, #296]	; (8004424 <HAL_RCC_OscConfig+0x280>)
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004302:	2b00      	cmp	r3, #0
 8004304:	d116      	bne.n	8004334 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004306:	4b47      	ldr	r3, [pc, #284]	; (8004424 <HAL_RCC_OscConfig+0x280>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 0302 	and.w	r3, r3, #2
 800430e:	2b00      	cmp	r3, #0
 8004310:	d005      	beq.n	800431e <HAL_RCC_OscConfig+0x17a>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	68db      	ldr	r3, [r3, #12]
 8004316:	2b01      	cmp	r3, #1
 8004318:	d001      	beq.n	800431e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	e1e9      	b.n	80046f2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800431e:	4b41      	ldr	r3, [pc, #260]	; (8004424 <HAL_RCC_OscConfig+0x280>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	691b      	ldr	r3, [r3, #16]
 800432a:	00db      	lsls	r3, r3, #3
 800432c:	493d      	ldr	r1, [pc, #244]	; (8004424 <HAL_RCC_OscConfig+0x280>)
 800432e:	4313      	orrs	r3, r2
 8004330:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004332:	e040      	b.n	80043b6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d023      	beq.n	8004384 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800433c:	4b39      	ldr	r3, [pc, #228]	; (8004424 <HAL_RCC_OscConfig+0x280>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a38      	ldr	r2, [pc, #224]	; (8004424 <HAL_RCC_OscConfig+0x280>)
 8004342:	f043 0301 	orr.w	r3, r3, #1
 8004346:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004348:	f7fd fb4a 	bl	80019e0 <HAL_GetTick>
 800434c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800434e:	e008      	b.n	8004362 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004350:	f7fd fb46 	bl	80019e0 <HAL_GetTick>
 8004354:	4602      	mov	r2, r0
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	1ad3      	subs	r3, r2, r3
 800435a:	2b02      	cmp	r3, #2
 800435c:	d901      	bls.n	8004362 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800435e:	2303      	movs	r3, #3
 8004360:	e1c7      	b.n	80046f2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004362:	4b30      	ldr	r3, [pc, #192]	; (8004424 <HAL_RCC_OscConfig+0x280>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 0302 	and.w	r3, r3, #2
 800436a:	2b00      	cmp	r3, #0
 800436c:	d0f0      	beq.n	8004350 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800436e:	4b2d      	ldr	r3, [pc, #180]	; (8004424 <HAL_RCC_OscConfig+0x280>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	691b      	ldr	r3, [r3, #16]
 800437a:	00db      	lsls	r3, r3, #3
 800437c:	4929      	ldr	r1, [pc, #164]	; (8004424 <HAL_RCC_OscConfig+0x280>)
 800437e:	4313      	orrs	r3, r2
 8004380:	600b      	str	r3, [r1, #0]
 8004382:	e018      	b.n	80043b6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004384:	4b27      	ldr	r3, [pc, #156]	; (8004424 <HAL_RCC_OscConfig+0x280>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a26      	ldr	r2, [pc, #152]	; (8004424 <HAL_RCC_OscConfig+0x280>)
 800438a:	f023 0301 	bic.w	r3, r3, #1
 800438e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004390:	f7fd fb26 	bl	80019e0 <HAL_GetTick>
 8004394:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004396:	e008      	b.n	80043aa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004398:	f7fd fb22 	bl	80019e0 <HAL_GetTick>
 800439c:	4602      	mov	r2, r0
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	1ad3      	subs	r3, r2, r3
 80043a2:	2b02      	cmp	r3, #2
 80043a4:	d901      	bls.n	80043aa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80043a6:	2303      	movs	r3, #3
 80043a8:	e1a3      	b.n	80046f2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043aa:	4b1e      	ldr	r3, [pc, #120]	; (8004424 <HAL_RCC_OscConfig+0x280>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 0302 	and.w	r3, r3, #2
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d1f0      	bne.n	8004398 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 0308 	and.w	r3, r3, #8
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d038      	beq.n	8004434 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	695b      	ldr	r3, [r3, #20]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d019      	beq.n	80043fe <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043ca:	4b16      	ldr	r3, [pc, #88]	; (8004424 <HAL_RCC_OscConfig+0x280>)
 80043cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043ce:	4a15      	ldr	r2, [pc, #84]	; (8004424 <HAL_RCC_OscConfig+0x280>)
 80043d0:	f043 0301 	orr.w	r3, r3, #1
 80043d4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043d6:	f7fd fb03 	bl	80019e0 <HAL_GetTick>
 80043da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043dc:	e008      	b.n	80043f0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043de:	f7fd faff 	bl	80019e0 <HAL_GetTick>
 80043e2:	4602      	mov	r2, r0
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	1ad3      	subs	r3, r2, r3
 80043e8:	2b02      	cmp	r3, #2
 80043ea:	d901      	bls.n	80043f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80043ec:	2303      	movs	r3, #3
 80043ee:	e180      	b.n	80046f2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043f0:	4b0c      	ldr	r3, [pc, #48]	; (8004424 <HAL_RCC_OscConfig+0x280>)
 80043f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043f4:	f003 0302 	and.w	r3, r3, #2
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d0f0      	beq.n	80043de <HAL_RCC_OscConfig+0x23a>
 80043fc:	e01a      	b.n	8004434 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043fe:	4b09      	ldr	r3, [pc, #36]	; (8004424 <HAL_RCC_OscConfig+0x280>)
 8004400:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004402:	4a08      	ldr	r2, [pc, #32]	; (8004424 <HAL_RCC_OscConfig+0x280>)
 8004404:	f023 0301 	bic.w	r3, r3, #1
 8004408:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800440a:	f7fd fae9 	bl	80019e0 <HAL_GetTick>
 800440e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004410:	e00a      	b.n	8004428 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004412:	f7fd fae5 	bl	80019e0 <HAL_GetTick>
 8004416:	4602      	mov	r2, r0
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	1ad3      	subs	r3, r2, r3
 800441c:	2b02      	cmp	r3, #2
 800441e:	d903      	bls.n	8004428 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004420:	2303      	movs	r3, #3
 8004422:	e166      	b.n	80046f2 <HAL_RCC_OscConfig+0x54e>
 8004424:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004428:	4b92      	ldr	r3, [pc, #584]	; (8004674 <HAL_RCC_OscConfig+0x4d0>)
 800442a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800442c:	f003 0302 	and.w	r3, r3, #2
 8004430:	2b00      	cmp	r3, #0
 8004432:	d1ee      	bne.n	8004412 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f003 0304 	and.w	r3, r3, #4
 800443c:	2b00      	cmp	r3, #0
 800443e:	f000 80a4 	beq.w	800458a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004442:	4b8c      	ldr	r3, [pc, #560]	; (8004674 <HAL_RCC_OscConfig+0x4d0>)
 8004444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004446:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800444a:	2b00      	cmp	r3, #0
 800444c:	d10d      	bne.n	800446a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800444e:	4b89      	ldr	r3, [pc, #548]	; (8004674 <HAL_RCC_OscConfig+0x4d0>)
 8004450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004452:	4a88      	ldr	r2, [pc, #544]	; (8004674 <HAL_RCC_OscConfig+0x4d0>)
 8004454:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004458:	6413      	str	r3, [r2, #64]	; 0x40
 800445a:	4b86      	ldr	r3, [pc, #536]	; (8004674 <HAL_RCC_OscConfig+0x4d0>)
 800445c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800445e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004462:	60bb      	str	r3, [r7, #8]
 8004464:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004466:	2301      	movs	r3, #1
 8004468:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800446a:	4b83      	ldr	r3, [pc, #524]	; (8004678 <HAL_RCC_OscConfig+0x4d4>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004472:	2b00      	cmp	r3, #0
 8004474:	d118      	bne.n	80044a8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004476:	4b80      	ldr	r3, [pc, #512]	; (8004678 <HAL_RCC_OscConfig+0x4d4>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a7f      	ldr	r2, [pc, #508]	; (8004678 <HAL_RCC_OscConfig+0x4d4>)
 800447c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004480:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004482:	f7fd faad 	bl	80019e0 <HAL_GetTick>
 8004486:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004488:	e008      	b.n	800449c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800448a:	f7fd faa9 	bl	80019e0 <HAL_GetTick>
 800448e:	4602      	mov	r2, r0
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	1ad3      	subs	r3, r2, r3
 8004494:	2b64      	cmp	r3, #100	; 0x64
 8004496:	d901      	bls.n	800449c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004498:	2303      	movs	r3, #3
 800449a:	e12a      	b.n	80046f2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800449c:	4b76      	ldr	r3, [pc, #472]	; (8004678 <HAL_RCC_OscConfig+0x4d4>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d0f0      	beq.n	800448a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d106      	bne.n	80044be <HAL_RCC_OscConfig+0x31a>
 80044b0:	4b70      	ldr	r3, [pc, #448]	; (8004674 <HAL_RCC_OscConfig+0x4d0>)
 80044b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044b4:	4a6f      	ldr	r2, [pc, #444]	; (8004674 <HAL_RCC_OscConfig+0x4d0>)
 80044b6:	f043 0301 	orr.w	r3, r3, #1
 80044ba:	6713      	str	r3, [r2, #112]	; 0x70
 80044bc:	e02d      	b.n	800451a <HAL_RCC_OscConfig+0x376>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d10c      	bne.n	80044e0 <HAL_RCC_OscConfig+0x33c>
 80044c6:	4b6b      	ldr	r3, [pc, #428]	; (8004674 <HAL_RCC_OscConfig+0x4d0>)
 80044c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ca:	4a6a      	ldr	r2, [pc, #424]	; (8004674 <HAL_RCC_OscConfig+0x4d0>)
 80044cc:	f023 0301 	bic.w	r3, r3, #1
 80044d0:	6713      	str	r3, [r2, #112]	; 0x70
 80044d2:	4b68      	ldr	r3, [pc, #416]	; (8004674 <HAL_RCC_OscConfig+0x4d0>)
 80044d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044d6:	4a67      	ldr	r2, [pc, #412]	; (8004674 <HAL_RCC_OscConfig+0x4d0>)
 80044d8:	f023 0304 	bic.w	r3, r3, #4
 80044dc:	6713      	str	r3, [r2, #112]	; 0x70
 80044de:	e01c      	b.n	800451a <HAL_RCC_OscConfig+0x376>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	2b05      	cmp	r3, #5
 80044e6:	d10c      	bne.n	8004502 <HAL_RCC_OscConfig+0x35e>
 80044e8:	4b62      	ldr	r3, [pc, #392]	; (8004674 <HAL_RCC_OscConfig+0x4d0>)
 80044ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ec:	4a61      	ldr	r2, [pc, #388]	; (8004674 <HAL_RCC_OscConfig+0x4d0>)
 80044ee:	f043 0304 	orr.w	r3, r3, #4
 80044f2:	6713      	str	r3, [r2, #112]	; 0x70
 80044f4:	4b5f      	ldr	r3, [pc, #380]	; (8004674 <HAL_RCC_OscConfig+0x4d0>)
 80044f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044f8:	4a5e      	ldr	r2, [pc, #376]	; (8004674 <HAL_RCC_OscConfig+0x4d0>)
 80044fa:	f043 0301 	orr.w	r3, r3, #1
 80044fe:	6713      	str	r3, [r2, #112]	; 0x70
 8004500:	e00b      	b.n	800451a <HAL_RCC_OscConfig+0x376>
 8004502:	4b5c      	ldr	r3, [pc, #368]	; (8004674 <HAL_RCC_OscConfig+0x4d0>)
 8004504:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004506:	4a5b      	ldr	r2, [pc, #364]	; (8004674 <HAL_RCC_OscConfig+0x4d0>)
 8004508:	f023 0301 	bic.w	r3, r3, #1
 800450c:	6713      	str	r3, [r2, #112]	; 0x70
 800450e:	4b59      	ldr	r3, [pc, #356]	; (8004674 <HAL_RCC_OscConfig+0x4d0>)
 8004510:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004512:	4a58      	ldr	r2, [pc, #352]	; (8004674 <HAL_RCC_OscConfig+0x4d0>)
 8004514:	f023 0304 	bic.w	r3, r3, #4
 8004518:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d015      	beq.n	800454e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004522:	f7fd fa5d 	bl	80019e0 <HAL_GetTick>
 8004526:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004528:	e00a      	b.n	8004540 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800452a:	f7fd fa59 	bl	80019e0 <HAL_GetTick>
 800452e:	4602      	mov	r2, r0
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	1ad3      	subs	r3, r2, r3
 8004534:	f241 3288 	movw	r2, #5000	; 0x1388
 8004538:	4293      	cmp	r3, r2
 800453a:	d901      	bls.n	8004540 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800453c:	2303      	movs	r3, #3
 800453e:	e0d8      	b.n	80046f2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004540:	4b4c      	ldr	r3, [pc, #304]	; (8004674 <HAL_RCC_OscConfig+0x4d0>)
 8004542:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004544:	f003 0302 	and.w	r3, r3, #2
 8004548:	2b00      	cmp	r3, #0
 800454a:	d0ee      	beq.n	800452a <HAL_RCC_OscConfig+0x386>
 800454c:	e014      	b.n	8004578 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800454e:	f7fd fa47 	bl	80019e0 <HAL_GetTick>
 8004552:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004554:	e00a      	b.n	800456c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004556:	f7fd fa43 	bl	80019e0 <HAL_GetTick>
 800455a:	4602      	mov	r2, r0
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	1ad3      	subs	r3, r2, r3
 8004560:	f241 3288 	movw	r2, #5000	; 0x1388
 8004564:	4293      	cmp	r3, r2
 8004566:	d901      	bls.n	800456c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004568:	2303      	movs	r3, #3
 800456a:	e0c2      	b.n	80046f2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800456c:	4b41      	ldr	r3, [pc, #260]	; (8004674 <HAL_RCC_OscConfig+0x4d0>)
 800456e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004570:	f003 0302 	and.w	r3, r3, #2
 8004574:	2b00      	cmp	r3, #0
 8004576:	d1ee      	bne.n	8004556 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004578:	7dfb      	ldrb	r3, [r7, #23]
 800457a:	2b01      	cmp	r3, #1
 800457c:	d105      	bne.n	800458a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800457e:	4b3d      	ldr	r3, [pc, #244]	; (8004674 <HAL_RCC_OscConfig+0x4d0>)
 8004580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004582:	4a3c      	ldr	r2, [pc, #240]	; (8004674 <HAL_RCC_OscConfig+0x4d0>)
 8004584:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004588:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	699b      	ldr	r3, [r3, #24]
 800458e:	2b00      	cmp	r3, #0
 8004590:	f000 80ae 	beq.w	80046f0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004594:	4b37      	ldr	r3, [pc, #220]	; (8004674 <HAL_RCC_OscConfig+0x4d0>)
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	f003 030c 	and.w	r3, r3, #12
 800459c:	2b08      	cmp	r3, #8
 800459e:	d06d      	beq.n	800467c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	699b      	ldr	r3, [r3, #24]
 80045a4:	2b02      	cmp	r3, #2
 80045a6:	d14b      	bne.n	8004640 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045a8:	4b32      	ldr	r3, [pc, #200]	; (8004674 <HAL_RCC_OscConfig+0x4d0>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a31      	ldr	r2, [pc, #196]	; (8004674 <HAL_RCC_OscConfig+0x4d0>)
 80045ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80045b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045b4:	f7fd fa14 	bl	80019e0 <HAL_GetTick>
 80045b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045ba:	e008      	b.n	80045ce <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045bc:	f7fd fa10 	bl	80019e0 <HAL_GetTick>
 80045c0:	4602      	mov	r2, r0
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	1ad3      	subs	r3, r2, r3
 80045c6:	2b02      	cmp	r3, #2
 80045c8:	d901      	bls.n	80045ce <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80045ca:	2303      	movs	r3, #3
 80045cc:	e091      	b.n	80046f2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045ce:	4b29      	ldr	r3, [pc, #164]	; (8004674 <HAL_RCC_OscConfig+0x4d0>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d1f0      	bne.n	80045bc <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	69da      	ldr	r2, [r3, #28]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6a1b      	ldr	r3, [r3, #32]
 80045e2:	431a      	orrs	r2, r3
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e8:	019b      	lsls	r3, r3, #6
 80045ea:	431a      	orrs	r2, r3
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045f0:	085b      	lsrs	r3, r3, #1
 80045f2:	3b01      	subs	r3, #1
 80045f4:	041b      	lsls	r3, r3, #16
 80045f6:	431a      	orrs	r2, r3
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045fc:	061b      	lsls	r3, r3, #24
 80045fe:	431a      	orrs	r2, r3
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004604:	071b      	lsls	r3, r3, #28
 8004606:	491b      	ldr	r1, [pc, #108]	; (8004674 <HAL_RCC_OscConfig+0x4d0>)
 8004608:	4313      	orrs	r3, r2
 800460a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800460c:	4b19      	ldr	r3, [pc, #100]	; (8004674 <HAL_RCC_OscConfig+0x4d0>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a18      	ldr	r2, [pc, #96]	; (8004674 <HAL_RCC_OscConfig+0x4d0>)
 8004612:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004616:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004618:	f7fd f9e2 	bl	80019e0 <HAL_GetTick>
 800461c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800461e:	e008      	b.n	8004632 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004620:	f7fd f9de 	bl	80019e0 <HAL_GetTick>
 8004624:	4602      	mov	r2, r0
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	1ad3      	subs	r3, r2, r3
 800462a:	2b02      	cmp	r3, #2
 800462c:	d901      	bls.n	8004632 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800462e:	2303      	movs	r3, #3
 8004630:	e05f      	b.n	80046f2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004632:	4b10      	ldr	r3, [pc, #64]	; (8004674 <HAL_RCC_OscConfig+0x4d0>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800463a:	2b00      	cmp	r3, #0
 800463c:	d0f0      	beq.n	8004620 <HAL_RCC_OscConfig+0x47c>
 800463e:	e057      	b.n	80046f0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004640:	4b0c      	ldr	r3, [pc, #48]	; (8004674 <HAL_RCC_OscConfig+0x4d0>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a0b      	ldr	r2, [pc, #44]	; (8004674 <HAL_RCC_OscConfig+0x4d0>)
 8004646:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800464a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800464c:	f7fd f9c8 	bl	80019e0 <HAL_GetTick>
 8004650:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004652:	e008      	b.n	8004666 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004654:	f7fd f9c4 	bl	80019e0 <HAL_GetTick>
 8004658:	4602      	mov	r2, r0
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	1ad3      	subs	r3, r2, r3
 800465e:	2b02      	cmp	r3, #2
 8004660:	d901      	bls.n	8004666 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004662:	2303      	movs	r3, #3
 8004664:	e045      	b.n	80046f2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004666:	4b03      	ldr	r3, [pc, #12]	; (8004674 <HAL_RCC_OscConfig+0x4d0>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800466e:	2b00      	cmp	r3, #0
 8004670:	d1f0      	bne.n	8004654 <HAL_RCC_OscConfig+0x4b0>
 8004672:	e03d      	b.n	80046f0 <HAL_RCC_OscConfig+0x54c>
 8004674:	40023800 	.word	0x40023800
 8004678:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800467c:	4b1f      	ldr	r3, [pc, #124]	; (80046fc <HAL_RCC_OscConfig+0x558>)
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	699b      	ldr	r3, [r3, #24]
 8004686:	2b01      	cmp	r3, #1
 8004688:	d030      	beq.n	80046ec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004694:	429a      	cmp	r2, r3
 8004696:	d129      	bne.n	80046ec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046a2:	429a      	cmp	r2, r3
 80046a4:	d122      	bne.n	80046ec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80046a6:	68fa      	ldr	r2, [r7, #12]
 80046a8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80046ac:	4013      	ands	r3, r2
 80046ae:	687a      	ldr	r2, [r7, #4]
 80046b0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80046b2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d119      	bne.n	80046ec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046c2:	085b      	lsrs	r3, r3, #1
 80046c4:	3b01      	subs	r3, #1
 80046c6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80046c8:	429a      	cmp	r2, r3
 80046ca:	d10f      	bne.n	80046ec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046d6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80046d8:	429a      	cmp	r2, r3
 80046da:	d107      	bne.n	80046ec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046e6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80046e8:	429a      	cmp	r2, r3
 80046ea:	d001      	beq.n	80046f0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	e000      	b.n	80046f2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80046f0:	2300      	movs	r3, #0
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	3718      	adds	r7, #24
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}
 80046fa:	bf00      	nop
 80046fc:	40023800 	.word	0x40023800

08004700 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b084      	sub	sp, #16
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
 8004708:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800470a:	2300      	movs	r3, #0
 800470c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d101      	bne.n	8004718 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004714:	2301      	movs	r3, #1
 8004716:	e0d0      	b.n	80048ba <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004718:	4b6a      	ldr	r3, [pc, #424]	; (80048c4 <HAL_RCC_ClockConfig+0x1c4>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f003 030f 	and.w	r3, r3, #15
 8004720:	683a      	ldr	r2, [r7, #0]
 8004722:	429a      	cmp	r2, r3
 8004724:	d910      	bls.n	8004748 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004726:	4b67      	ldr	r3, [pc, #412]	; (80048c4 <HAL_RCC_ClockConfig+0x1c4>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f023 020f 	bic.w	r2, r3, #15
 800472e:	4965      	ldr	r1, [pc, #404]	; (80048c4 <HAL_RCC_ClockConfig+0x1c4>)
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	4313      	orrs	r3, r2
 8004734:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004736:	4b63      	ldr	r3, [pc, #396]	; (80048c4 <HAL_RCC_ClockConfig+0x1c4>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f003 030f 	and.w	r3, r3, #15
 800473e:	683a      	ldr	r2, [r7, #0]
 8004740:	429a      	cmp	r2, r3
 8004742:	d001      	beq.n	8004748 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	e0b8      	b.n	80048ba <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f003 0302 	and.w	r3, r3, #2
 8004750:	2b00      	cmp	r3, #0
 8004752:	d020      	beq.n	8004796 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f003 0304 	and.w	r3, r3, #4
 800475c:	2b00      	cmp	r3, #0
 800475e:	d005      	beq.n	800476c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004760:	4b59      	ldr	r3, [pc, #356]	; (80048c8 <HAL_RCC_ClockConfig+0x1c8>)
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	4a58      	ldr	r2, [pc, #352]	; (80048c8 <HAL_RCC_ClockConfig+0x1c8>)
 8004766:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800476a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f003 0308 	and.w	r3, r3, #8
 8004774:	2b00      	cmp	r3, #0
 8004776:	d005      	beq.n	8004784 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004778:	4b53      	ldr	r3, [pc, #332]	; (80048c8 <HAL_RCC_ClockConfig+0x1c8>)
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	4a52      	ldr	r2, [pc, #328]	; (80048c8 <HAL_RCC_ClockConfig+0x1c8>)
 800477e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004782:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004784:	4b50      	ldr	r3, [pc, #320]	; (80048c8 <HAL_RCC_ClockConfig+0x1c8>)
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	494d      	ldr	r1, [pc, #308]	; (80048c8 <HAL_RCC_ClockConfig+0x1c8>)
 8004792:	4313      	orrs	r3, r2
 8004794:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f003 0301 	and.w	r3, r3, #1
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d040      	beq.n	8004824 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	2b01      	cmp	r3, #1
 80047a8:	d107      	bne.n	80047ba <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047aa:	4b47      	ldr	r3, [pc, #284]	; (80048c8 <HAL_RCC_ClockConfig+0x1c8>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d115      	bne.n	80047e2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	e07f      	b.n	80048ba <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	2b02      	cmp	r3, #2
 80047c0:	d107      	bne.n	80047d2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047c2:	4b41      	ldr	r3, [pc, #260]	; (80048c8 <HAL_RCC_ClockConfig+0x1c8>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d109      	bne.n	80047e2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	e073      	b.n	80048ba <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047d2:	4b3d      	ldr	r3, [pc, #244]	; (80048c8 <HAL_RCC_ClockConfig+0x1c8>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f003 0302 	and.w	r3, r3, #2
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d101      	bne.n	80047e2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	e06b      	b.n	80048ba <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047e2:	4b39      	ldr	r3, [pc, #228]	; (80048c8 <HAL_RCC_ClockConfig+0x1c8>)
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	f023 0203 	bic.w	r2, r3, #3
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	4936      	ldr	r1, [pc, #216]	; (80048c8 <HAL_RCC_ClockConfig+0x1c8>)
 80047f0:	4313      	orrs	r3, r2
 80047f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047f4:	f7fd f8f4 	bl	80019e0 <HAL_GetTick>
 80047f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047fa:	e00a      	b.n	8004812 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047fc:	f7fd f8f0 	bl	80019e0 <HAL_GetTick>
 8004800:	4602      	mov	r2, r0
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	1ad3      	subs	r3, r2, r3
 8004806:	f241 3288 	movw	r2, #5000	; 0x1388
 800480a:	4293      	cmp	r3, r2
 800480c:	d901      	bls.n	8004812 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800480e:	2303      	movs	r3, #3
 8004810:	e053      	b.n	80048ba <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004812:	4b2d      	ldr	r3, [pc, #180]	; (80048c8 <HAL_RCC_ClockConfig+0x1c8>)
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	f003 020c 	and.w	r2, r3, #12
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	009b      	lsls	r3, r3, #2
 8004820:	429a      	cmp	r2, r3
 8004822:	d1eb      	bne.n	80047fc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004824:	4b27      	ldr	r3, [pc, #156]	; (80048c4 <HAL_RCC_ClockConfig+0x1c4>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f003 030f 	and.w	r3, r3, #15
 800482c:	683a      	ldr	r2, [r7, #0]
 800482e:	429a      	cmp	r2, r3
 8004830:	d210      	bcs.n	8004854 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004832:	4b24      	ldr	r3, [pc, #144]	; (80048c4 <HAL_RCC_ClockConfig+0x1c4>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f023 020f 	bic.w	r2, r3, #15
 800483a:	4922      	ldr	r1, [pc, #136]	; (80048c4 <HAL_RCC_ClockConfig+0x1c4>)
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	4313      	orrs	r3, r2
 8004840:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004842:	4b20      	ldr	r3, [pc, #128]	; (80048c4 <HAL_RCC_ClockConfig+0x1c4>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f003 030f 	and.w	r3, r3, #15
 800484a:	683a      	ldr	r2, [r7, #0]
 800484c:	429a      	cmp	r2, r3
 800484e:	d001      	beq.n	8004854 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004850:	2301      	movs	r3, #1
 8004852:	e032      	b.n	80048ba <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 0304 	and.w	r3, r3, #4
 800485c:	2b00      	cmp	r3, #0
 800485e:	d008      	beq.n	8004872 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004860:	4b19      	ldr	r3, [pc, #100]	; (80048c8 <HAL_RCC_ClockConfig+0x1c8>)
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	68db      	ldr	r3, [r3, #12]
 800486c:	4916      	ldr	r1, [pc, #88]	; (80048c8 <HAL_RCC_ClockConfig+0x1c8>)
 800486e:	4313      	orrs	r3, r2
 8004870:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f003 0308 	and.w	r3, r3, #8
 800487a:	2b00      	cmp	r3, #0
 800487c:	d009      	beq.n	8004892 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800487e:	4b12      	ldr	r3, [pc, #72]	; (80048c8 <HAL_RCC_ClockConfig+0x1c8>)
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	691b      	ldr	r3, [r3, #16]
 800488a:	00db      	lsls	r3, r3, #3
 800488c:	490e      	ldr	r1, [pc, #56]	; (80048c8 <HAL_RCC_ClockConfig+0x1c8>)
 800488e:	4313      	orrs	r3, r2
 8004890:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004892:	f000 f821 	bl	80048d8 <HAL_RCC_GetSysClockFreq>
 8004896:	4602      	mov	r2, r0
 8004898:	4b0b      	ldr	r3, [pc, #44]	; (80048c8 <HAL_RCC_ClockConfig+0x1c8>)
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	091b      	lsrs	r3, r3, #4
 800489e:	f003 030f 	and.w	r3, r3, #15
 80048a2:	490a      	ldr	r1, [pc, #40]	; (80048cc <HAL_RCC_ClockConfig+0x1cc>)
 80048a4:	5ccb      	ldrb	r3, [r1, r3]
 80048a6:	fa22 f303 	lsr.w	r3, r2, r3
 80048aa:	4a09      	ldr	r2, [pc, #36]	; (80048d0 <HAL_RCC_ClockConfig+0x1d0>)
 80048ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80048ae:	4b09      	ldr	r3, [pc, #36]	; (80048d4 <HAL_RCC_ClockConfig+0x1d4>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4618      	mov	r0, r3
 80048b4:	f7fd f850 	bl	8001958 <HAL_InitTick>

  return HAL_OK;
 80048b8:	2300      	movs	r3, #0
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	3710      	adds	r7, #16
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}
 80048c2:	bf00      	nop
 80048c4:	40023c00 	.word	0x40023c00
 80048c8:	40023800 	.word	0x40023800
 80048cc:	08006e98 	.word	0x08006e98
 80048d0:	20000000 	.word	0x20000000
 80048d4:	20000004 	.word	0x20000004

080048d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048dc:	b094      	sub	sp, #80	; 0x50
 80048de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80048e0:	2300      	movs	r3, #0
 80048e2:	647b      	str	r3, [r7, #68]	; 0x44
 80048e4:	2300      	movs	r3, #0
 80048e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048e8:	2300      	movs	r3, #0
 80048ea:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80048ec:	2300      	movs	r3, #0
 80048ee:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80048f0:	4b79      	ldr	r3, [pc, #484]	; (8004ad8 <HAL_RCC_GetSysClockFreq+0x200>)
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	f003 030c 	and.w	r3, r3, #12
 80048f8:	2b08      	cmp	r3, #8
 80048fa:	d00d      	beq.n	8004918 <HAL_RCC_GetSysClockFreq+0x40>
 80048fc:	2b08      	cmp	r3, #8
 80048fe:	f200 80e1 	bhi.w	8004ac4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004902:	2b00      	cmp	r3, #0
 8004904:	d002      	beq.n	800490c <HAL_RCC_GetSysClockFreq+0x34>
 8004906:	2b04      	cmp	r3, #4
 8004908:	d003      	beq.n	8004912 <HAL_RCC_GetSysClockFreq+0x3a>
 800490a:	e0db      	b.n	8004ac4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800490c:	4b73      	ldr	r3, [pc, #460]	; (8004adc <HAL_RCC_GetSysClockFreq+0x204>)
 800490e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004910:	e0db      	b.n	8004aca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004912:	4b73      	ldr	r3, [pc, #460]	; (8004ae0 <HAL_RCC_GetSysClockFreq+0x208>)
 8004914:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004916:	e0d8      	b.n	8004aca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004918:	4b6f      	ldr	r3, [pc, #444]	; (8004ad8 <HAL_RCC_GetSysClockFreq+0x200>)
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004920:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004922:	4b6d      	ldr	r3, [pc, #436]	; (8004ad8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800492a:	2b00      	cmp	r3, #0
 800492c:	d063      	beq.n	80049f6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800492e:	4b6a      	ldr	r3, [pc, #424]	; (8004ad8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	099b      	lsrs	r3, r3, #6
 8004934:	2200      	movs	r2, #0
 8004936:	63bb      	str	r3, [r7, #56]	; 0x38
 8004938:	63fa      	str	r2, [r7, #60]	; 0x3c
 800493a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800493c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004940:	633b      	str	r3, [r7, #48]	; 0x30
 8004942:	2300      	movs	r3, #0
 8004944:	637b      	str	r3, [r7, #52]	; 0x34
 8004946:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800494a:	4622      	mov	r2, r4
 800494c:	462b      	mov	r3, r5
 800494e:	f04f 0000 	mov.w	r0, #0
 8004952:	f04f 0100 	mov.w	r1, #0
 8004956:	0159      	lsls	r1, r3, #5
 8004958:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800495c:	0150      	lsls	r0, r2, #5
 800495e:	4602      	mov	r2, r0
 8004960:	460b      	mov	r3, r1
 8004962:	4621      	mov	r1, r4
 8004964:	1a51      	subs	r1, r2, r1
 8004966:	6139      	str	r1, [r7, #16]
 8004968:	4629      	mov	r1, r5
 800496a:	eb63 0301 	sbc.w	r3, r3, r1
 800496e:	617b      	str	r3, [r7, #20]
 8004970:	f04f 0200 	mov.w	r2, #0
 8004974:	f04f 0300 	mov.w	r3, #0
 8004978:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800497c:	4659      	mov	r1, fp
 800497e:	018b      	lsls	r3, r1, #6
 8004980:	4651      	mov	r1, sl
 8004982:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004986:	4651      	mov	r1, sl
 8004988:	018a      	lsls	r2, r1, #6
 800498a:	4651      	mov	r1, sl
 800498c:	ebb2 0801 	subs.w	r8, r2, r1
 8004990:	4659      	mov	r1, fp
 8004992:	eb63 0901 	sbc.w	r9, r3, r1
 8004996:	f04f 0200 	mov.w	r2, #0
 800499a:	f04f 0300 	mov.w	r3, #0
 800499e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80049a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80049a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80049aa:	4690      	mov	r8, r2
 80049ac:	4699      	mov	r9, r3
 80049ae:	4623      	mov	r3, r4
 80049b0:	eb18 0303 	adds.w	r3, r8, r3
 80049b4:	60bb      	str	r3, [r7, #8]
 80049b6:	462b      	mov	r3, r5
 80049b8:	eb49 0303 	adc.w	r3, r9, r3
 80049bc:	60fb      	str	r3, [r7, #12]
 80049be:	f04f 0200 	mov.w	r2, #0
 80049c2:	f04f 0300 	mov.w	r3, #0
 80049c6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80049ca:	4629      	mov	r1, r5
 80049cc:	024b      	lsls	r3, r1, #9
 80049ce:	4621      	mov	r1, r4
 80049d0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80049d4:	4621      	mov	r1, r4
 80049d6:	024a      	lsls	r2, r1, #9
 80049d8:	4610      	mov	r0, r2
 80049da:	4619      	mov	r1, r3
 80049dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049de:	2200      	movs	r2, #0
 80049e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80049e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80049e4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80049e8:	f7fb fc82 	bl	80002f0 <__aeabi_uldivmod>
 80049ec:	4602      	mov	r2, r0
 80049ee:	460b      	mov	r3, r1
 80049f0:	4613      	mov	r3, r2
 80049f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049f4:	e058      	b.n	8004aa8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049f6:	4b38      	ldr	r3, [pc, #224]	; (8004ad8 <HAL_RCC_GetSysClockFreq+0x200>)
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	099b      	lsrs	r3, r3, #6
 80049fc:	2200      	movs	r2, #0
 80049fe:	4618      	mov	r0, r3
 8004a00:	4611      	mov	r1, r2
 8004a02:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004a06:	623b      	str	r3, [r7, #32]
 8004a08:	2300      	movs	r3, #0
 8004a0a:	627b      	str	r3, [r7, #36]	; 0x24
 8004a0c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004a10:	4642      	mov	r2, r8
 8004a12:	464b      	mov	r3, r9
 8004a14:	f04f 0000 	mov.w	r0, #0
 8004a18:	f04f 0100 	mov.w	r1, #0
 8004a1c:	0159      	lsls	r1, r3, #5
 8004a1e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a22:	0150      	lsls	r0, r2, #5
 8004a24:	4602      	mov	r2, r0
 8004a26:	460b      	mov	r3, r1
 8004a28:	4641      	mov	r1, r8
 8004a2a:	ebb2 0a01 	subs.w	sl, r2, r1
 8004a2e:	4649      	mov	r1, r9
 8004a30:	eb63 0b01 	sbc.w	fp, r3, r1
 8004a34:	f04f 0200 	mov.w	r2, #0
 8004a38:	f04f 0300 	mov.w	r3, #0
 8004a3c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004a40:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004a44:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004a48:	ebb2 040a 	subs.w	r4, r2, sl
 8004a4c:	eb63 050b 	sbc.w	r5, r3, fp
 8004a50:	f04f 0200 	mov.w	r2, #0
 8004a54:	f04f 0300 	mov.w	r3, #0
 8004a58:	00eb      	lsls	r3, r5, #3
 8004a5a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a5e:	00e2      	lsls	r2, r4, #3
 8004a60:	4614      	mov	r4, r2
 8004a62:	461d      	mov	r5, r3
 8004a64:	4643      	mov	r3, r8
 8004a66:	18e3      	adds	r3, r4, r3
 8004a68:	603b      	str	r3, [r7, #0]
 8004a6a:	464b      	mov	r3, r9
 8004a6c:	eb45 0303 	adc.w	r3, r5, r3
 8004a70:	607b      	str	r3, [r7, #4]
 8004a72:	f04f 0200 	mov.w	r2, #0
 8004a76:	f04f 0300 	mov.w	r3, #0
 8004a7a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004a7e:	4629      	mov	r1, r5
 8004a80:	028b      	lsls	r3, r1, #10
 8004a82:	4621      	mov	r1, r4
 8004a84:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004a88:	4621      	mov	r1, r4
 8004a8a:	028a      	lsls	r2, r1, #10
 8004a8c:	4610      	mov	r0, r2
 8004a8e:	4619      	mov	r1, r3
 8004a90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a92:	2200      	movs	r2, #0
 8004a94:	61bb      	str	r3, [r7, #24]
 8004a96:	61fa      	str	r2, [r7, #28]
 8004a98:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a9c:	f7fb fc28 	bl	80002f0 <__aeabi_uldivmod>
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	460b      	mov	r3, r1
 8004aa4:	4613      	mov	r3, r2
 8004aa6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004aa8:	4b0b      	ldr	r3, [pc, #44]	; (8004ad8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	0c1b      	lsrs	r3, r3, #16
 8004aae:	f003 0303 	and.w	r3, r3, #3
 8004ab2:	3301      	adds	r3, #1
 8004ab4:	005b      	lsls	r3, r3, #1
 8004ab6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8004ab8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004aba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004abc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ac0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004ac2:	e002      	b.n	8004aca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004ac4:	4b05      	ldr	r3, [pc, #20]	; (8004adc <HAL_RCC_GetSysClockFreq+0x204>)
 8004ac6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004ac8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004aca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	3750      	adds	r7, #80	; 0x50
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ad6:	bf00      	nop
 8004ad8:	40023800 	.word	0x40023800
 8004adc:	00f42400 	.word	0x00f42400
 8004ae0:	007a1200 	.word	0x007a1200

08004ae4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ae8:	4b03      	ldr	r3, [pc, #12]	; (8004af8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004aea:	681b      	ldr	r3, [r3, #0]
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	46bd      	mov	sp, r7
 8004af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af4:	4770      	bx	lr
 8004af6:	bf00      	nop
 8004af8:	20000000 	.word	0x20000000

08004afc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004b00:	f7ff fff0 	bl	8004ae4 <HAL_RCC_GetHCLKFreq>
 8004b04:	4602      	mov	r2, r0
 8004b06:	4b05      	ldr	r3, [pc, #20]	; (8004b1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b08:	689b      	ldr	r3, [r3, #8]
 8004b0a:	0a9b      	lsrs	r3, r3, #10
 8004b0c:	f003 0307 	and.w	r3, r3, #7
 8004b10:	4903      	ldr	r1, [pc, #12]	; (8004b20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b12:	5ccb      	ldrb	r3, [r1, r3]
 8004b14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	bd80      	pop	{r7, pc}
 8004b1c:	40023800 	.word	0x40023800
 8004b20:	08006ea8 	.word	0x08006ea8

08004b24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004b28:	f7ff ffdc 	bl	8004ae4 <HAL_RCC_GetHCLKFreq>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	4b05      	ldr	r3, [pc, #20]	; (8004b44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004b30:	689b      	ldr	r3, [r3, #8]
 8004b32:	0b5b      	lsrs	r3, r3, #13
 8004b34:	f003 0307 	and.w	r3, r3, #7
 8004b38:	4903      	ldr	r1, [pc, #12]	; (8004b48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b3a:	5ccb      	ldrb	r3, [r1, r3]
 8004b3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	bd80      	pop	{r7, pc}
 8004b44:	40023800 	.word	0x40023800
 8004b48:	08006ea8 	.word	0x08006ea8

08004b4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b082      	sub	sp, #8
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d101      	bne.n	8004b5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	e049      	b.n	8004bf2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b64:	b2db      	uxtb	r3, r3
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d106      	bne.n	8004b78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f7fc fd2a 	bl	80015cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2202      	movs	r2, #2
 8004b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	3304      	adds	r3, #4
 8004b88:	4619      	mov	r1, r3
 8004b8a:	4610      	mov	r0, r2
 8004b8c:	f000 f9fc 	bl	8004f88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2201      	movs	r2, #1
 8004b94:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2201      	movs	r2, #1
 8004bac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2201      	movs	r2, #1
 8004bcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2201      	movs	r2, #1
 8004bdc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2201      	movs	r2, #1
 8004be4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2201      	movs	r2, #1
 8004bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004bf0:	2300      	movs	r3, #0
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3708      	adds	r7, #8
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}

08004bfa <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004bfa:	b580      	push	{r7, lr}
 8004bfc:	b082      	sub	sp, #8
 8004bfe:	af00      	add	r7, sp, #0
 8004c00:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d101      	bne.n	8004c0c <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	e049      	b.n	8004ca0 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c12:	b2db      	uxtb	r3, r3
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d106      	bne.n	8004c26 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004c20:	6878      	ldr	r0, [r7, #4]
 8004c22:	f000 f841 	bl	8004ca8 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2202      	movs	r2, #2
 8004c2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	3304      	adds	r3, #4
 8004c36:	4619      	mov	r1, r3
 8004c38:	4610      	mov	r0, r2
 8004c3a:	f000 f9a5 	bl	8004f88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2201      	movs	r2, #1
 8004c42:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2201      	movs	r2, #1
 8004c4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2201      	movs	r2, #1
 8004c52:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2201      	movs	r2, #1
 8004c5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2201      	movs	r2, #1
 8004c62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2201      	movs	r2, #1
 8004c6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2201      	movs	r2, #1
 8004c72:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2201      	movs	r2, #1
 8004c7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2201      	movs	r2, #1
 8004c82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2201      	movs	r2, #1
 8004c8a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2201      	movs	r2, #1
 8004c92:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2201      	movs	r2, #1
 8004c9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c9e:	2300      	movs	r3, #0
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	3708      	adds	r7, #8
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}

08004ca8 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b083      	sub	sp, #12
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004cb0:	bf00      	nop
 8004cb2:	370c      	adds	r7, #12
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cba:	4770      	bx	lr

08004cbc <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b086      	sub	sp, #24
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	60f8      	str	r0, [r7, #12]
 8004cc4:	60b9      	str	r1, [r7, #8]
 8004cc6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cd2:	2b01      	cmp	r3, #1
 8004cd4:	d101      	bne.n	8004cda <HAL_TIM_IC_ConfigChannel+0x1e>
 8004cd6:	2302      	movs	r3, #2
 8004cd8:	e088      	b.n	8004dec <HAL_TIM_IC_ConfigChannel+0x130>
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	2201      	movs	r2, #1
 8004cde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d11b      	bne.n	8004d20 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8004cf8:	f000 f9e6 	bl	80050c8 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	699a      	ldr	r2, [r3, #24]
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f022 020c 	bic.w	r2, r2, #12
 8004d0a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	6999      	ldr	r1, [r3, #24]
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	689a      	ldr	r2, [r3, #8]
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	430a      	orrs	r2, r1
 8004d1c:	619a      	str	r2, [r3, #24]
 8004d1e:	e060      	b.n	8004de2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2b04      	cmp	r3, #4
 8004d24:	d11c      	bne.n	8004d60 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8004d36:	f000 fa6a 	bl	800520e <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	699a      	ldr	r2, [r3, #24]
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004d48:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	6999      	ldr	r1, [r3, #24]
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	021a      	lsls	r2, r3, #8
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	430a      	orrs	r2, r1
 8004d5c:	619a      	str	r2, [r3, #24]
 8004d5e:	e040      	b.n	8004de2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2b08      	cmp	r3, #8
 8004d64:	d11b      	bne.n	8004d9e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8004d76:	f000 fab7 	bl	80052e8 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	69da      	ldr	r2, [r3, #28]
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f022 020c 	bic.w	r2, r2, #12
 8004d88:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	69d9      	ldr	r1, [r3, #28]
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	689a      	ldr	r2, [r3, #8]
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	430a      	orrs	r2, r1
 8004d9a:	61da      	str	r2, [r3, #28]
 8004d9c:	e021      	b.n	8004de2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2b0c      	cmp	r3, #12
 8004da2:	d11c      	bne.n	8004dde <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8004db4:	f000 fad4 	bl	8005360 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	69da      	ldr	r2, [r3, #28]
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004dc6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	69d9      	ldr	r1, [r3, #28]
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	021a      	lsls	r2, r3, #8
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	430a      	orrs	r2, r1
 8004dda:	61da      	str	r2, [r3, #28]
 8004ddc:	e001      	b.n	8004de2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2200      	movs	r2, #0
 8004de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004dea:	7dfb      	ldrb	r3, [r7, #23]
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	3718      	adds	r7, #24
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}

08004df4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b084      	sub	sp, #16
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
 8004dfc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	d101      	bne.n	8004e10 <HAL_TIM_ConfigClockSource+0x1c>
 8004e0c:	2302      	movs	r3, #2
 8004e0e:	e0b4      	b.n	8004f7a <HAL_TIM_ConfigClockSource+0x186>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2201      	movs	r2, #1
 8004e14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2202      	movs	r2, #2
 8004e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	689b      	ldr	r3, [r3, #8]
 8004e26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004e28:	68ba      	ldr	r2, [r7, #8]
 8004e2a:	4b56      	ldr	r3, [pc, #344]	; (8004f84 <HAL_TIM_ConfigClockSource+0x190>)
 8004e2c:	4013      	ands	r3, r2
 8004e2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e36:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	68ba      	ldr	r2, [r7, #8]
 8004e3e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e48:	d03e      	beq.n	8004ec8 <HAL_TIM_ConfigClockSource+0xd4>
 8004e4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e4e:	f200 8087 	bhi.w	8004f60 <HAL_TIM_ConfigClockSource+0x16c>
 8004e52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e56:	f000 8086 	beq.w	8004f66 <HAL_TIM_ConfigClockSource+0x172>
 8004e5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e5e:	d87f      	bhi.n	8004f60 <HAL_TIM_ConfigClockSource+0x16c>
 8004e60:	2b70      	cmp	r3, #112	; 0x70
 8004e62:	d01a      	beq.n	8004e9a <HAL_TIM_ConfigClockSource+0xa6>
 8004e64:	2b70      	cmp	r3, #112	; 0x70
 8004e66:	d87b      	bhi.n	8004f60 <HAL_TIM_ConfigClockSource+0x16c>
 8004e68:	2b60      	cmp	r3, #96	; 0x60
 8004e6a:	d050      	beq.n	8004f0e <HAL_TIM_ConfigClockSource+0x11a>
 8004e6c:	2b60      	cmp	r3, #96	; 0x60
 8004e6e:	d877      	bhi.n	8004f60 <HAL_TIM_ConfigClockSource+0x16c>
 8004e70:	2b50      	cmp	r3, #80	; 0x50
 8004e72:	d03c      	beq.n	8004eee <HAL_TIM_ConfigClockSource+0xfa>
 8004e74:	2b50      	cmp	r3, #80	; 0x50
 8004e76:	d873      	bhi.n	8004f60 <HAL_TIM_ConfigClockSource+0x16c>
 8004e78:	2b40      	cmp	r3, #64	; 0x40
 8004e7a:	d058      	beq.n	8004f2e <HAL_TIM_ConfigClockSource+0x13a>
 8004e7c:	2b40      	cmp	r3, #64	; 0x40
 8004e7e:	d86f      	bhi.n	8004f60 <HAL_TIM_ConfigClockSource+0x16c>
 8004e80:	2b30      	cmp	r3, #48	; 0x30
 8004e82:	d064      	beq.n	8004f4e <HAL_TIM_ConfigClockSource+0x15a>
 8004e84:	2b30      	cmp	r3, #48	; 0x30
 8004e86:	d86b      	bhi.n	8004f60 <HAL_TIM_ConfigClockSource+0x16c>
 8004e88:	2b20      	cmp	r3, #32
 8004e8a:	d060      	beq.n	8004f4e <HAL_TIM_ConfigClockSource+0x15a>
 8004e8c:	2b20      	cmp	r3, #32
 8004e8e:	d867      	bhi.n	8004f60 <HAL_TIM_ConfigClockSource+0x16c>
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d05c      	beq.n	8004f4e <HAL_TIM_ConfigClockSource+0x15a>
 8004e94:	2b10      	cmp	r3, #16
 8004e96:	d05a      	beq.n	8004f4e <HAL_TIM_ConfigClockSource+0x15a>
 8004e98:	e062      	b.n	8004f60 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004eaa:	f000 fab1 	bl	8005410 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004ebc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	68ba      	ldr	r2, [r7, #8]
 8004ec4:	609a      	str	r2, [r3, #8]
      break;
 8004ec6:	e04f      	b.n	8004f68 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004ed8:	f000 fa9a 	bl	8005410 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	689a      	ldr	r2, [r3, #8]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004eea:	609a      	str	r2, [r3, #8]
      break;
 8004eec:	e03c      	b.n	8004f68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004efa:	461a      	mov	r2, r3
 8004efc:	f000 f958 	bl	80051b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	2150      	movs	r1, #80	; 0x50
 8004f06:	4618      	mov	r0, r3
 8004f08:	f000 fa67 	bl	80053da <TIM_ITRx_SetConfig>
      break;
 8004f0c:	e02c      	b.n	8004f68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f1a:	461a      	mov	r2, r3
 8004f1c:	f000 f9b4 	bl	8005288 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	2160      	movs	r1, #96	; 0x60
 8004f26:	4618      	mov	r0, r3
 8004f28:	f000 fa57 	bl	80053da <TIM_ITRx_SetConfig>
      break;
 8004f2c:	e01c      	b.n	8004f68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f3a:	461a      	mov	r2, r3
 8004f3c:	f000 f938 	bl	80051b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	2140      	movs	r1, #64	; 0x40
 8004f46:	4618      	mov	r0, r3
 8004f48:	f000 fa47 	bl	80053da <TIM_ITRx_SetConfig>
      break;
 8004f4c:	e00c      	b.n	8004f68 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681a      	ldr	r2, [r3, #0]
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4619      	mov	r1, r3
 8004f58:	4610      	mov	r0, r2
 8004f5a:	f000 fa3e 	bl	80053da <TIM_ITRx_SetConfig>
      break;
 8004f5e:	e003      	b.n	8004f68 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004f60:	2301      	movs	r3, #1
 8004f62:	73fb      	strb	r3, [r7, #15]
      break;
 8004f64:	e000      	b.n	8004f68 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004f66:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2200      	movs	r2, #0
 8004f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004f78:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	3710      	adds	r7, #16
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}
 8004f82:	bf00      	nop
 8004f84:	fffeff88 	.word	0xfffeff88

08004f88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b085      	sub	sp, #20
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
 8004f90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	4a40      	ldr	r2, [pc, #256]	; (800509c <TIM_Base_SetConfig+0x114>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d013      	beq.n	8004fc8 <TIM_Base_SetConfig+0x40>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fa6:	d00f      	beq.n	8004fc8 <TIM_Base_SetConfig+0x40>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	4a3d      	ldr	r2, [pc, #244]	; (80050a0 <TIM_Base_SetConfig+0x118>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d00b      	beq.n	8004fc8 <TIM_Base_SetConfig+0x40>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	4a3c      	ldr	r2, [pc, #240]	; (80050a4 <TIM_Base_SetConfig+0x11c>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d007      	beq.n	8004fc8 <TIM_Base_SetConfig+0x40>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	4a3b      	ldr	r2, [pc, #236]	; (80050a8 <TIM_Base_SetConfig+0x120>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d003      	beq.n	8004fc8 <TIM_Base_SetConfig+0x40>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	4a3a      	ldr	r2, [pc, #232]	; (80050ac <TIM_Base_SetConfig+0x124>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d108      	bne.n	8004fda <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	68fa      	ldr	r2, [r7, #12]
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	4a2f      	ldr	r2, [pc, #188]	; (800509c <TIM_Base_SetConfig+0x114>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d02b      	beq.n	800503a <TIM_Base_SetConfig+0xb2>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fe8:	d027      	beq.n	800503a <TIM_Base_SetConfig+0xb2>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	4a2c      	ldr	r2, [pc, #176]	; (80050a0 <TIM_Base_SetConfig+0x118>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d023      	beq.n	800503a <TIM_Base_SetConfig+0xb2>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	4a2b      	ldr	r2, [pc, #172]	; (80050a4 <TIM_Base_SetConfig+0x11c>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d01f      	beq.n	800503a <TIM_Base_SetConfig+0xb2>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	4a2a      	ldr	r2, [pc, #168]	; (80050a8 <TIM_Base_SetConfig+0x120>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d01b      	beq.n	800503a <TIM_Base_SetConfig+0xb2>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	4a29      	ldr	r2, [pc, #164]	; (80050ac <TIM_Base_SetConfig+0x124>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d017      	beq.n	800503a <TIM_Base_SetConfig+0xb2>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	4a28      	ldr	r2, [pc, #160]	; (80050b0 <TIM_Base_SetConfig+0x128>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d013      	beq.n	800503a <TIM_Base_SetConfig+0xb2>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	4a27      	ldr	r2, [pc, #156]	; (80050b4 <TIM_Base_SetConfig+0x12c>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d00f      	beq.n	800503a <TIM_Base_SetConfig+0xb2>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	4a26      	ldr	r2, [pc, #152]	; (80050b8 <TIM_Base_SetConfig+0x130>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d00b      	beq.n	800503a <TIM_Base_SetConfig+0xb2>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	4a25      	ldr	r2, [pc, #148]	; (80050bc <TIM_Base_SetConfig+0x134>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d007      	beq.n	800503a <TIM_Base_SetConfig+0xb2>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	4a24      	ldr	r2, [pc, #144]	; (80050c0 <TIM_Base_SetConfig+0x138>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d003      	beq.n	800503a <TIM_Base_SetConfig+0xb2>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	4a23      	ldr	r2, [pc, #140]	; (80050c4 <TIM_Base_SetConfig+0x13c>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d108      	bne.n	800504c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005040:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	68db      	ldr	r3, [r3, #12]
 8005046:	68fa      	ldr	r2, [r7, #12]
 8005048:	4313      	orrs	r3, r2
 800504a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	695b      	ldr	r3, [r3, #20]
 8005056:	4313      	orrs	r3, r2
 8005058:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	68fa      	ldr	r2, [r7, #12]
 800505e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	689a      	ldr	r2, [r3, #8]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	681a      	ldr	r2, [r3, #0]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	4a0a      	ldr	r2, [pc, #40]	; (800509c <TIM_Base_SetConfig+0x114>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d003      	beq.n	8005080 <TIM_Base_SetConfig+0xf8>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	4a0c      	ldr	r2, [pc, #48]	; (80050ac <TIM_Base_SetConfig+0x124>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d103      	bne.n	8005088 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	691a      	ldr	r2, [r3, #16]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2201      	movs	r2, #1
 800508c:	615a      	str	r2, [r3, #20]
}
 800508e:	bf00      	nop
 8005090:	3714      	adds	r7, #20
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr
 800509a:	bf00      	nop
 800509c:	40010000 	.word	0x40010000
 80050a0:	40000400 	.word	0x40000400
 80050a4:	40000800 	.word	0x40000800
 80050a8:	40000c00 	.word	0x40000c00
 80050ac:	40010400 	.word	0x40010400
 80050b0:	40014000 	.word	0x40014000
 80050b4:	40014400 	.word	0x40014400
 80050b8:	40014800 	.word	0x40014800
 80050bc:	40001800 	.word	0x40001800
 80050c0:	40001c00 	.word	0x40001c00
 80050c4:	40002000 	.word	0x40002000

080050c8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b087      	sub	sp, #28
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	60f8      	str	r0, [r7, #12]
 80050d0:	60b9      	str	r1, [r7, #8]
 80050d2:	607a      	str	r2, [r7, #4]
 80050d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	6a1b      	ldr	r3, [r3, #32]
 80050da:	f023 0201 	bic.w	r2, r3, #1
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	699b      	ldr	r3, [r3, #24]
 80050e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	6a1b      	ldr	r3, [r3, #32]
 80050ec:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	4a28      	ldr	r2, [pc, #160]	; (8005194 <TIM_TI1_SetConfig+0xcc>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d01b      	beq.n	800512e <TIM_TI1_SetConfig+0x66>
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050fc:	d017      	beq.n	800512e <TIM_TI1_SetConfig+0x66>
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	4a25      	ldr	r2, [pc, #148]	; (8005198 <TIM_TI1_SetConfig+0xd0>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d013      	beq.n	800512e <TIM_TI1_SetConfig+0x66>
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	4a24      	ldr	r2, [pc, #144]	; (800519c <TIM_TI1_SetConfig+0xd4>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d00f      	beq.n	800512e <TIM_TI1_SetConfig+0x66>
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	4a23      	ldr	r2, [pc, #140]	; (80051a0 <TIM_TI1_SetConfig+0xd8>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d00b      	beq.n	800512e <TIM_TI1_SetConfig+0x66>
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	4a22      	ldr	r2, [pc, #136]	; (80051a4 <TIM_TI1_SetConfig+0xdc>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d007      	beq.n	800512e <TIM_TI1_SetConfig+0x66>
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	4a21      	ldr	r2, [pc, #132]	; (80051a8 <TIM_TI1_SetConfig+0xe0>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d003      	beq.n	800512e <TIM_TI1_SetConfig+0x66>
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	4a20      	ldr	r2, [pc, #128]	; (80051ac <TIM_TI1_SetConfig+0xe4>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d101      	bne.n	8005132 <TIM_TI1_SetConfig+0x6a>
 800512e:	2301      	movs	r3, #1
 8005130:	e000      	b.n	8005134 <TIM_TI1_SetConfig+0x6c>
 8005132:	2300      	movs	r3, #0
 8005134:	2b00      	cmp	r3, #0
 8005136:	d008      	beq.n	800514a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	f023 0303 	bic.w	r3, r3, #3
 800513e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005140:	697a      	ldr	r2, [r7, #20]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	4313      	orrs	r3, r2
 8005146:	617b      	str	r3, [r7, #20]
 8005148:	e003      	b.n	8005152 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	f043 0301 	orr.w	r3, r3, #1
 8005150:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005158:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	011b      	lsls	r3, r3, #4
 800515e:	b2db      	uxtb	r3, r3
 8005160:	697a      	ldr	r2, [r7, #20]
 8005162:	4313      	orrs	r3, r2
 8005164:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	f023 030a 	bic.w	r3, r3, #10
 800516c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	f003 030a 	and.w	r3, r3, #10
 8005174:	693a      	ldr	r2, [r7, #16]
 8005176:	4313      	orrs	r3, r2
 8005178:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	697a      	ldr	r2, [r7, #20]
 800517e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	693a      	ldr	r2, [r7, #16]
 8005184:	621a      	str	r2, [r3, #32]
}
 8005186:	bf00      	nop
 8005188:	371c      	adds	r7, #28
 800518a:	46bd      	mov	sp, r7
 800518c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005190:	4770      	bx	lr
 8005192:	bf00      	nop
 8005194:	40010000 	.word	0x40010000
 8005198:	40000400 	.word	0x40000400
 800519c:	40000800 	.word	0x40000800
 80051a0:	40000c00 	.word	0x40000c00
 80051a4:	40010400 	.word	0x40010400
 80051a8:	40014000 	.word	0x40014000
 80051ac:	40001800 	.word	0x40001800

080051b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b087      	sub	sp, #28
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	60f8      	str	r0, [r7, #12]
 80051b8:	60b9      	str	r1, [r7, #8]
 80051ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	6a1b      	ldr	r3, [r3, #32]
 80051c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	6a1b      	ldr	r3, [r3, #32]
 80051c6:	f023 0201 	bic.w	r2, r3, #1
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	699b      	ldr	r3, [r3, #24]
 80051d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80051da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	011b      	lsls	r3, r3, #4
 80051e0:	693a      	ldr	r2, [r7, #16]
 80051e2:	4313      	orrs	r3, r2
 80051e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	f023 030a 	bic.w	r3, r3, #10
 80051ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80051ee:	697a      	ldr	r2, [r7, #20]
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	4313      	orrs	r3, r2
 80051f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	693a      	ldr	r2, [r7, #16]
 80051fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	697a      	ldr	r2, [r7, #20]
 8005200:	621a      	str	r2, [r3, #32]
}
 8005202:	bf00      	nop
 8005204:	371c      	adds	r7, #28
 8005206:	46bd      	mov	sp, r7
 8005208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520c:	4770      	bx	lr

0800520e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800520e:	b480      	push	{r7}
 8005210:	b087      	sub	sp, #28
 8005212:	af00      	add	r7, sp, #0
 8005214:	60f8      	str	r0, [r7, #12]
 8005216:	60b9      	str	r1, [r7, #8]
 8005218:	607a      	str	r2, [r7, #4]
 800521a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	6a1b      	ldr	r3, [r3, #32]
 8005220:	f023 0210 	bic.w	r2, r3, #16
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	699b      	ldr	r3, [r3, #24]
 800522c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	6a1b      	ldr	r3, [r3, #32]
 8005232:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800523a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	021b      	lsls	r3, r3, #8
 8005240:	697a      	ldr	r2, [r7, #20]
 8005242:	4313      	orrs	r3, r2
 8005244:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800524c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	031b      	lsls	r3, r3, #12
 8005252:	b29b      	uxth	r3, r3
 8005254:	697a      	ldr	r2, [r7, #20]
 8005256:	4313      	orrs	r3, r2
 8005258:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005260:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	011b      	lsls	r3, r3, #4
 8005266:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800526a:	693a      	ldr	r2, [r7, #16]
 800526c:	4313      	orrs	r3, r2
 800526e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	697a      	ldr	r2, [r7, #20]
 8005274:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	693a      	ldr	r2, [r7, #16]
 800527a:	621a      	str	r2, [r3, #32]
}
 800527c:	bf00      	nop
 800527e:	371c      	adds	r7, #28
 8005280:	46bd      	mov	sp, r7
 8005282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005286:	4770      	bx	lr

08005288 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005288:	b480      	push	{r7}
 800528a:	b087      	sub	sp, #28
 800528c:	af00      	add	r7, sp, #0
 800528e:	60f8      	str	r0, [r7, #12]
 8005290:	60b9      	str	r1, [r7, #8]
 8005292:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	6a1b      	ldr	r3, [r3, #32]
 8005298:	f023 0210 	bic.w	r2, r3, #16
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	699b      	ldr	r3, [r3, #24]
 80052a4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	6a1b      	ldr	r3, [r3, #32]
 80052aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80052b2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	031b      	lsls	r3, r3, #12
 80052b8:	697a      	ldr	r2, [r7, #20]
 80052ba:	4313      	orrs	r3, r2
 80052bc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80052c4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	011b      	lsls	r3, r3, #4
 80052ca:	693a      	ldr	r2, [r7, #16]
 80052cc:	4313      	orrs	r3, r2
 80052ce:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	697a      	ldr	r2, [r7, #20]
 80052d4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	693a      	ldr	r2, [r7, #16]
 80052da:	621a      	str	r2, [r3, #32]
}
 80052dc:	bf00      	nop
 80052de:	371c      	adds	r7, #28
 80052e0:	46bd      	mov	sp, r7
 80052e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e6:	4770      	bx	lr

080052e8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b087      	sub	sp, #28
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	60f8      	str	r0, [r7, #12]
 80052f0:	60b9      	str	r1, [r7, #8]
 80052f2:	607a      	str	r2, [r7, #4]
 80052f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	6a1b      	ldr	r3, [r3, #32]
 80052fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	69db      	ldr	r3, [r3, #28]
 8005306:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	6a1b      	ldr	r3, [r3, #32]
 800530c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	f023 0303 	bic.w	r3, r3, #3
 8005314:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005316:	697a      	ldr	r2, [r7, #20]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	4313      	orrs	r3, r2
 800531c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005324:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	011b      	lsls	r3, r3, #4
 800532a:	b2db      	uxtb	r3, r3
 800532c:	697a      	ldr	r2, [r7, #20]
 800532e:	4313      	orrs	r3, r2
 8005330:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005338:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	021b      	lsls	r3, r3, #8
 800533e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005342:	693a      	ldr	r2, [r7, #16]
 8005344:	4313      	orrs	r3, r2
 8005346:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	697a      	ldr	r2, [r7, #20]
 800534c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	693a      	ldr	r2, [r7, #16]
 8005352:	621a      	str	r2, [r3, #32]
}
 8005354:	bf00      	nop
 8005356:	371c      	adds	r7, #28
 8005358:	46bd      	mov	sp, r7
 800535a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535e:	4770      	bx	lr

08005360 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005360:	b480      	push	{r7}
 8005362:	b087      	sub	sp, #28
 8005364:	af00      	add	r7, sp, #0
 8005366:	60f8      	str	r0, [r7, #12]
 8005368:	60b9      	str	r1, [r7, #8]
 800536a:	607a      	str	r2, [r7, #4]
 800536c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	6a1b      	ldr	r3, [r3, #32]
 8005372:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	69db      	ldr	r3, [r3, #28]
 800537e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	6a1b      	ldr	r3, [r3, #32]
 8005384:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800538c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	021b      	lsls	r3, r3, #8
 8005392:	697a      	ldr	r2, [r7, #20]
 8005394:	4313      	orrs	r3, r2
 8005396:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800539e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	031b      	lsls	r3, r3, #12
 80053a4:	b29b      	uxth	r3, r3
 80053a6:	697a      	ldr	r2, [r7, #20]
 80053a8:	4313      	orrs	r3, r2
 80053aa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80053b2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	031b      	lsls	r3, r3, #12
 80053b8:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80053bc:	693a      	ldr	r2, [r7, #16]
 80053be:	4313      	orrs	r3, r2
 80053c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	697a      	ldr	r2, [r7, #20]
 80053c6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	693a      	ldr	r2, [r7, #16]
 80053cc:	621a      	str	r2, [r3, #32]
}
 80053ce:	bf00      	nop
 80053d0:	371c      	adds	r7, #28
 80053d2:	46bd      	mov	sp, r7
 80053d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d8:	4770      	bx	lr

080053da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80053da:	b480      	push	{r7}
 80053dc:	b085      	sub	sp, #20
 80053de:	af00      	add	r7, sp, #0
 80053e0:	6078      	str	r0, [r7, #4]
 80053e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80053f2:	683a      	ldr	r2, [r7, #0]
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	4313      	orrs	r3, r2
 80053f8:	f043 0307 	orr.w	r3, r3, #7
 80053fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	68fa      	ldr	r2, [r7, #12]
 8005402:	609a      	str	r2, [r3, #8]
}
 8005404:	bf00      	nop
 8005406:	3714      	adds	r7, #20
 8005408:	46bd      	mov	sp, r7
 800540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540e:	4770      	bx	lr

08005410 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005410:	b480      	push	{r7}
 8005412:	b087      	sub	sp, #28
 8005414:	af00      	add	r7, sp, #0
 8005416:	60f8      	str	r0, [r7, #12]
 8005418:	60b9      	str	r1, [r7, #8]
 800541a:	607a      	str	r2, [r7, #4]
 800541c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	689b      	ldr	r3, [r3, #8]
 8005422:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800542a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	021a      	lsls	r2, r3, #8
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	431a      	orrs	r2, r3
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	4313      	orrs	r3, r2
 8005438:	697a      	ldr	r2, [r7, #20]
 800543a:	4313      	orrs	r3, r2
 800543c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	697a      	ldr	r2, [r7, #20]
 8005442:	609a      	str	r2, [r3, #8]
}
 8005444:	bf00      	nop
 8005446:	371c      	adds	r7, #28
 8005448:	46bd      	mov	sp, r7
 800544a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544e:	4770      	bx	lr

08005450 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005450:	b480      	push	{r7}
 8005452:	b085      	sub	sp, #20
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
 8005458:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005460:	2b01      	cmp	r3, #1
 8005462:	d101      	bne.n	8005468 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005464:	2302      	movs	r3, #2
 8005466:	e06d      	b.n	8005544 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2201      	movs	r2, #1
 800546c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2202      	movs	r2, #2
 8005474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	689b      	ldr	r3, [r3, #8]
 8005486:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a30      	ldr	r2, [pc, #192]	; (8005550 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d004      	beq.n	800549c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a2f      	ldr	r2, [pc, #188]	; (8005554 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d108      	bne.n	80054ae <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80054a2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	68fa      	ldr	r2, [r7, #12]
 80054aa:	4313      	orrs	r3, r2
 80054ac:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054b4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	68fa      	ldr	r2, [r7, #12]
 80054bc:	4313      	orrs	r3, r2
 80054be:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	68fa      	ldr	r2, [r7, #12]
 80054c6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a20      	ldr	r2, [pc, #128]	; (8005550 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d022      	beq.n	8005518 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054da:	d01d      	beq.n	8005518 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a1d      	ldr	r2, [pc, #116]	; (8005558 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d018      	beq.n	8005518 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a1c      	ldr	r2, [pc, #112]	; (800555c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d013      	beq.n	8005518 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a1a      	ldr	r2, [pc, #104]	; (8005560 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d00e      	beq.n	8005518 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a15      	ldr	r2, [pc, #84]	; (8005554 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d009      	beq.n	8005518 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a16      	ldr	r2, [pc, #88]	; (8005564 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d004      	beq.n	8005518 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a15      	ldr	r2, [pc, #84]	; (8005568 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d10c      	bne.n	8005532 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800551e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	689b      	ldr	r3, [r3, #8]
 8005524:	68ba      	ldr	r2, [r7, #8]
 8005526:	4313      	orrs	r3, r2
 8005528:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	68ba      	ldr	r2, [r7, #8]
 8005530:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2201      	movs	r2, #1
 8005536:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2200      	movs	r2, #0
 800553e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005542:	2300      	movs	r3, #0
}
 8005544:	4618      	mov	r0, r3
 8005546:	3714      	adds	r7, #20
 8005548:	46bd      	mov	sp, r7
 800554a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554e:	4770      	bx	lr
 8005550:	40010000 	.word	0x40010000
 8005554:	40010400 	.word	0x40010400
 8005558:	40000400 	.word	0x40000400
 800555c:	40000800 	.word	0x40000800
 8005560:	40000c00 	.word	0x40000c00
 8005564:	40014000 	.word	0x40014000
 8005568:	40001800 	.word	0x40001800

0800556c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b082      	sub	sp, #8
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d101      	bne.n	800557e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800557a:	2301      	movs	r3, #1
 800557c:	e040      	b.n	8005600 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005582:	2b00      	cmp	r3, #0
 8005584:	d106      	bne.n	8005594 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2200      	movs	r2, #0
 800558a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f7fc f85e 	bl	8001650 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2224      	movs	r2, #36	; 0x24
 8005598:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	681a      	ldr	r2, [r3, #0]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f022 0201 	bic.w	r2, r2, #1
 80055a8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f000 f8b0 	bl	8005710 <UART_SetConfig>
 80055b0:	4603      	mov	r3, r0
 80055b2:	2b01      	cmp	r3, #1
 80055b4:	d101      	bne.n	80055ba <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80055b6:	2301      	movs	r3, #1
 80055b8:	e022      	b.n	8005600 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d002      	beq.n	80055c8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f000 fb08 	bl	8005bd8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	685a      	ldr	r2, [r3, #4]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80055d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	689a      	ldr	r2, [r3, #8]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80055e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	681a      	ldr	r2, [r3, #0]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f042 0201 	orr.w	r2, r2, #1
 80055f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80055f8:	6878      	ldr	r0, [r7, #4]
 80055fa:	f000 fb8f 	bl	8005d1c <UART_CheckIdleState>
 80055fe:	4603      	mov	r3, r0
}
 8005600:	4618      	mov	r0, r3
 8005602:	3708      	adds	r7, #8
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}

08005608 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b08a      	sub	sp, #40	; 0x28
 800560c:	af02      	add	r7, sp, #8
 800560e:	60f8      	str	r0, [r7, #12]
 8005610:	60b9      	str	r1, [r7, #8]
 8005612:	603b      	str	r3, [r7, #0]
 8005614:	4613      	mov	r3, r2
 8005616:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800561c:	2b20      	cmp	r3, #32
 800561e:	d171      	bne.n	8005704 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d002      	beq.n	800562c <HAL_UART_Transmit+0x24>
 8005626:	88fb      	ldrh	r3, [r7, #6]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d101      	bne.n	8005630 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800562c:	2301      	movs	r3, #1
 800562e:	e06a      	b.n	8005706 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	2200      	movs	r2, #0
 8005634:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	2221      	movs	r2, #33	; 0x21
 800563c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800563e:	f7fc f9cf 	bl	80019e0 <HAL_GetTick>
 8005642:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	88fa      	ldrh	r2, [r7, #6]
 8005648:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	88fa      	ldrh	r2, [r7, #6]
 8005650:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	689b      	ldr	r3, [r3, #8]
 8005658:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800565c:	d108      	bne.n	8005670 <HAL_UART_Transmit+0x68>
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	691b      	ldr	r3, [r3, #16]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d104      	bne.n	8005670 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005666:	2300      	movs	r3, #0
 8005668:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	61bb      	str	r3, [r7, #24]
 800566e:	e003      	b.n	8005678 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005674:	2300      	movs	r3, #0
 8005676:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005678:	e02c      	b.n	80056d4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	9300      	str	r3, [sp, #0]
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	2200      	movs	r2, #0
 8005682:	2180      	movs	r1, #128	; 0x80
 8005684:	68f8      	ldr	r0, [r7, #12]
 8005686:	f000 fb96 	bl	8005db6 <UART_WaitOnFlagUntilTimeout>
 800568a:	4603      	mov	r3, r0
 800568c:	2b00      	cmp	r3, #0
 800568e:	d001      	beq.n	8005694 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8005690:	2303      	movs	r3, #3
 8005692:	e038      	b.n	8005706 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005694:	69fb      	ldr	r3, [r7, #28]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d10b      	bne.n	80056b2 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800569a:	69bb      	ldr	r3, [r7, #24]
 800569c:	881b      	ldrh	r3, [r3, #0]
 800569e:	461a      	mov	r2, r3
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80056a8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80056aa:	69bb      	ldr	r3, [r7, #24]
 80056ac:	3302      	adds	r3, #2
 80056ae:	61bb      	str	r3, [r7, #24]
 80056b0:	e007      	b.n	80056c2 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80056b2:	69fb      	ldr	r3, [r7, #28]
 80056b4:	781a      	ldrb	r2, [r3, #0]
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80056bc:	69fb      	ldr	r3, [r7, #28]
 80056be:	3301      	adds	r3, #1
 80056c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80056c8:	b29b      	uxth	r3, r3
 80056ca:	3b01      	subs	r3, #1
 80056cc:	b29a      	uxth	r2, r3
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80056da:	b29b      	uxth	r3, r3
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d1cc      	bne.n	800567a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	9300      	str	r3, [sp, #0]
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	2200      	movs	r2, #0
 80056e8:	2140      	movs	r1, #64	; 0x40
 80056ea:	68f8      	ldr	r0, [r7, #12]
 80056ec:	f000 fb63 	bl	8005db6 <UART_WaitOnFlagUntilTimeout>
 80056f0:	4603      	mov	r3, r0
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d001      	beq.n	80056fa <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80056f6:	2303      	movs	r3, #3
 80056f8:	e005      	b.n	8005706 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	2220      	movs	r2, #32
 80056fe:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005700:	2300      	movs	r3, #0
 8005702:	e000      	b.n	8005706 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005704:	2302      	movs	r3, #2
  }
}
 8005706:	4618      	mov	r0, r3
 8005708:	3720      	adds	r7, #32
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}
	...

08005710 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b088      	sub	sp, #32
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005718:	2300      	movs	r3, #0
 800571a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	689a      	ldr	r2, [r3, #8]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	691b      	ldr	r3, [r3, #16]
 8005724:	431a      	orrs	r2, r3
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	695b      	ldr	r3, [r3, #20]
 800572a:	431a      	orrs	r2, r3
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	69db      	ldr	r3, [r3, #28]
 8005730:	4313      	orrs	r3, r2
 8005732:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	681a      	ldr	r2, [r3, #0]
 800573a:	4ba6      	ldr	r3, [pc, #664]	; (80059d4 <UART_SetConfig+0x2c4>)
 800573c:	4013      	ands	r3, r2
 800573e:	687a      	ldr	r2, [r7, #4]
 8005740:	6812      	ldr	r2, [r2, #0]
 8005742:	6979      	ldr	r1, [r7, #20]
 8005744:	430b      	orrs	r3, r1
 8005746:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	685b      	ldr	r3, [r3, #4]
 800574e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	68da      	ldr	r2, [r3, #12]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	430a      	orrs	r2, r1
 800575c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	699b      	ldr	r3, [r3, #24]
 8005762:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6a1b      	ldr	r3, [r3, #32]
 8005768:	697a      	ldr	r2, [r7, #20]
 800576a:	4313      	orrs	r3, r2
 800576c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	689b      	ldr	r3, [r3, #8]
 8005774:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	697a      	ldr	r2, [r7, #20]
 800577e:	430a      	orrs	r2, r1
 8005780:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a94      	ldr	r2, [pc, #592]	; (80059d8 <UART_SetConfig+0x2c8>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d120      	bne.n	80057ce <UART_SetConfig+0xbe>
 800578c:	4b93      	ldr	r3, [pc, #588]	; (80059dc <UART_SetConfig+0x2cc>)
 800578e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005792:	f003 0303 	and.w	r3, r3, #3
 8005796:	2b03      	cmp	r3, #3
 8005798:	d816      	bhi.n	80057c8 <UART_SetConfig+0xb8>
 800579a:	a201      	add	r2, pc, #4	; (adr r2, 80057a0 <UART_SetConfig+0x90>)
 800579c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057a0:	080057b1 	.word	0x080057b1
 80057a4:	080057bd 	.word	0x080057bd
 80057a8:	080057b7 	.word	0x080057b7
 80057ac:	080057c3 	.word	0x080057c3
 80057b0:	2301      	movs	r3, #1
 80057b2:	77fb      	strb	r3, [r7, #31]
 80057b4:	e150      	b.n	8005a58 <UART_SetConfig+0x348>
 80057b6:	2302      	movs	r3, #2
 80057b8:	77fb      	strb	r3, [r7, #31]
 80057ba:	e14d      	b.n	8005a58 <UART_SetConfig+0x348>
 80057bc:	2304      	movs	r3, #4
 80057be:	77fb      	strb	r3, [r7, #31]
 80057c0:	e14a      	b.n	8005a58 <UART_SetConfig+0x348>
 80057c2:	2308      	movs	r3, #8
 80057c4:	77fb      	strb	r3, [r7, #31]
 80057c6:	e147      	b.n	8005a58 <UART_SetConfig+0x348>
 80057c8:	2310      	movs	r3, #16
 80057ca:	77fb      	strb	r3, [r7, #31]
 80057cc:	e144      	b.n	8005a58 <UART_SetConfig+0x348>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a83      	ldr	r2, [pc, #524]	; (80059e0 <UART_SetConfig+0x2d0>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d132      	bne.n	800583e <UART_SetConfig+0x12e>
 80057d8:	4b80      	ldr	r3, [pc, #512]	; (80059dc <UART_SetConfig+0x2cc>)
 80057da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057de:	f003 030c 	and.w	r3, r3, #12
 80057e2:	2b0c      	cmp	r3, #12
 80057e4:	d828      	bhi.n	8005838 <UART_SetConfig+0x128>
 80057e6:	a201      	add	r2, pc, #4	; (adr r2, 80057ec <UART_SetConfig+0xdc>)
 80057e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057ec:	08005821 	.word	0x08005821
 80057f0:	08005839 	.word	0x08005839
 80057f4:	08005839 	.word	0x08005839
 80057f8:	08005839 	.word	0x08005839
 80057fc:	0800582d 	.word	0x0800582d
 8005800:	08005839 	.word	0x08005839
 8005804:	08005839 	.word	0x08005839
 8005808:	08005839 	.word	0x08005839
 800580c:	08005827 	.word	0x08005827
 8005810:	08005839 	.word	0x08005839
 8005814:	08005839 	.word	0x08005839
 8005818:	08005839 	.word	0x08005839
 800581c:	08005833 	.word	0x08005833
 8005820:	2300      	movs	r3, #0
 8005822:	77fb      	strb	r3, [r7, #31]
 8005824:	e118      	b.n	8005a58 <UART_SetConfig+0x348>
 8005826:	2302      	movs	r3, #2
 8005828:	77fb      	strb	r3, [r7, #31]
 800582a:	e115      	b.n	8005a58 <UART_SetConfig+0x348>
 800582c:	2304      	movs	r3, #4
 800582e:	77fb      	strb	r3, [r7, #31]
 8005830:	e112      	b.n	8005a58 <UART_SetConfig+0x348>
 8005832:	2308      	movs	r3, #8
 8005834:	77fb      	strb	r3, [r7, #31]
 8005836:	e10f      	b.n	8005a58 <UART_SetConfig+0x348>
 8005838:	2310      	movs	r3, #16
 800583a:	77fb      	strb	r3, [r7, #31]
 800583c:	e10c      	b.n	8005a58 <UART_SetConfig+0x348>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a68      	ldr	r2, [pc, #416]	; (80059e4 <UART_SetConfig+0x2d4>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d120      	bne.n	800588a <UART_SetConfig+0x17a>
 8005848:	4b64      	ldr	r3, [pc, #400]	; (80059dc <UART_SetConfig+0x2cc>)
 800584a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800584e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005852:	2b30      	cmp	r3, #48	; 0x30
 8005854:	d013      	beq.n	800587e <UART_SetConfig+0x16e>
 8005856:	2b30      	cmp	r3, #48	; 0x30
 8005858:	d814      	bhi.n	8005884 <UART_SetConfig+0x174>
 800585a:	2b20      	cmp	r3, #32
 800585c:	d009      	beq.n	8005872 <UART_SetConfig+0x162>
 800585e:	2b20      	cmp	r3, #32
 8005860:	d810      	bhi.n	8005884 <UART_SetConfig+0x174>
 8005862:	2b00      	cmp	r3, #0
 8005864:	d002      	beq.n	800586c <UART_SetConfig+0x15c>
 8005866:	2b10      	cmp	r3, #16
 8005868:	d006      	beq.n	8005878 <UART_SetConfig+0x168>
 800586a:	e00b      	b.n	8005884 <UART_SetConfig+0x174>
 800586c:	2300      	movs	r3, #0
 800586e:	77fb      	strb	r3, [r7, #31]
 8005870:	e0f2      	b.n	8005a58 <UART_SetConfig+0x348>
 8005872:	2302      	movs	r3, #2
 8005874:	77fb      	strb	r3, [r7, #31]
 8005876:	e0ef      	b.n	8005a58 <UART_SetConfig+0x348>
 8005878:	2304      	movs	r3, #4
 800587a:	77fb      	strb	r3, [r7, #31]
 800587c:	e0ec      	b.n	8005a58 <UART_SetConfig+0x348>
 800587e:	2308      	movs	r3, #8
 8005880:	77fb      	strb	r3, [r7, #31]
 8005882:	e0e9      	b.n	8005a58 <UART_SetConfig+0x348>
 8005884:	2310      	movs	r3, #16
 8005886:	77fb      	strb	r3, [r7, #31]
 8005888:	e0e6      	b.n	8005a58 <UART_SetConfig+0x348>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a56      	ldr	r2, [pc, #344]	; (80059e8 <UART_SetConfig+0x2d8>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d120      	bne.n	80058d6 <UART_SetConfig+0x1c6>
 8005894:	4b51      	ldr	r3, [pc, #324]	; (80059dc <UART_SetConfig+0x2cc>)
 8005896:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800589a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800589e:	2bc0      	cmp	r3, #192	; 0xc0
 80058a0:	d013      	beq.n	80058ca <UART_SetConfig+0x1ba>
 80058a2:	2bc0      	cmp	r3, #192	; 0xc0
 80058a4:	d814      	bhi.n	80058d0 <UART_SetConfig+0x1c0>
 80058a6:	2b80      	cmp	r3, #128	; 0x80
 80058a8:	d009      	beq.n	80058be <UART_SetConfig+0x1ae>
 80058aa:	2b80      	cmp	r3, #128	; 0x80
 80058ac:	d810      	bhi.n	80058d0 <UART_SetConfig+0x1c0>
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d002      	beq.n	80058b8 <UART_SetConfig+0x1a8>
 80058b2:	2b40      	cmp	r3, #64	; 0x40
 80058b4:	d006      	beq.n	80058c4 <UART_SetConfig+0x1b4>
 80058b6:	e00b      	b.n	80058d0 <UART_SetConfig+0x1c0>
 80058b8:	2300      	movs	r3, #0
 80058ba:	77fb      	strb	r3, [r7, #31]
 80058bc:	e0cc      	b.n	8005a58 <UART_SetConfig+0x348>
 80058be:	2302      	movs	r3, #2
 80058c0:	77fb      	strb	r3, [r7, #31]
 80058c2:	e0c9      	b.n	8005a58 <UART_SetConfig+0x348>
 80058c4:	2304      	movs	r3, #4
 80058c6:	77fb      	strb	r3, [r7, #31]
 80058c8:	e0c6      	b.n	8005a58 <UART_SetConfig+0x348>
 80058ca:	2308      	movs	r3, #8
 80058cc:	77fb      	strb	r3, [r7, #31]
 80058ce:	e0c3      	b.n	8005a58 <UART_SetConfig+0x348>
 80058d0:	2310      	movs	r3, #16
 80058d2:	77fb      	strb	r3, [r7, #31]
 80058d4:	e0c0      	b.n	8005a58 <UART_SetConfig+0x348>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a44      	ldr	r2, [pc, #272]	; (80059ec <UART_SetConfig+0x2dc>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d125      	bne.n	800592c <UART_SetConfig+0x21c>
 80058e0:	4b3e      	ldr	r3, [pc, #248]	; (80059dc <UART_SetConfig+0x2cc>)
 80058e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80058ee:	d017      	beq.n	8005920 <UART_SetConfig+0x210>
 80058f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80058f4:	d817      	bhi.n	8005926 <UART_SetConfig+0x216>
 80058f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80058fa:	d00b      	beq.n	8005914 <UART_SetConfig+0x204>
 80058fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005900:	d811      	bhi.n	8005926 <UART_SetConfig+0x216>
 8005902:	2b00      	cmp	r3, #0
 8005904:	d003      	beq.n	800590e <UART_SetConfig+0x1fe>
 8005906:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800590a:	d006      	beq.n	800591a <UART_SetConfig+0x20a>
 800590c:	e00b      	b.n	8005926 <UART_SetConfig+0x216>
 800590e:	2300      	movs	r3, #0
 8005910:	77fb      	strb	r3, [r7, #31]
 8005912:	e0a1      	b.n	8005a58 <UART_SetConfig+0x348>
 8005914:	2302      	movs	r3, #2
 8005916:	77fb      	strb	r3, [r7, #31]
 8005918:	e09e      	b.n	8005a58 <UART_SetConfig+0x348>
 800591a:	2304      	movs	r3, #4
 800591c:	77fb      	strb	r3, [r7, #31]
 800591e:	e09b      	b.n	8005a58 <UART_SetConfig+0x348>
 8005920:	2308      	movs	r3, #8
 8005922:	77fb      	strb	r3, [r7, #31]
 8005924:	e098      	b.n	8005a58 <UART_SetConfig+0x348>
 8005926:	2310      	movs	r3, #16
 8005928:	77fb      	strb	r3, [r7, #31]
 800592a:	e095      	b.n	8005a58 <UART_SetConfig+0x348>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a2f      	ldr	r2, [pc, #188]	; (80059f0 <UART_SetConfig+0x2e0>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d125      	bne.n	8005982 <UART_SetConfig+0x272>
 8005936:	4b29      	ldr	r3, [pc, #164]	; (80059dc <UART_SetConfig+0x2cc>)
 8005938:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800593c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005940:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005944:	d017      	beq.n	8005976 <UART_SetConfig+0x266>
 8005946:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800594a:	d817      	bhi.n	800597c <UART_SetConfig+0x26c>
 800594c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005950:	d00b      	beq.n	800596a <UART_SetConfig+0x25a>
 8005952:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005956:	d811      	bhi.n	800597c <UART_SetConfig+0x26c>
 8005958:	2b00      	cmp	r3, #0
 800595a:	d003      	beq.n	8005964 <UART_SetConfig+0x254>
 800595c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005960:	d006      	beq.n	8005970 <UART_SetConfig+0x260>
 8005962:	e00b      	b.n	800597c <UART_SetConfig+0x26c>
 8005964:	2301      	movs	r3, #1
 8005966:	77fb      	strb	r3, [r7, #31]
 8005968:	e076      	b.n	8005a58 <UART_SetConfig+0x348>
 800596a:	2302      	movs	r3, #2
 800596c:	77fb      	strb	r3, [r7, #31]
 800596e:	e073      	b.n	8005a58 <UART_SetConfig+0x348>
 8005970:	2304      	movs	r3, #4
 8005972:	77fb      	strb	r3, [r7, #31]
 8005974:	e070      	b.n	8005a58 <UART_SetConfig+0x348>
 8005976:	2308      	movs	r3, #8
 8005978:	77fb      	strb	r3, [r7, #31]
 800597a:	e06d      	b.n	8005a58 <UART_SetConfig+0x348>
 800597c:	2310      	movs	r3, #16
 800597e:	77fb      	strb	r3, [r7, #31]
 8005980:	e06a      	b.n	8005a58 <UART_SetConfig+0x348>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a1b      	ldr	r2, [pc, #108]	; (80059f4 <UART_SetConfig+0x2e4>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d138      	bne.n	80059fe <UART_SetConfig+0x2ee>
 800598c:	4b13      	ldr	r3, [pc, #76]	; (80059dc <UART_SetConfig+0x2cc>)
 800598e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005992:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005996:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800599a:	d017      	beq.n	80059cc <UART_SetConfig+0x2bc>
 800599c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80059a0:	d82a      	bhi.n	80059f8 <UART_SetConfig+0x2e8>
 80059a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059a6:	d00b      	beq.n	80059c0 <UART_SetConfig+0x2b0>
 80059a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059ac:	d824      	bhi.n	80059f8 <UART_SetConfig+0x2e8>
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d003      	beq.n	80059ba <UART_SetConfig+0x2aa>
 80059b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059b6:	d006      	beq.n	80059c6 <UART_SetConfig+0x2b6>
 80059b8:	e01e      	b.n	80059f8 <UART_SetConfig+0x2e8>
 80059ba:	2300      	movs	r3, #0
 80059bc:	77fb      	strb	r3, [r7, #31]
 80059be:	e04b      	b.n	8005a58 <UART_SetConfig+0x348>
 80059c0:	2302      	movs	r3, #2
 80059c2:	77fb      	strb	r3, [r7, #31]
 80059c4:	e048      	b.n	8005a58 <UART_SetConfig+0x348>
 80059c6:	2304      	movs	r3, #4
 80059c8:	77fb      	strb	r3, [r7, #31]
 80059ca:	e045      	b.n	8005a58 <UART_SetConfig+0x348>
 80059cc:	2308      	movs	r3, #8
 80059ce:	77fb      	strb	r3, [r7, #31]
 80059d0:	e042      	b.n	8005a58 <UART_SetConfig+0x348>
 80059d2:	bf00      	nop
 80059d4:	efff69f3 	.word	0xefff69f3
 80059d8:	40011000 	.word	0x40011000
 80059dc:	40023800 	.word	0x40023800
 80059e0:	40004400 	.word	0x40004400
 80059e4:	40004800 	.word	0x40004800
 80059e8:	40004c00 	.word	0x40004c00
 80059ec:	40005000 	.word	0x40005000
 80059f0:	40011400 	.word	0x40011400
 80059f4:	40007800 	.word	0x40007800
 80059f8:	2310      	movs	r3, #16
 80059fa:	77fb      	strb	r3, [r7, #31]
 80059fc:	e02c      	b.n	8005a58 <UART_SetConfig+0x348>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a72      	ldr	r2, [pc, #456]	; (8005bcc <UART_SetConfig+0x4bc>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d125      	bne.n	8005a54 <UART_SetConfig+0x344>
 8005a08:	4b71      	ldr	r3, [pc, #452]	; (8005bd0 <UART_SetConfig+0x4c0>)
 8005a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a0e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005a12:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005a16:	d017      	beq.n	8005a48 <UART_SetConfig+0x338>
 8005a18:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005a1c:	d817      	bhi.n	8005a4e <UART_SetConfig+0x33e>
 8005a1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a22:	d00b      	beq.n	8005a3c <UART_SetConfig+0x32c>
 8005a24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a28:	d811      	bhi.n	8005a4e <UART_SetConfig+0x33e>
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d003      	beq.n	8005a36 <UART_SetConfig+0x326>
 8005a2e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005a32:	d006      	beq.n	8005a42 <UART_SetConfig+0x332>
 8005a34:	e00b      	b.n	8005a4e <UART_SetConfig+0x33e>
 8005a36:	2300      	movs	r3, #0
 8005a38:	77fb      	strb	r3, [r7, #31]
 8005a3a:	e00d      	b.n	8005a58 <UART_SetConfig+0x348>
 8005a3c:	2302      	movs	r3, #2
 8005a3e:	77fb      	strb	r3, [r7, #31]
 8005a40:	e00a      	b.n	8005a58 <UART_SetConfig+0x348>
 8005a42:	2304      	movs	r3, #4
 8005a44:	77fb      	strb	r3, [r7, #31]
 8005a46:	e007      	b.n	8005a58 <UART_SetConfig+0x348>
 8005a48:	2308      	movs	r3, #8
 8005a4a:	77fb      	strb	r3, [r7, #31]
 8005a4c:	e004      	b.n	8005a58 <UART_SetConfig+0x348>
 8005a4e:	2310      	movs	r3, #16
 8005a50:	77fb      	strb	r3, [r7, #31]
 8005a52:	e001      	b.n	8005a58 <UART_SetConfig+0x348>
 8005a54:	2310      	movs	r3, #16
 8005a56:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	69db      	ldr	r3, [r3, #28]
 8005a5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a60:	d15b      	bne.n	8005b1a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005a62:	7ffb      	ldrb	r3, [r7, #31]
 8005a64:	2b08      	cmp	r3, #8
 8005a66:	d828      	bhi.n	8005aba <UART_SetConfig+0x3aa>
 8005a68:	a201      	add	r2, pc, #4	; (adr r2, 8005a70 <UART_SetConfig+0x360>)
 8005a6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a6e:	bf00      	nop
 8005a70:	08005a95 	.word	0x08005a95
 8005a74:	08005a9d 	.word	0x08005a9d
 8005a78:	08005aa5 	.word	0x08005aa5
 8005a7c:	08005abb 	.word	0x08005abb
 8005a80:	08005aab 	.word	0x08005aab
 8005a84:	08005abb 	.word	0x08005abb
 8005a88:	08005abb 	.word	0x08005abb
 8005a8c:	08005abb 	.word	0x08005abb
 8005a90:	08005ab3 	.word	0x08005ab3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a94:	f7ff f832 	bl	8004afc <HAL_RCC_GetPCLK1Freq>
 8005a98:	61b8      	str	r0, [r7, #24]
        break;
 8005a9a:	e013      	b.n	8005ac4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a9c:	f7ff f842 	bl	8004b24 <HAL_RCC_GetPCLK2Freq>
 8005aa0:	61b8      	str	r0, [r7, #24]
        break;
 8005aa2:	e00f      	b.n	8005ac4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005aa4:	4b4b      	ldr	r3, [pc, #300]	; (8005bd4 <UART_SetConfig+0x4c4>)
 8005aa6:	61bb      	str	r3, [r7, #24]
        break;
 8005aa8:	e00c      	b.n	8005ac4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005aaa:	f7fe ff15 	bl	80048d8 <HAL_RCC_GetSysClockFreq>
 8005aae:	61b8      	str	r0, [r7, #24]
        break;
 8005ab0:	e008      	b.n	8005ac4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ab2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ab6:	61bb      	str	r3, [r7, #24]
        break;
 8005ab8:	e004      	b.n	8005ac4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005aba:	2300      	movs	r3, #0
 8005abc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	77bb      	strb	r3, [r7, #30]
        break;
 8005ac2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005ac4:	69bb      	ldr	r3, [r7, #24]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d074      	beq.n	8005bb4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005aca:	69bb      	ldr	r3, [r7, #24]
 8005acc:	005a      	lsls	r2, r3, #1
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	085b      	lsrs	r3, r3, #1
 8005ad4:	441a      	add	r2, r3
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	685b      	ldr	r3, [r3, #4]
 8005ada:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ade:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ae0:	693b      	ldr	r3, [r7, #16]
 8005ae2:	2b0f      	cmp	r3, #15
 8005ae4:	d916      	bls.n	8005b14 <UART_SetConfig+0x404>
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005aec:	d212      	bcs.n	8005b14 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	b29b      	uxth	r3, r3
 8005af2:	f023 030f 	bic.w	r3, r3, #15
 8005af6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	085b      	lsrs	r3, r3, #1
 8005afc:	b29b      	uxth	r3, r3
 8005afe:	f003 0307 	and.w	r3, r3, #7
 8005b02:	b29a      	uxth	r2, r3
 8005b04:	89fb      	ldrh	r3, [r7, #14]
 8005b06:	4313      	orrs	r3, r2
 8005b08:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	89fa      	ldrh	r2, [r7, #14]
 8005b10:	60da      	str	r2, [r3, #12]
 8005b12:	e04f      	b.n	8005bb4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005b14:	2301      	movs	r3, #1
 8005b16:	77bb      	strb	r3, [r7, #30]
 8005b18:	e04c      	b.n	8005bb4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005b1a:	7ffb      	ldrb	r3, [r7, #31]
 8005b1c:	2b08      	cmp	r3, #8
 8005b1e:	d828      	bhi.n	8005b72 <UART_SetConfig+0x462>
 8005b20:	a201      	add	r2, pc, #4	; (adr r2, 8005b28 <UART_SetConfig+0x418>)
 8005b22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b26:	bf00      	nop
 8005b28:	08005b4d 	.word	0x08005b4d
 8005b2c:	08005b55 	.word	0x08005b55
 8005b30:	08005b5d 	.word	0x08005b5d
 8005b34:	08005b73 	.word	0x08005b73
 8005b38:	08005b63 	.word	0x08005b63
 8005b3c:	08005b73 	.word	0x08005b73
 8005b40:	08005b73 	.word	0x08005b73
 8005b44:	08005b73 	.word	0x08005b73
 8005b48:	08005b6b 	.word	0x08005b6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b4c:	f7fe ffd6 	bl	8004afc <HAL_RCC_GetPCLK1Freq>
 8005b50:	61b8      	str	r0, [r7, #24]
        break;
 8005b52:	e013      	b.n	8005b7c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b54:	f7fe ffe6 	bl	8004b24 <HAL_RCC_GetPCLK2Freq>
 8005b58:	61b8      	str	r0, [r7, #24]
        break;
 8005b5a:	e00f      	b.n	8005b7c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b5c:	4b1d      	ldr	r3, [pc, #116]	; (8005bd4 <UART_SetConfig+0x4c4>)
 8005b5e:	61bb      	str	r3, [r7, #24]
        break;
 8005b60:	e00c      	b.n	8005b7c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b62:	f7fe feb9 	bl	80048d8 <HAL_RCC_GetSysClockFreq>
 8005b66:	61b8      	str	r0, [r7, #24]
        break;
 8005b68:	e008      	b.n	8005b7c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b6e:	61bb      	str	r3, [r7, #24]
        break;
 8005b70:	e004      	b.n	8005b7c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8005b72:	2300      	movs	r3, #0
 8005b74:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005b76:	2301      	movs	r3, #1
 8005b78:	77bb      	strb	r3, [r7, #30]
        break;
 8005b7a:	bf00      	nop
    }

    if (pclk != 0U)
 8005b7c:	69bb      	ldr	r3, [r7, #24]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d018      	beq.n	8005bb4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	085a      	lsrs	r2, r3, #1
 8005b88:	69bb      	ldr	r3, [r7, #24]
 8005b8a:	441a      	add	r2, r3
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b94:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	2b0f      	cmp	r3, #15
 8005b9a:	d909      	bls.n	8005bb0 <UART_SetConfig+0x4a0>
 8005b9c:	693b      	ldr	r3, [r7, #16]
 8005b9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ba2:	d205      	bcs.n	8005bb0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005ba4:	693b      	ldr	r3, [r7, #16]
 8005ba6:	b29a      	uxth	r2, r3
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	60da      	str	r2, [r3, #12]
 8005bae:	e001      	b.n	8005bb4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005bc0:	7fbb      	ldrb	r3, [r7, #30]
}
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	3720      	adds	r7, #32
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bd80      	pop	{r7, pc}
 8005bca:	bf00      	nop
 8005bcc:	40007c00 	.word	0x40007c00
 8005bd0:	40023800 	.word	0x40023800
 8005bd4:	00f42400 	.word	0x00f42400

08005bd8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b083      	sub	sp, #12
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be4:	f003 0301 	and.w	r3, r3, #1
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d00a      	beq.n	8005c02 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	685b      	ldr	r3, [r3, #4]
 8005bf2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	430a      	orrs	r2, r1
 8005c00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c06:	f003 0302 	and.w	r3, r3, #2
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d00a      	beq.n	8005c24 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	430a      	orrs	r2, r1
 8005c22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c28:	f003 0304 	and.w	r3, r3, #4
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d00a      	beq.n	8005c46 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	430a      	orrs	r2, r1
 8005c44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c4a:	f003 0308 	and.w	r3, r3, #8
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d00a      	beq.n	8005c68 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	685b      	ldr	r3, [r3, #4]
 8005c58:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	430a      	orrs	r2, r1
 8005c66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c6c:	f003 0310 	and.w	r3, r3, #16
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d00a      	beq.n	8005c8a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	689b      	ldr	r3, [r3, #8]
 8005c7a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	430a      	orrs	r2, r1
 8005c88:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c8e:	f003 0320 	and.w	r3, r3, #32
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d00a      	beq.n	8005cac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	689b      	ldr	r3, [r3, #8]
 8005c9c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	430a      	orrs	r2, r1
 8005caa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d01a      	beq.n	8005cee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	685b      	ldr	r3, [r3, #4]
 8005cbe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	430a      	orrs	r2, r1
 8005ccc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cd2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005cd6:	d10a      	bne.n	8005cee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	430a      	orrs	r2, r1
 8005cec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d00a      	beq.n	8005d10 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	430a      	orrs	r2, r1
 8005d0e:	605a      	str	r2, [r3, #4]
  }
}
 8005d10:	bf00      	nop
 8005d12:	370c      	adds	r7, #12
 8005d14:	46bd      	mov	sp, r7
 8005d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1a:	4770      	bx	lr

08005d1c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b086      	sub	sp, #24
 8005d20:	af02      	add	r7, sp, #8
 8005d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2200      	movs	r2, #0
 8005d28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005d2c:	f7fb fe58 	bl	80019e0 <HAL_GetTick>
 8005d30:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f003 0308 	and.w	r3, r3, #8
 8005d3c:	2b08      	cmp	r3, #8
 8005d3e:	d10e      	bne.n	8005d5e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d40:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005d44:	9300      	str	r3, [sp, #0]
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	f000 f831 	bl	8005db6 <UART_WaitOnFlagUntilTimeout>
 8005d54:	4603      	mov	r3, r0
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d001      	beq.n	8005d5e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d5a:	2303      	movs	r3, #3
 8005d5c:	e027      	b.n	8005dae <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f003 0304 	and.w	r3, r3, #4
 8005d68:	2b04      	cmp	r3, #4
 8005d6a:	d10e      	bne.n	8005d8a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d6c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005d70:	9300      	str	r3, [sp, #0]
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2200      	movs	r2, #0
 8005d76:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f000 f81b 	bl	8005db6 <UART_WaitOnFlagUntilTimeout>
 8005d80:	4603      	mov	r3, r0
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d001      	beq.n	8005d8a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d86:	2303      	movs	r3, #3
 8005d88:	e011      	b.n	8005dae <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2220      	movs	r2, #32
 8005d8e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2220      	movs	r2, #32
 8005d94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2200      	movs	r2, #0
 8005da2:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2200      	movs	r2, #0
 8005da8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005dac:	2300      	movs	r3, #0
}
 8005dae:	4618      	mov	r0, r3
 8005db0:	3710      	adds	r7, #16
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bd80      	pop	{r7, pc}

08005db6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005db6:	b580      	push	{r7, lr}
 8005db8:	b09c      	sub	sp, #112	; 0x70
 8005dba:	af00      	add	r7, sp, #0
 8005dbc:	60f8      	str	r0, [r7, #12]
 8005dbe:	60b9      	str	r1, [r7, #8]
 8005dc0:	603b      	str	r3, [r7, #0]
 8005dc2:	4613      	mov	r3, r2
 8005dc4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005dc6:	e0a7      	b.n	8005f18 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005dc8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005dca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dce:	f000 80a3 	beq.w	8005f18 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005dd2:	f7fb fe05 	bl	80019e0 <HAL_GetTick>
 8005dd6:	4602      	mov	r2, r0
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	1ad3      	subs	r3, r2, r3
 8005ddc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005dde:	429a      	cmp	r2, r3
 8005de0:	d302      	bcc.n	8005de8 <UART_WaitOnFlagUntilTimeout+0x32>
 8005de2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d13f      	bne.n	8005e68 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005df0:	e853 3f00 	ldrex	r3, [r3]
 8005df4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005df6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005df8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005dfc:	667b      	str	r3, [r7, #100]	; 0x64
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	461a      	mov	r2, r3
 8005e04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e06:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005e08:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e0a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005e0c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005e0e:	e841 2300 	strex	r3, r2, [r1]
 8005e12:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005e14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d1e6      	bne.n	8005de8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	3308      	adds	r3, #8
 8005e20:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e24:	e853 3f00 	ldrex	r3, [r3]
 8005e28:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e2c:	f023 0301 	bic.w	r3, r3, #1
 8005e30:	663b      	str	r3, [r7, #96]	; 0x60
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	3308      	adds	r3, #8
 8005e38:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005e3a:	64ba      	str	r2, [r7, #72]	; 0x48
 8005e3c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e3e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005e40:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005e42:	e841 2300 	strex	r3, r2, [r1]
 8005e46:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005e48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d1e5      	bne.n	8005e1a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	2220      	movs	r2, #32
 8005e52:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	2220      	movs	r2, #32
 8005e58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8005e64:	2303      	movs	r3, #3
 8005e66:	e068      	b.n	8005f3a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f003 0304 	and.w	r3, r3, #4
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d050      	beq.n	8005f18 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	69db      	ldr	r3, [r3, #28]
 8005e7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e84:	d148      	bne.n	8005f18 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e8e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e98:	e853 3f00 	ldrex	r3, [r3]
 8005e9c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005ea4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	461a      	mov	r2, r3
 8005eac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005eae:	637b      	str	r3, [r7, #52]	; 0x34
 8005eb0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eb2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005eb4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005eb6:	e841 2300 	strex	r3, r2, [r1]
 8005eba:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d1e6      	bne.n	8005e90 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	3308      	adds	r3, #8
 8005ec8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	e853 3f00 	ldrex	r3, [r3]
 8005ed0:	613b      	str	r3, [r7, #16]
   return(result);
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	f023 0301 	bic.w	r3, r3, #1
 8005ed8:	66bb      	str	r3, [r7, #104]	; 0x68
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	3308      	adds	r3, #8
 8005ee0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005ee2:	623a      	str	r2, [r7, #32]
 8005ee4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ee6:	69f9      	ldr	r1, [r7, #28]
 8005ee8:	6a3a      	ldr	r2, [r7, #32]
 8005eea:	e841 2300 	strex	r3, r2, [r1]
 8005eee:	61bb      	str	r3, [r7, #24]
   return(result);
 8005ef0:	69bb      	ldr	r3, [r7, #24]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d1e5      	bne.n	8005ec2 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	2220      	movs	r2, #32
 8005efa:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2220      	movs	r2, #32
 8005f00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	2220      	movs	r2, #32
 8005f08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005f14:	2303      	movs	r3, #3
 8005f16:	e010      	b.n	8005f3a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	69da      	ldr	r2, [r3, #28]
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	4013      	ands	r3, r2
 8005f22:	68ba      	ldr	r2, [r7, #8]
 8005f24:	429a      	cmp	r2, r3
 8005f26:	bf0c      	ite	eq
 8005f28:	2301      	moveq	r3, #1
 8005f2a:	2300      	movne	r3, #0
 8005f2c:	b2db      	uxtb	r3, r3
 8005f2e:	461a      	mov	r2, r3
 8005f30:	79fb      	ldrb	r3, [r7, #7]
 8005f32:	429a      	cmp	r2, r3
 8005f34:	f43f af48 	beq.w	8005dc8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005f38:	2300      	movs	r3, #0
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	3770      	adds	r7, #112	; 0x70
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}
	...

08005f44 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005f44:	b084      	sub	sp, #16
 8005f46:	b580      	push	{r7, lr}
 8005f48:	b084      	sub	sp, #16
 8005f4a:	af00      	add	r7, sp, #0
 8005f4c:	6078      	str	r0, [r7, #4]
 8005f4e:	f107 001c 	add.w	r0, r7, #28
 8005f52:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f58:	2b01      	cmp	r3, #1
 8005f5a:	d120      	bne.n	8005f9e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f60:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	68da      	ldr	r2, [r3, #12]
 8005f6c:	4b20      	ldr	r3, [pc, #128]	; (8005ff0 <USB_CoreInit+0xac>)
 8005f6e:	4013      	ands	r3, r2
 8005f70:	687a      	ldr	r2, [r7, #4]
 8005f72:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	68db      	ldr	r3, [r3, #12]
 8005f78:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005f80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f82:	2b01      	cmp	r3, #1
 8005f84:	d105      	bne.n	8005f92 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	68db      	ldr	r3, [r3, #12]
 8005f8a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f000 fa96 	bl	80064c4 <USB_CoreReset>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	73fb      	strb	r3, [r7, #15]
 8005f9c:	e010      	b.n	8005fc0 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	68db      	ldr	r3, [r3, #12]
 8005fa2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	f000 fa8a 	bl	80064c4 <USB_CoreReset>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fb8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8005fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fc2:	2b01      	cmp	r3, #1
 8005fc4:	d10b      	bne.n	8005fde <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	689b      	ldr	r3, [r3, #8]
 8005fca:	f043 0206 	orr.w	r2, r3, #6
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	689b      	ldr	r3, [r3, #8]
 8005fd6:	f043 0220 	orr.w	r2, r3, #32
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005fde:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	3710      	adds	r7, #16
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005fea:	b004      	add	sp, #16
 8005fec:	4770      	bx	lr
 8005fee:	bf00      	nop
 8005ff0:	ffbdffbf 	.word	0xffbdffbf

08005ff4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b083      	sub	sp, #12
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	689b      	ldr	r3, [r3, #8]
 8006000:	f023 0201 	bic.w	r2, r3, #1
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006008:	2300      	movs	r3, #0
}
 800600a:	4618      	mov	r0, r3
 800600c:	370c      	adds	r7, #12
 800600e:	46bd      	mov	sp, r7
 8006010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006014:	4770      	bx	lr

08006016 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006016:	b580      	push	{r7, lr}
 8006018:	b084      	sub	sp, #16
 800601a:	af00      	add	r7, sp, #0
 800601c:	6078      	str	r0, [r7, #4]
 800601e:	460b      	mov	r3, r1
 8006020:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006022:	2300      	movs	r3, #0
 8006024:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	68db      	ldr	r3, [r3, #12]
 800602a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006032:	78fb      	ldrb	r3, [r7, #3]
 8006034:	2b01      	cmp	r3, #1
 8006036:	d115      	bne.n	8006064 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	68db      	ldr	r3, [r3, #12]
 800603c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006044:	2001      	movs	r0, #1
 8006046:	f7fb fcd7 	bl	80019f8 <HAL_Delay>
      ms++;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	3301      	adds	r3, #1
 800604e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006050:	6878      	ldr	r0, [r7, #4]
 8006052:	f000 fa29 	bl	80064a8 <USB_GetMode>
 8006056:	4603      	mov	r3, r0
 8006058:	2b01      	cmp	r3, #1
 800605a:	d01e      	beq.n	800609a <USB_SetCurrentMode+0x84>
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	2b31      	cmp	r3, #49	; 0x31
 8006060:	d9f0      	bls.n	8006044 <USB_SetCurrentMode+0x2e>
 8006062:	e01a      	b.n	800609a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006064:	78fb      	ldrb	r3, [r7, #3]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d115      	bne.n	8006096 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	68db      	ldr	r3, [r3, #12]
 800606e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006076:	2001      	movs	r0, #1
 8006078:	f7fb fcbe 	bl	80019f8 <HAL_Delay>
      ms++;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	3301      	adds	r3, #1
 8006080:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f000 fa10 	bl	80064a8 <USB_GetMode>
 8006088:	4603      	mov	r3, r0
 800608a:	2b00      	cmp	r3, #0
 800608c:	d005      	beq.n	800609a <USB_SetCurrentMode+0x84>
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	2b31      	cmp	r3, #49	; 0x31
 8006092:	d9f0      	bls.n	8006076 <USB_SetCurrentMode+0x60>
 8006094:	e001      	b.n	800609a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006096:	2301      	movs	r3, #1
 8006098:	e005      	b.n	80060a6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	2b32      	cmp	r3, #50	; 0x32
 800609e:	d101      	bne.n	80060a4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80060a0:	2301      	movs	r3, #1
 80060a2:	e000      	b.n	80060a6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80060a4:	2300      	movs	r3, #0
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	3710      	adds	r7, #16
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}
	...

080060b0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80060b0:	b084      	sub	sp, #16
 80060b2:	b580      	push	{r7, lr}
 80060b4:	b086      	sub	sp, #24
 80060b6:	af00      	add	r7, sp, #0
 80060b8:	6078      	str	r0, [r7, #4]
 80060ba:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80060be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80060c2:	2300      	movs	r3, #0
 80060c4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80060ca:	2300      	movs	r3, #0
 80060cc:	613b      	str	r3, [r7, #16]
 80060ce:	e009      	b.n	80060e4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80060d0:	687a      	ldr	r2, [r7, #4]
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	3340      	adds	r3, #64	; 0x40
 80060d6:	009b      	lsls	r3, r3, #2
 80060d8:	4413      	add	r3, r2
 80060da:	2200      	movs	r2, #0
 80060dc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80060de:	693b      	ldr	r3, [r7, #16]
 80060e0:	3301      	adds	r3, #1
 80060e2:	613b      	str	r3, [r7, #16]
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	2b0e      	cmp	r3, #14
 80060e8:	d9f2      	bls.n	80060d0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80060ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d11c      	bne.n	800612a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060f6:	685b      	ldr	r3, [r3, #4]
 80060f8:	68fa      	ldr	r2, [r7, #12]
 80060fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80060fe:	f043 0302 	orr.w	r3, r3, #2
 8006102:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006108:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	601a      	str	r2, [r3, #0]
 8006128:	e005      	b.n	8006136 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800612e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800613c:	461a      	mov	r2, r3
 800613e:	2300      	movs	r3, #0
 8006140:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006148:	4619      	mov	r1, r3
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006150:	461a      	mov	r2, r3
 8006152:	680b      	ldr	r3, [r1, #0]
 8006154:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006158:	2b01      	cmp	r3, #1
 800615a:	d10c      	bne.n	8006176 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800615c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800615e:	2b00      	cmp	r3, #0
 8006160:	d104      	bne.n	800616c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006162:	2100      	movs	r1, #0
 8006164:	6878      	ldr	r0, [r7, #4]
 8006166:	f000 f965 	bl	8006434 <USB_SetDevSpeed>
 800616a:	e008      	b.n	800617e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800616c:	2101      	movs	r1, #1
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f000 f960 	bl	8006434 <USB_SetDevSpeed>
 8006174:	e003      	b.n	800617e <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006176:	2103      	movs	r1, #3
 8006178:	6878      	ldr	r0, [r7, #4]
 800617a:	f000 f95b 	bl	8006434 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800617e:	2110      	movs	r1, #16
 8006180:	6878      	ldr	r0, [r7, #4]
 8006182:	f000 f8f3 	bl	800636c <USB_FlushTxFifo>
 8006186:	4603      	mov	r3, r0
 8006188:	2b00      	cmp	r3, #0
 800618a:	d001      	beq.n	8006190 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800618c:	2301      	movs	r3, #1
 800618e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006190:	6878      	ldr	r0, [r7, #4]
 8006192:	f000 f91f 	bl	80063d4 <USB_FlushRxFifo>
 8006196:	4603      	mov	r3, r0
 8006198:	2b00      	cmp	r3, #0
 800619a:	d001      	beq.n	80061a0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800619c:	2301      	movs	r3, #1
 800619e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061a6:	461a      	mov	r2, r3
 80061a8:	2300      	movs	r3, #0
 80061aa:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061b2:	461a      	mov	r2, r3
 80061b4:	2300      	movs	r3, #0
 80061b6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061be:	461a      	mov	r2, r3
 80061c0:	2300      	movs	r3, #0
 80061c2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80061c4:	2300      	movs	r3, #0
 80061c6:	613b      	str	r3, [r7, #16]
 80061c8:	e043      	b.n	8006252 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	015a      	lsls	r2, r3, #5
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	4413      	add	r3, r2
 80061d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80061dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80061e0:	d118      	bne.n	8006214 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80061e2:	693b      	ldr	r3, [r7, #16]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d10a      	bne.n	80061fe <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	015a      	lsls	r2, r3, #5
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	4413      	add	r3, r2
 80061f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061f4:	461a      	mov	r2, r3
 80061f6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80061fa:	6013      	str	r3, [r2, #0]
 80061fc:	e013      	b.n	8006226 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80061fe:	693b      	ldr	r3, [r7, #16]
 8006200:	015a      	lsls	r2, r3, #5
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	4413      	add	r3, r2
 8006206:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800620a:	461a      	mov	r2, r3
 800620c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006210:	6013      	str	r3, [r2, #0]
 8006212:	e008      	b.n	8006226 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006214:	693b      	ldr	r3, [r7, #16]
 8006216:	015a      	lsls	r2, r3, #5
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	4413      	add	r3, r2
 800621c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006220:	461a      	mov	r2, r3
 8006222:	2300      	movs	r3, #0
 8006224:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	015a      	lsls	r2, r3, #5
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	4413      	add	r3, r2
 800622e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006232:	461a      	mov	r2, r3
 8006234:	2300      	movs	r3, #0
 8006236:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006238:	693b      	ldr	r3, [r7, #16]
 800623a:	015a      	lsls	r2, r3, #5
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	4413      	add	r3, r2
 8006240:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006244:	461a      	mov	r2, r3
 8006246:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800624a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800624c:	693b      	ldr	r3, [r7, #16]
 800624e:	3301      	adds	r3, #1
 8006250:	613b      	str	r3, [r7, #16]
 8006252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006254:	693a      	ldr	r2, [r7, #16]
 8006256:	429a      	cmp	r2, r3
 8006258:	d3b7      	bcc.n	80061ca <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800625a:	2300      	movs	r3, #0
 800625c:	613b      	str	r3, [r7, #16]
 800625e:	e043      	b.n	80062e8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006260:	693b      	ldr	r3, [r7, #16]
 8006262:	015a      	lsls	r2, r3, #5
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	4413      	add	r3, r2
 8006268:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006272:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006276:	d118      	bne.n	80062aa <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006278:	693b      	ldr	r3, [r7, #16]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d10a      	bne.n	8006294 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800627e:	693b      	ldr	r3, [r7, #16]
 8006280:	015a      	lsls	r2, r3, #5
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	4413      	add	r3, r2
 8006286:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800628a:	461a      	mov	r2, r3
 800628c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006290:	6013      	str	r3, [r2, #0]
 8006292:	e013      	b.n	80062bc <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006294:	693b      	ldr	r3, [r7, #16]
 8006296:	015a      	lsls	r2, r3, #5
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	4413      	add	r3, r2
 800629c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062a0:	461a      	mov	r2, r3
 80062a2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80062a6:	6013      	str	r3, [r2, #0]
 80062a8:	e008      	b.n	80062bc <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	015a      	lsls	r2, r3, #5
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	4413      	add	r3, r2
 80062b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062b6:	461a      	mov	r2, r3
 80062b8:	2300      	movs	r3, #0
 80062ba:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80062bc:	693b      	ldr	r3, [r7, #16]
 80062be:	015a      	lsls	r2, r3, #5
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	4413      	add	r3, r2
 80062c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062c8:	461a      	mov	r2, r3
 80062ca:	2300      	movs	r3, #0
 80062cc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80062ce:	693b      	ldr	r3, [r7, #16]
 80062d0:	015a      	lsls	r2, r3, #5
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	4413      	add	r3, r2
 80062d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062da:	461a      	mov	r2, r3
 80062dc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80062e0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80062e2:	693b      	ldr	r3, [r7, #16]
 80062e4:	3301      	adds	r3, #1
 80062e6:	613b      	str	r3, [r7, #16]
 80062e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ea:	693a      	ldr	r2, [r7, #16]
 80062ec:	429a      	cmp	r2, r3
 80062ee:	d3b7      	bcc.n	8006260 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062f6:	691b      	ldr	r3, [r3, #16]
 80062f8:	68fa      	ldr	r2, [r7, #12]
 80062fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80062fe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006302:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2200      	movs	r2, #0
 8006308:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006310:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006314:	2b00      	cmp	r3, #0
 8006316:	d105      	bne.n	8006324 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	699b      	ldr	r3, [r3, #24]
 800631c:	f043 0210 	orr.w	r2, r3, #16
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	699a      	ldr	r2, [r3, #24]
 8006328:	4b0e      	ldr	r3, [pc, #56]	; (8006364 <USB_DevInit+0x2b4>)
 800632a:	4313      	orrs	r3, r2
 800632c:	687a      	ldr	r2, [r7, #4]
 800632e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006330:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006332:	2b00      	cmp	r3, #0
 8006334:	d005      	beq.n	8006342 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	699b      	ldr	r3, [r3, #24]
 800633a:	f043 0208 	orr.w	r2, r3, #8
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006342:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006344:	2b01      	cmp	r3, #1
 8006346:	d105      	bne.n	8006354 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	699a      	ldr	r2, [r3, #24]
 800634c:	4b06      	ldr	r3, [pc, #24]	; (8006368 <USB_DevInit+0x2b8>)
 800634e:	4313      	orrs	r3, r2
 8006350:	687a      	ldr	r2, [r7, #4]
 8006352:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006354:	7dfb      	ldrb	r3, [r7, #23]
}
 8006356:	4618      	mov	r0, r3
 8006358:	3718      	adds	r7, #24
 800635a:	46bd      	mov	sp, r7
 800635c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006360:	b004      	add	sp, #16
 8006362:	4770      	bx	lr
 8006364:	803c3800 	.word	0x803c3800
 8006368:	40000004 	.word	0x40000004

0800636c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800636c:	b480      	push	{r7}
 800636e:	b085      	sub	sp, #20
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
 8006374:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006376:	2300      	movs	r3, #0
 8006378:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	3301      	adds	r3, #1
 800637e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	4a13      	ldr	r2, [pc, #76]	; (80063d0 <USB_FlushTxFifo+0x64>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d901      	bls.n	800638c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006388:	2303      	movs	r3, #3
 800638a:	e01b      	b.n	80063c4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	691b      	ldr	r3, [r3, #16]
 8006390:	2b00      	cmp	r3, #0
 8006392:	daf2      	bge.n	800637a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006394:	2300      	movs	r3, #0
 8006396:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	019b      	lsls	r3, r3, #6
 800639c:	f043 0220 	orr.w	r2, r3, #32
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	3301      	adds	r3, #1
 80063a8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	4a08      	ldr	r2, [pc, #32]	; (80063d0 <USB_FlushTxFifo+0x64>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d901      	bls.n	80063b6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80063b2:	2303      	movs	r3, #3
 80063b4:	e006      	b.n	80063c4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	691b      	ldr	r3, [r3, #16]
 80063ba:	f003 0320 	and.w	r3, r3, #32
 80063be:	2b20      	cmp	r3, #32
 80063c0:	d0f0      	beq.n	80063a4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80063c2:	2300      	movs	r3, #0
}
 80063c4:	4618      	mov	r0, r3
 80063c6:	3714      	adds	r7, #20
 80063c8:	46bd      	mov	sp, r7
 80063ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ce:	4770      	bx	lr
 80063d0:	00030d40 	.word	0x00030d40

080063d4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80063d4:	b480      	push	{r7}
 80063d6:	b085      	sub	sp, #20
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80063dc:	2300      	movs	r3, #0
 80063de:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	3301      	adds	r3, #1
 80063e4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	4a11      	ldr	r2, [pc, #68]	; (8006430 <USB_FlushRxFifo+0x5c>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d901      	bls.n	80063f2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80063ee:	2303      	movs	r3, #3
 80063f0:	e018      	b.n	8006424 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	691b      	ldr	r3, [r3, #16]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	daf2      	bge.n	80063e0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80063fa:	2300      	movs	r3, #0
 80063fc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2210      	movs	r2, #16
 8006402:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	3301      	adds	r3, #1
 8006408:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	4a08      	ldr	r2, [pc, #32]	; (8006430 <USB_FlushRxFifo+0x5c>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d901      	bls.n	8006416 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006412:	2303      	movs	r3, #3
 8006414:	e006      	b.n	8006424 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	691b      	ldr	r3, [r3, #16]
 800641a:	f003 0310 	and.w	r3, r3, #16
 800641e:	2b10      	cmp	r3, #16
 8006420:	d0f0      	beq.n	8006404 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006422:	2300      	movs	r3, #0
}
 8006424:	4618      	mov	r0, r3
 8006426:	3714      	adds	r7, #20
 8006428:	46bd      	mov	sp, r7
 800642a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642e:	4770      	bx	lr
 8006430:	00030d40 	.word	0x00030d40

08006434 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006434:	b480      	push	{r7}
 8006436:	b085      	sub	sp, #20
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
 800643c:	460b      	mov	r3, r1
 800643e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800644a:	681a      	ldr	r2, [r3, #0]
 800644c:	78fb      	ldrb	r3, [r7, #3]
 800644e:	68f9      	ldr	r1, [r7, #12]
 8006450:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006454:	4313      	orrs	r3, r2
 8006456:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006458:	2300      	movs	r3, #0
}
 800645a:	4618      	mov	r0, r3
 800645c:	3714      	adds	r7, #20
 800645e:	46bd      	mov	sp, r7
 8006460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006464:	4770      	bx	lr

08006466 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006466:	b480      	push	{r7}
 8006468:	b085      	sub	sp, #20
 800646a:	af00      	add	r7, sp, #0
 800646c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	68fa      	ldr	r2, [r7, #12]
 800647c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006480:	f023 0303 	bic.w	r3, r3, #3
 8006484:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800648c:	685b      	ldr	r3, [r3, #4]
 800648e:	68fa      	ldr	r2, [r7, #12]
 8006490:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006494:	f043 0302 	orr.w	r3, r3, #2
 8006498:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800649a:	2300      	movs	r3, #0
}
 800649c:	4618      	mov	r0, r3
 800649e:	3714      	adds	r7, #20
 80064a0:	46bd      	mov	sp, r7
 80064a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a6:	4770      	bx	lr

080064a8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b083      	sub	sp, #12
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	695b      	ldr	r3, [r3, #20]
 80064b4:	f003 0301 	and.w	r3, r3, #1
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	370c      	adds	r7, #12
 80064bc:	46bd      	mov	sp, r7
 80064be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c2:	4770      	bx	lr

080064c4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80064c4:	b480      	push	{r7}
 80064c6:	b085      	sub	sp, #20
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80064cc:	2300      	movs	r3, #0
 80064ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	3301      	adds	r3, #1
 80064d4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	4a13      	ldr	r2, [pc, #76]	; (8006528 <USB_CoreReset+0x64>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d901      	bls.n	80064e2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80064de:	2303      	movs	r3, #3
 80064e0:	e01b      	b.n	800651a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	691b      	ldr	r3, [r3, #16]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	daf2      	bge.n	80064d0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80064ea:	2300      	movs	r3, #0
 80064ec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	691b      	ldr	r3, [r3, #16]
 80064f2:	f043 0201 	orr.w	r2, r3, #1
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	3301      	adds	r3, #1
 80064fe:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	4a09      	ldr	r2, [pc, #36]	; (8006528 <USB_CoreReset+0x64>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d901      	bls.n	800650c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006508:	2303      	movs	r3, #3
 800650a:	e006      	b.n	800651a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	691b      	ldr	r3, [r3, #16]
 8006510:	f003 0301 	and.w	r3, r3, #1
 8006514:	2b01      	cmp	r3, #1
 8006516:	d0f0      	beq.n	80064fa <USB_CoreReset+0x36>

  return HAL_OK;
 8006518:	2300      	movs	r3, #0
}
 800651a:	4618      	mov	r0, r3
 800651c:	3714      	adds	r7, #20
 800651e:	46bd      	mov	sp, r7
 8006520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006524:	4770      	bx	lr
 8006526:	bf00      	nop
 8006528:	00030d40 	.word	0x00030d40

0800652c <siprintf>:
 800652c:	b40e      	push	{r1, r2, r3}
 800652e:	b500      	push	{lr}
 8006530:	b09c      	sub	sp, #112	; 0x70
 8006532:	ab1d      	add	r3, sp, #116	; 0x74
 8006534:	9002      	str	r0, [sp, #8]
 8006536:	9006      	str	r0, [sp, #24]
 8006538:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800653c:	4809      	ldr	r0, [pc, #36]	; (8006564 <siprintf+0x38>)
 800653e:	9107      	str	r1, [sp, #28]
 8006540:	9104      	str	r1, [sp, #16]
 8006542:	4909      	ldr	r1, [pc, #36]	; (8006568 <siprintf+0x3c>)
 8006544:	f853 2b04 	ldr.w	r2, [r3], #4
 8006548:	9105      	str	r1, [sp, #20]
 800654a:	6800      	ldr	r0, [r0, #0]
 800654c:	9301      	str	r3, [sp, #4]
 800654e:	a902      	add	r1, sp, #8
 8006550:	f000 f992 	bl	8006878 <_svfiprintf_r>
 8006554:	9b02      	ldr	r3, [sp, #8]
 8006556:	2200      	movs	r2, #0
 8006558:	701a      	strb	r2, [r3, #0]
 800655a:	b01c      	add	sp, #112	; 0x70
 800655c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006560:	b003      	add	sp, #12
 8006562:	4770      	bx	lr
 8006564:	20000058 	.word	0x20000058
 8006568:	ffff0208 	.word	0xffff0208

0800656c <memset>:
 800656c:	4402      	add	r2, r0
 800656e:	4603      	mov	r3, r0
 8006570:	4293      	cmp	r3, r2
 8006572:	d100      	bne.n	8006576 <memset+0xa>
 8006574:	4770      	bx	lr
 8006576:	f803 1b01 	strb.w	r1, [r3], #1
 800657a:	e7f9      	b.n	8006570 <memset+0x4>

0800657c <__errno>:
 800657c:	4b01      	ldr	r3, [pc, #4]	; (8006584 <__errno+0x8>)
 800657e:	6818      	ldr	r0, [r3, #0]
 8006580:	4770      	bx	lr
 8006582:	bf00      	nop
 8006584:	20000058 	.word	0x20000058

08006588 <__libc_init_array>:
 8006588:	b570      	push	{r4, r5, r6, lr}
 800658a:	4d0d      	ldr	r5, [pc, #52]	; (80065c0 <__libc_init_array+0x38>)
 800658c:	4c0d      	ldr	r4, [pc, #52]	; (80065c4 <__libc_init_array+0x3c>)
 800658e:	1b64      	subs	r4, r4, r5
 8006590:	10a4      	asrs	r4, r4, #2
 8006592:	2600      	movs	r6, #0
 8006594:	42a6      	cmp	r6, r4
 8006596:	d109      	bne.n	80065ac <__libc_init_array+0x24>
 8006598:	4d0b      	ldr	r5, [pc, #44]	; (80065c8 <__libc_init_array+0x40>)
 800659a:	4c0c      	ldr	r4, [pc, #48]	; (80065cc <__libc_init_array+0x44>)
 800659c:	f000 fc6a 	bl	8006e74 <_init>
 80065a0:	1b64      	subs	r4, r4, r5
 80065a2:	10a4      	asrs	r4, r4, #2
 80065a4:	2600      	movs	r6, #0
 80065a6:	42a6      	cmp	r6, r4
 80065a8:	d105      	bne.n	80065b6 <__libc_init_array+0x2e>
 80065aa:	bd70      	pop	{r4, r5, r6, pc}
 80065ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80065b0:	4798      	blx	r3
 80065b2:	3601      	adds	r6, #1
 80065b4:	e7ee      	b.n	8006594 <__libc_init_array+0xc>
 80065b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80065ba:	4798      	blx	r3
 80065bc:	3601      	adds	r6, #1
 80065be:	e7f2      	b.n	80065a6 <__libc_init_array+0x1e>
 80065c0:	08006ef4 	.word	0x08006ef4
 80065c4:	08006ef4 	.word	0x08006ef4
 80065c8:	08006ef4 	.word	0x08006ef4
 80065cc:	08006ef8 	.word	0x08006ef8

080065d0 <__retarget_lock_acquire_recursive>:
 80065d0:	4770      	bx	lr

080065d2 <__retarget_lock_release_recursive>:
 80065d2:	4770      	bx	lr

080065d4 <_free_r>:
 80065d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80065d6:	2900      	cmp	r1, #0
 80065d8:	d044      	beq.n	8006664 <_free_r+0x90>
 80065da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80065de:	9001      	str	r0, [sp, #4]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	f1a1 0404 	sub.w	r4, r1, #4
 80065e6:	bfb8      	it	lt
 80065e8:	18e4      	addlt	r4, r4, r3
 80065ea:	f000 f8df 	bl	80067ac <__malloc_lock>
 80065ee:	4a1e      	ldr	r2, [pc, #120]	; (8006668 <_free_r+0x94>)
 80065f0:	9801      	ldr	r0, [sp, #4]
 80065f2:	6813      	ldr	r3, [r2, #0]
 80065f4:	b933      	cbnz	r3, 8006604 <_free_r+0x30>
 80065f6:	6063      	str	r3, [r4, #4]
 80065f8:	6014      	str	r4, [r2, #0]
 80065fa:	b003      	add	sp, #12
 80065fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006600:	f000 b8da 	b.w	80067b8 <__malloc_unlock>
 8006604:	42a3      	cmp	r3, r4
 8006606:	d908      	bls.n	800661a <_free_r+0x46>
 8006608:	6825      	ldr	r5, [r4, #0]
 800660a:	1961      	adds	r1, r4, r5
 800660c:	428b      	cmp	r3, r1
 800660e:	bf01      	itttt	eq
 8006610:	6819      	ldreq	r1, [r3, #0]
 8006612:	685b      	ldreq	r3, [r3, #4]
 8006614:	1949      	addeq	r1, r1, r5
 8006616:	6021      	streq	r1, [r4, #0]
 8006618:	e7ed      	b.n	80065f6 <_free_r+0x22>
 800661a:	461a      	mov	r2, r3
 800661c:	685b      	ldr	r3, [r3, #4]
 800661e:	b10b      	cbz	r3, 8006624 <_free_r+0x50>
 8006620:	42a3      	cmp	r3, r4
 8006622:	d9fa      	bls.n	800661a <_free_r+0x46>
 8006624:	6811      	ldr	r1, [r2, #0]
 8006626:	1855      	adds	r5, r2, r1
 8006628:	42a5      	cmp	r5, r4
 800662a:	d10b      	bne.n	8006644 <_free_r+0x70>
 800662c:	6824      	ldr	r4, [r4, #0]
 800662e:	4421      	add	r1, r4
 8006630:	1854      	adds	r4, r2, r1
 8006632:	42a3      	cmp	r3, r4
 8006634:	6011      	str	r1, [r2, #0]
 8006636:	d1e0      	bne.n	80065fa <_free_r+0x26>
 8006638:	681c      	ldr	r4, [r3, #0]
 800663a:	685b      	ldr	r3, [r3, #4]
 800663c:	6053      	str	r3, [r2, #4]
 800663e:	440c      	add	r4, r1
 8006640:	6014      	str	r4, [r2, #0]
 8006642:	e7da      	b.n	80065fa <_free_r+0x26>
 8006644:	d902      	bls.n	800664c <_free_r+0x78>
 8006646:	230c      	movs	r3, #12
 8006648:	6003      	str	r3, [r0, #0]
 800664a:	e7d6      	b.n	80065fa <_free_r+0x26>
 800664c:	6825      	ldr	r5, [r4, #0]
 800664e:	1961      	adds	r1, r4, r5
 8006650:	428b      	cmp	r3, r1
 8006652:	bf04      	itt	eq
 8006654:	6819      	ldreq	r1, [r3, #0]
 8006656:	685b      	ldreq	r3, [r3, #4]
 8006658:	6063      	str	r3, [r4, #4]
 800665a:	bf04      	itt	eq
 800665c:	1949      	addeq	r1, r1, r5
 800665e:	6021      	streq	r1, [r4, #0]
 8006660:	6054      	str	r4, [r2, #4]
 8006662:	e7ca      	b.n	80065fa <_free_r+0x26>
 8006664:	b003      	add	sp, #12
 8006666:	bd30      	pop	{r4, r5, pc}
 8006668:	20000b74 	.word	0x20000b74

0800666c <sbrk_aligned>:
 800666c:	b570      	push	{r4, r5, r6, lr}
 800666e:	4e0e      	ldr	r6, [pc, #56]	; (80066a8 <sbrk_aligned+0x3c>)
 8006670:	460c      	mov	r4, r1
 8006672:	6831      	ldr	r1, [r6, #0]
 8006674:	4605      	mov	r5, r0
 8006676:	b911      	cbnz	r1, 800667e <sbrk_aligned+0x12>
 8006678:	f000 fba6 	bl	8006dc8 <_sbrk_r>
 800667c:	6030      	str	r0, [r6, #0]
 800667e:	4621      	mov	r1, r4
 8006680:	4628      	mov	r0, r5
 8006682:	f000 fba1 	bl	8006dc8 <_sbrk_r>
 8006686:	1c43      	adds	r3, r0, #1
 8006688:	d00a      	beq.n	80066a0 <sbrk_aligned+0x34>
 800668a:	1cc4      	adds	r4, r0, #3
 800668c:	f024 0403 	bic.w	r4, r4, #3
 8006690:	42a0      	cmp	r0, r4
 8006692:	d007      	beq.n	80066a4 <sbrk_aligned+0x38>
 8006694:	1a21      	subs	r1, r4, r0
 8006696:	4628      	mov	r0, r5
 8006698:	f000 fb96 	bl	8006dc8 <_sbrk_r>
 800669c:	3001      	adds	r0, #1
 800669e:	d101      	bne.n	80066a4 <sbrk_aligned+0x38>
 80066a0:	f04f 34ff 	mov.w	r4, #4294967295
 80066a4:	4620      	mov	r0, r4
 80066a6:	bd70      	pop	{r4, r5, r6, pc}
 80066a8:	20000b78 	.word	0x20000b78

080066ac <_malloc_r>:
 80066ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066b0:	1ccd      	adds	r5, r1, #3
 80066b2:	f025 0503 	bic.w	r5, r5, #3
 80066b6:	3508      	adds	r5, #8
 80066b8:	2d0c      	cmp	r5, #12
 80066ba:	bf38      	it	cc
 80066bc:	250c      	movcc	r5, #12
 80066be:	2d00      	cmp	r5, #0
 80066c0:	4607      	mov	r7, r0
 80066c2:	db01      	blt.n	80066c8 <_malloc_r+0x1c>
 80066c4:	42a9      	cmp	r1, r5
 80066c6:	d905      	bls.n	80066d4 <_malloc_r+0x28>
 80066c8:	230c      	movs	r3, #12
 80066ca:	603b      	str	r3, [r7, #0]
 80066cc:	2600      	movs	r6, #0
 80066ce:	4630      	mov	r0, r6
 80066d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80066d4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80067a8 <_malloc_r+0xfc>
 80066d8:	f000 f868 	bl	80067ac <__malloc_lock>
 80066dc:	f8d8 3000 	ldr.w	r3, [r8]
 80066e0:	461c      	mov	r4, r3
 80066e2:	bb5c      	cbnz	r4, 800673c <_malloc_r+0x90>
 80066e4:	4629      	mov	r1, r5
 80066e6:	4638      	mov	r0, r7
 80066e8:	f7ff ffc0 	bl	800666c <sbrk_aligned>
 80066ec:	1c43      	adds	r3, r0, #1
 80066ee:	4604      	mov	r4, r0
 80066f0:	d155      	bne.n	800679e <_malloc_r+0xf2>
 80066f2:	f8d8 4000 	ldr.w	r4, [r8]
 80066f6:	4626      	mov	r6, r4
 80066f8:	2e00      	cmp	r6, #0
 80066fa:	d145      	bne.n	8006788 <_malloc_r+0xdc>
 80066fc:	2c00      	cmp	r4, #0
 80066fe:	d048      	beq.n	8006792 <_malloc_r+0xe6>
 8006700:	6823      	ldr	r3, [r4, #0]
 8006702:	4631      	mov	r1, r6
 8006704:	4638      	mov	r0, r7
 8006706:	eb04 0903 	add.w	r9, r4, r3
 800670a:	f000 fb5d 	bl	8006dc8 <_sbrk_r>
 800670e:	4581      	cmp	r9, r0
 8006710:	d13f      	bne.n	8006792 <_malloc_r+0xe6>
 8006712:	6821      	ldr	r1, [r4, #0]
 8006714:	1a6d      	subs	r5, r5, r1
 8006716:	4629      	mov	r1, r5
 8006718:	4638      	mov	r0, r7
 800671a:	f7ff ffa7 	bl	800666c <sbrk_aligned>
 800671e:	3001      	adds	r0, #1
 8006720:	d037      	beq.n	8006792 <_malloc_r+0xe6>
 8006722:	6823      	ldr	r3, [r4, #0]
 8006724:	442b      	add	r3, r5
 8006726:	6023      	str	r3, [r4, #0]
 8006728:	f8d8 3000 	ldr.w	r3, [r8]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d038      	beq.n	80067a2 <_malloc_r+0xf6>
 8006730:	685a      	ldr	r2, [r3, #4]
 8006732:	42a2      	cmp	r2, r4
 8006734:	d12b      	bne.n	800678e <_malloc_r+0xe2>
 8006736:	2200      	movs	r2, #0
 8006738:	605a      	str	r2, [r3, #4]
 800673a:	e00f      	b.n	800675c <_malloc_r+0xb0>
 800673c:	6822      	ldr	r2, [r4, #0]
 800673e:	1b52      	subs	r2, r2, r5
 8006740:	d41f      	bmi.n	8006782 <_malloc_r+0xd6>
 8006742:	2a0b      	cmp	r2, #11
 8006744:	d917      	bls.n	8006776 <_malloc_r+0xca>
 8006746:	1961      	adds	r1, r4, r5
 8006748:	42a3      	cmp	r3, r4
 800674a:	6025      	str	r5, [r4, #0]
 800674c:	bf18      	it	ne
 800674e:	6059      	strne	r1, [r3, #4]
 8006750:	6863      	ldr	r3, [r4, #4]
 8006752:	bf08      	it	eq
 8006754:	f8c8 1000 	streq.w	r1, [r8]
 8006758:	5162      	str	r2, [r4, r5]
 800675a:	604b      	str	r3, [r1, #4]
 800675c:	4638      	mov	r0, r7
 800675e:	f104 060b 	add.w	r6, r4, #11
 8006762:	f000 f829 	bl	80067b8 <__malloc_unlock>
 8006766:	f026 0607 	bic.w	r6, r6, #7
 800676a:	1d23      	adds	r3, r4, #4
 800676c:	1af2      	subs	r2, r6, r3
 800676e:	d0ae      	beq.n	80066ce <_malloc_r+0x22>
 8006770:	1b9b      	subs	r3, r3, r6
 8006772:	50a3      	str	r3, [r4, r2]
 8006774:	e7ab      	b.n	80066ce <_malloc_r+0x22>
 8006776:	42a3      	cmp	r3, r4
 8006778:	6862      	ldr	r2, [r4, #4]
 800677a:	d1dd      	bne.n	8006738 <_malloc_r+0x8c>
 800677c:	f8c8 2000 	str.w	r2, [r8]
 8006780:	e7ec      	b.n	800675c <_malloc_r+0xb0>
 8006782:	4623      	mov	r3, r4
 8006784:	6864      	ldr	r4, [r4, #4]
 8006786:	e7ac      	b.n	80066e2 <_malloc_r+0x36>
 8006788:	4634      	mov	r4, r6
 800678a:	6876      	ldr	r6, [r6, #4]
 800678c:	e7b4      	b.n	80066f8 <_malloc_r+0x4c>
 800678e:	4613      	mov	r3, r2
 8006790:	e7cc      	b.n	800672c <_malloc_r+0x80>
 8006792:	230c      	movs	r3, #12
 8006794:	603b      	str	r3, [r7, #0]
 8006796:	4638      	mov	r0, r7
 8006798:	f000 f80e 	bl	80067b8 <__malloc_unlock>
 800679c:	e797      	b.n	80066ce <_malloc_r+0x22>
 800679e:	6025      	str	r5, [r4, #0]
 80067a0:	e7dc      	b.n	800675c <_malloc_r+0xb0>
 80067a2:	605b      	str	r3, [r3, #4]
 80067a4:	deff      	udf	#255	; 0xff
 80067a6:	bf00      	nop
 80067a8:	20000b74 	.word	0x20000b74

080067ac <__malloc_lock>:
 80067ac:	4801      	ldr	r0, [pc, #4]	; (80067b4 <__malloc_lock+0x8>)
 80067ae:	f7ff bf0f 	b.w	80065d0 <__retarget_lock_acquire_recursive>
 80067b2:	bf00      	nop
 80067b4:	20000b70 	.word	0x20000b70

080067b8 <__malloc_unlock>:
 80067b8:	4801      	ldr	r0, [pc, #4]	; (80067c0 <__malloc_unlock+0x8>)
 80067ba:	f7ff bf0a 	b.w	80065d2 <__retarget_lock_release_recursive>
 80067be:	bf00      	nop
 80067c0:	20000b70 	.word	0x20000b70

080067c4 <__ssputs_r>:
 80067c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067c8:	688e      	ldr	r6, [r1, #8]
 80067ca:	461f      	mov	r7, r3
 80067cc:	42be      	cmp	r6, r7
 80067ce:	680b      	ldr	r3, [r1, #0]
 80067d0:	4682      	mov	sl, r0
 80067d2:	460c      	mov	r4, r1
 80067d4:	4690      	mov	r8, r2
 80067d6:	d82c      	bhi.n	8006832 <__ssputs_r+0x6e>
 80067d8:	898a      	ldrh	r2, [r1, #12]
 80067da:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80067de:	d026      	beq.n	800682e <__ssputs_r+0x6a>
 80067e0:	6965      	ldr	r5, [r4, #20]
 80067e2:	6909      	ldr	r1, [r1, #16]
 80067e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80067e8:	eba3 0901 	sub.w	r9, r3, r1
 80067ec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80067f0:	1c7b      	adds	r3, r7, #1
 80067f2:	444b      	add	r3, r9
 80067f4:	106d      	asrs	r5, r5, #1
 80067f6:	429d      	cmp	r5, r3
 80067f8:	bf38      	it	cc
 80067fa:	461d      	movcc	r5, r3
 80067fc:	0553      	lsls	r3, r2, #21
 80067fe:	d527      	bpl.n	8006850 <__ssputs_r+0x8c>
 8006800:	4629      	mov	r1, r5
 8006802:	f7ff ff53 	bl	80066ac <_malloc_r>
 8006806:	4606      	mov	r6, r0
 8006808:	b360      	cbz	r0, 8006864 <__ssputs_r+0xa0>
 800680a:	6921      	ldr	r1, [r4, #16]
 800680c:	464a      	mov	r2, r9
 800680e:	f000 faeb 	bl	8006de8 <memcpy>
 8006812:	89a3      	ldrh	r3, [r4, #12]
 8006814:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006818:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800681c:	81a3      	strh	r3, [r4, #12]
 800681e:	6126      	str	r6, [r4, #16]
 8006820:	6165      	str	r5, [r4, #20]
 8006822:	444e      	add	r6, r9
 8006824:	eba5 0509 	sub.w	r5, r5, r9
 8006828:	6026      	str	r6, [r4, #0]
 800682a:	60a5      	str	r5, [r4, #8]
 800682c:	463e      	mov	r6, r7
 800682e:	42be      	cmp	r6, r7
 8006830:	d900      	bls.n	8006834 <__ssputs_r+0x70>
 8006832:	463e      	mov	r6, r7
 8006834:	6820      	ldr	r0, [r4, #0]
 8006836:	4632      	mov	r2, r6
 8006838:	4641      	mov	r1, r8
 800683a:	f000 faab 	bl	8006d94 <memmove>
 800683e:	68a3      	ldr	r3, [r4, #8]
 8006840:	1b9b      	subs	r3, r3, r6
 8006842:	60a3      	str	r3, [r4, #8]
 8006844:	6823      	ldr	r3, [r4, #0]
 8006846:	4433      	add	r3, r6
 8006848:	6023      	str	r3, [r4, #0]
 800684a:	2000      	movs	r0, #0
 800684c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006850:	462a      	mov	r2, r5
 8006852:	f000 fad7 	bl	8006e04 <_realloc_r>
 8006856:	4606      	mov	r6, r0
 8006858:	2800      	cmp	r0, #0
 800685a:	d1e0      	bne.n	800681e <__ssputs_r+0x5a>
 800685c:	6921      	ldr	r1, [r4, #16]
 800685e:	4650      	mov	r0, sl
 8006860:	f7ff feb8 	bl	80065d4 <_free_r>
 8006864:	230c      	movs	r3, #12
 8006866:	f8ca 3000 	str.w	r3, [sl]
 800686a:	89a3      	ldrh	r3, [r4, #12]
 800686c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006870:	81a3      	strh	r3, [r4, #12]
 8006872:	f04f 30ff 	mov.w	r0, #4294967295
 8006876:	e7e9      	b.n	800684c <__ssputs_r+0x88>

08006878 <_svfiprintf_r>:
 8006878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800687c:	4698      	mov	r8, r3
 800687e:	898b      	ldrh	r3, [r1, #12]
 8006880:	061b      	lsls	r3, r3, #24
 8006882:	b09d      	sub	sp, #116	; 0x74
 8006884:	4607      	mov	r7, r0
 8006886:	460d      	mov	r5, r1
 8006888:	4614      	mov	r4, r2
 800688a:	d50e      	bpl.n	80068aa <_svfiprintf_r+0x32>
 800688c:	690b      	ldr	r3, [r1, #16]
 800688e:	b963      	cbnz	r3, 80068aa <_svfiprintf_r+0x32>
 8006890:	2140      	movs	r1, #64	; 0x40
 8006892:	f7ff ff0b 	bl	80066ac <_malloc_r>
 8006896:	6028      	str	r0, [r5, #0]
 8006898:	6128      	str	r0, [r5, #16]
 800689a:	b920      	cbnz	r0, 80068a6 <_svfiprintf_r+0x2e>
 800689c:	230c      	movs	r3, #12
 800689e:	603b      	str	r3, [r7, #0]
 80068a0:	f04f 30ff 	mov.w	r0, #4294967295
 80068a4:	e0d0      	b.n	8006a48 <_svfiprintf_r+0x1d0>
 80068a6:	2340      	movs	r3, #64	; 0x40
 80068a8:	616b      	str	r3, [r5, #20]
 80068aa:	2300      	movs	r3, #0
 80068ac:	9309      	str	r3, [sp, #36]	; 0x24
 80068ae:	2320      	movs	r3, #32
 80068b0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80068b4:	f8cd 800c 	str.w	r8, [sp, #12]
 80068b8:	2330      	movs	r3, #48	; 0x30
 80068ba:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006a60 <_svfiprintf_r+0x1e8>
 80068be:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80068c2:	f04f 0901 	mov.w	r9, #1
 80068c6:	4623      	mov	r3, r4
 80068c8:	469a      	mov	sl, r3
 80068ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80068ce:	b10a      	cbz	r2, 80068d4 <_svfiprintf_r+0x5c>
 80068d0:	2a25      	cmp	r2, #37	; 0x25
 80068d2:	d1f9      	bne.n	80068c8 <_svfiprintf_r+0x50>
 80068d4:	ebba 0b04 	subs.w	fp, sl, r4
 80068d8:	d00b      	beq.n	80068f2 <_svfiprintf_r+0x7a>
 80068da:	465b      	mov	r3, fp
 80068dc:	4622      	mov	r2, r4
 80068de:	4629      	mov	r1, r5
 80068e0:	4638      	mov	r0, r7
 80068e2:	f7ff ff6f 	bl	80067c4 <__ssputs_r>
 80068e6:	3001      	adds	r0, #1
 80068e8:	f000 80a9 	beq.w	8006a3e <_svfiprintf_r+0x1c6>
 80068ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80068ee:	445a      	add	r2, fp
 80068f0:	9209      	str	r2, [sp, #36]	; 0x24
 80068f2:	f89a 3000 	ldrb.w	r3, [sl]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	f000 80a1 	beq.w	8006a3e <_svfiprintf_r+0x1c6>
 80068fc:	2300      	movs	r3, #0
 80068fe:	f04f 32ff 	mov.w	r2, #4294967295
 8006902:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006906:	f10a 0a01 	add.w	sl, sl, #1
 800690a:	9304      	str	r3, [sp, #16]
 800690c:	9307      	str	r3, [sp, #28]
 800690e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006912:	931a      	str	r3, [sp, #104]	; 0x68
 8006914:	4654      	mov	r4, sl
 8006916:	2205      	movs	r2, #5
 8006918:	f814 1b01 	ldrb.w	r1, [r4], #1
 800691c:	4850      	ldr	r0, [pc, #320]	; (8006a60 <_svfiprintf_r+0x1e8>)
 800691e:	f7f9 fc97 	bl	8000250 <memchr>
 8006922:	9a04      	ldr	r2, [sp, #16]
 8006924:	b9d8      	cbnz	r0, 800695e <_svfiprintf_r+0xe6>
 8006926:	06d0      	lsls	r0, r2, #27
 8006928:	bf44      	itt	mi
 800692a:	2320      	movmi	r3, #32
 800692c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006930:	0711      	lsls	r1, r2, #28
 8006932:	bf44      	itt	mi
 8006934:	232b      	movmi	r3, #43	; 0x2b
 8006936:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800693a:	f89a 3000 	ldrb.w	r3, [sl]
 800693e:	2b2a      	cmp	r3, #42	; 0x2a
 8006940:	d015      	beq.n	800696e <_svfiprintf_r+0xf6>
 8006942:	9a07      	ldr	r2, [sp, #28]
 8006944:	4654      	mov	r4, sl
 8006946:	2000      	movs	r0, #0
 8006948:	f04f 0c0a 	mov.w	ip, #10
 800694c:	4621      	mov	r1, r4
 800694e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006952:	3b30      	subs	r3, #48	; 0x30
 8006954:	2b09      	cmp	r3, #9
 8006956:	d94d      	bls.n	80069f4 <_svfiprintf_r+0x17c>
 8006958:	b1b0      	cbz	r0, 8006988 <_svfiprintf_r+0x110>
 800695a:	9207      	str	r2, [sp, #28]
 800695c:	e014      	b.n	8006988 <_svfiprintf_r+0x110>
 800695e:	eba0 0308 	sub.w	r3, r0, r8
 8006962:	fa09 f303 	lsl.w	r3, r9, r3
 8006966:	4313      	orrs	r3, r2
 8006968:	9304      	str	r3, [sp, #16]
 800696a:	46a2      	mov	sl, r4
 800696c:	e7d2      	b.n	8006914 <_svfiprintf_r+0x9c>
 800696e:	9b03      	ldr	r3, [sp, #12]
 8006970:	1d19      	adds	r1, r3, #4
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	9103      	str	r1, [sp, #12]
 8006976:	2b00      	cmp	r3, #0
 8006978:	bfbb      	ittet	lt
 800697a:	425b      	neglt	r3, r3
 800697c:	f042 0202 	orrlt.w	r2, r2, #2
 8006980:	9307      	strge	r3, [sp, #28]
 8006982:	9307      	strlt	r3, [sp, #28]
 8006984:	bfb8      	it	lt
 8006986:	9204      	strlt	r2, [sp, #16]
 8006988:	7823      	ldrb	r3, [r4, #0]
 800698a:	2b2e      	cmp	r3, #46	; 0x2e
 800698c:	d10c      	bne.n	80069a8 <_svfiprintf_r+0x130>
 800698e:	7863      	ldrb	r3, [r4, #1]
 8006990:	2b2a      	cmp	r3, #42	; 0x2a
 8006992:	d134      	bne.n	80069fe <_svfiprintf_r+0x186>
 8006994:	9b03      	ldr	r3, [sp, #12]
 8006996:	1d1a      	adds	r2, r3, #4
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	9203      	str	r2, [sp, #12]
 800699c:	2b00      	cmp	r3, #0
 800699e:	bfb8      	it	lt
 80069a0:	f04f 33ff 	movlt.w	r3, #4294967295
 80069a4:	3402      	adds	r4, #2
 80069a6:	9305      	str	r3, [sp, #20]
 80069a8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8006a70 <_svfiprintf_r+0x1f8>
 80069ac:	7821      	ldrb	r1, [r4, #0]
 80069ae:	2203      	movs	r2, #3
 80069b0:	4650      	mov	r0, sl
 80069b2:	f7f9 fc4d 	bl	8000250 <memchr>
 80069b6:	b138      	cbz	r0, 80069c8 <_svfiprintf_r+0x150>
 80069b8:	9b04      	ldr	r3, [sp, #16]
 80069ba:	eba0 000a 	sub.w	r0, r0, sl
 80069be:	2240      	movs	r2, #64	; 0x40
 80069c0:	4082      	lsls	r2, r0
 80069c2:	4313      	orrs	r3, r2
 80069c4:	3401      	adds	r4, #1
 80069c6:	9304      	str	r3, [sp, #16]
 80069c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069cc:	4825      	ldr	r0, [pc, #148]	; (8006a64 <_svfiprintf_r+0x1ec>)
 80069ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80069d2:	2206      	movs	r2, #6
 80069d4:	f7f9 fc3c 	bl	8000250 <memchr>
 80069d8:	2800      	cmp	r0, #0
 80069da:	d038      	beq.n	8006a4e <_svfiprintf_r+0x1d6>
 80069dc:	4b22      	ldr	r3, [pc, #136]	; (8006a68 <_svfiprintf_r+0x1f0>)
 80069de:	bb1b      	cbnz	r3, 8006a28 <_svfiprintf_r+0x1b0>
 80069e0:	9b03      	ldr	r3, [sp, #12]
 80069e2:	3307      	adds	r3, #7
 80069e4:	f023 0307 	bic.w	r3, r3, #7
 80069e8:	3308      	adds	r3, #8
 80069ea:	9303      	str	r3, [sp, #12]
 80069ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069ee:	4433      	add	r3, r6
 80069f0:	9309      	str	r3, [sp, #36]	; 0x24
 80069f2:	e768      	b.n	80068c6 <_svfiprintf_r+0x4e>
 80069f4:	fb0c 3202 	mla	r2, ip, r2, r3
 80069f8:	460c      	mov	r4, r1
 80069fa:	2001      	movs	r0, #1
 80069fc:	e7a6      	b.n	800694c <_svfiprintf_r+0xd4>
 80069fe:	2300      	movs	r3, #0
 8006a00:	3401      	adds	r4, #1
 8006a02:	9305      	str	r3, [sp, #20]
 8006a04:	4619      	mov	r1, r3
 8006a06:	f04f 0c0a 	mov.w	ip, #10
 8006a0a:	4620      	mov	r0, r4
 8006a0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006a10:	3a30      	subs	r2, #48	; 0x30
 8006a12:	2a09      	cmp	r2, #9
 8006a14:	d903      	bls.n	8006a1e <_svfiprintf_r+0x1a6>
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d0c6      	beq.n	80069a8 <_svfiprintf_r+0x130>
 8006a1a:	9105      	str	r1, [sp, #20]
 8006a1c:	e7c4      	b.n	80069a8 <_svfiprintf_r+0x130>
 8006a1e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006a22:	4604      	mov	r4, r0
 8006a24:	2301      	movs	r3, #1
 8006a26:	e7f0      	b.n	8006a0a <_svfiprintf_r+0x192>
 8006a28:	ab03      	add	r3, sp, #12
 8006a2a:	9300      	str	r3, [sp, #0]
 8006a2c:	462a      	mov	r2, r5
 8006a2e:	4b0f      	ldr	r3, [pc, #60]	; (8006a6c <_svfiprintf_r+0x1f4>)
 8006a30:	a904      	add	r1, sp, #16
 8006a32:	4638      	mov	r0, r7
 8006a34:	f3af 8000 	nop.w
 8006a38:	1c42      	adds	r2, r0, #1
 8006a3a:	4606      	mov	r6, r0
 8006a3c:	d1d6      	bne.n	80069ec <_svfiprintf_r+0x174>
 8006a3e:	89ab      	ldrh	r3, [r5, #12]
 8006a40:	065b      	lsls	r3, r3, #25
 8006a42:	f53f af2d 	bmi.w	80068a0 <_svfiprintf_r+0x28>
 8006a46:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006a48:	b01d      	add	sp, #116	; 0x74
 8006a4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a4e:	ab03      	add	r3, sp, #12
 8006a50:	9300      	str	r3, [sp, #0]
 8006a52:	462a      	mov	r2, r5
 8006a54:	4b05      	ldr	r3, [pc, #20]	; (8006a6c <_svfiprintf_r+0x1f4>)
 8006a56:	a904      	add	r1, sp, #16
 8006a58:	4638      	mov	r0, r7
 8006a5a:	f000 f879 	bl	8006b50 <_printf_i>
 8006a5e:	e7eb      	b.n	8006a38 <_svfiprintf_r+0x1c0>
 8006a60:	08006eb8 	.word	0x08006eb8
 8006a64:	08006ec2 	.word	0x08006ec2
 8006a68:	00000000 	.word	0x00000000
 8006a6c:	080067c5 	.word	0x080067c5
 8006a70:	08006ebe 	.word	0x08006ebe

08006a74 <_printf_common>:
 8006a74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a78:	4616      	mov	r6, r2
 8006a7a:	4699      	mov	r9, r3
 8006a7c:	688a      	ldr	r2, [r1, #8]
 8006a7e:	690b      	ldr	r3, [r1, #16]
 8006a80:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006a84:	4293      	cmp	r3, r2
 8006a86:	bfb8      	it	lt
 8006a88:	4613      	movlt	r3, r2
 8006a8a:	6033      	str	r3, [r6, #0]
 8006a8c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006a90:	4607      	mov	r7, r0
 8006a92:	460c      	mov	r4, r1
 8006a94:	b10a      	cbz	r2, 8006a9a <_printf_common+0x26>
 8006a96:	3301      	adds	r3, #1
 8006a98:	6033      	str	r3, [r6, #0]
 8006a9a:	6823      	ldr	r3, [r4, #0]
 8006a9c:	0699      	lsls	r1, r3, #26
 8006a9e:	bf42      	ittt	mi
 8006aa0:	6833      	ldrmi	r3, [r6, #0]
 8006aa2:	3302      	addmi	r3, #2
 8006aa4:	6033      	strmi	r3, [r6, #0]
 8006aa6:	6825      	ldr	r5, [r4, #0]
 8006aa8:	f015 0506 	ands.w	r5, r5, #6
 8006aac:	d106      	bne.n	8006abc <_printf_common+0x48>
 8006aae:	f104 0a19 	add.w	sl, r4, #25
 8006ab2:	68e3      	ldr	r3, [r4, #12]
 8006ab4:	6832      	ldr	r2, [r6, #0]
 8006ab6:	1a9b      	subs	r3, r3, r2
 8006ab8:	42ab      	cmp	r3, r5
 8006aba:	dc26      	bgt.n	8006b0a <_printf_common+0x96>
 8006abc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006ac0:	1e13      	subs	r3, r2, #0
 8006ac2:	6822      	ldr	r2, [r4, #0]
 8006ac4:	bf18      	it	ne
 8006ac6:	2301      	movne	r3, #1
 8006ac8:	0692      	lsls	r2, r2, #26
 8006aca:	d42b      	bmi.n	8006b24 <_printf_common+0xb0>
 8006acc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006ad0:	4649      	mov	r1, r9
 8006ad2:	4638      	mov	r0, r7
 8006ad4:	47c0      	blx	r8
 8006ad6:	3001      	adds	r0, #1
 8006ad8:	d01e      	beq.n	8006b18 <_printf_common+0xa4>
 8006ada:	6823      	ldr	r3, [r4, #0]
 8006adc:	6922      	ldr	r2, [r4, #16]
 8006ade:	f003 0306 	and.w	r3, r3, #6
 8006ae2:	2b04      	cmp	r3, #4
 8006ae4:	bf02      	ittt	eq
 8006ae6:	68e5      	ldreq	r5, [r4, #12]
 8006ae8:	6833      	ldreq	r3, [r6, #0]
 8006aea:	1aed      	subeq	r5, r5, r3
 8006aec:	68a3      	ldr	r3, [r4, #8]
 8006aee:	bf0c      	ite	eq
 8006af0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006af4:	2500      	movne	r5, #0
 8006af6:	4293      	cmp	r3, r2
 8006af8:	bfc4      	itt	gt
 8006afa:	1a9b      	subgt	r3, r3, r2
 8006afc:	18ed      	addgt	r5, r5, r3
 8006afe:	2600      	movs	r6, #0
 8006b00:	341a      	adds	r4, #26
 8006b02:	42b5      	cmp	r5, r6
 8006b04:	d11a      	bne.n	8006b3c <_printf_common+0xc8>
 8006b06:	2000      	movs	r0, #0
 8006b08:	e008      	b.n	8006b1c <_printf_common+0xa8>
 8006b0a:	2301      	movs	r3, #1
 8006b0c:	4652      	mov	r2, sl
 8006b0e:	4649      	mov	r1, r9
 8006b10:	4638      	mov	r0, r7
 8006b12:	47c0      	blx	r8
 8006b14:	3001      	adds	r0, #1
 8006b16:	d103      	bne.n	8006b20 <_printf_common+0xac>
 8006b18:	f04f 30ff 	mov.w	r0, #4294967295
 8006b1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b20:	3501      	adds	r5, #1
 8006b22:	e7c6      	b.n	8006ab2 <_printf_common+0x3e>
 8006b24:	18e1      	adds	r1, r4, r3
 8006b26:	1c5a      	adds	r2, r3, #1
 8006b28:	2030      	movs	r0, #48	; 0x30
 8006b2a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006b2e:	4422      	add	r2, r4
 8006b30:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006b34:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006b38:	3302      	adds	r3, #2
 8006b3a:	e7c7      	b.n	8006acc <_printf_common+0x58>
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	4622      	mov	r2, r4
 8006b40:	4649      	mov	r1, r9
 8006b42:	4638      	mov	r0, r7
 8006b44:	47c0      	blx	r8
 8006b46:	3001      	adds	r0, #1
 8006b48:	d0e6      	beq.n	8006b18 <_printf_common+0xa4>
 8006b4a:	3601      	adds	r6, #1
 8006b4c:	e7d9      	b.n	8006b02 <_printf_common+0x8e>
	...

08006b50 <_printf_i>:
 8006b50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b54:	7e0f      	ldrb	r7, [r1, #24]
 8006b56:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006b58:	2f78      	cmp	r7, #120	; 0x78
 8006b5a:	4691      	mov	r9, r2
 8006b5c:	4680      	mov	r8, r0
 8006b5e:	460c      	mov	r4, r1
 8006b60:	469a      	mov	sl, r3
 8006b62:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006b66:	d807      	bhi.n	8006b78 <_printf_i+0x28>
 8006b68:	2f62      	cmp	r7, #98	; 0x62
 8006b6a:	d80a      	bhi.n	8006b82 <_printf_i+0x32>
 8006b6c:	2f00      	cmp	r7, #0
 8006b6e:	f000 80d4 	beq.w	8006d1a <_printf_i+0x1ca>
 8006b72:	2f58      	cmp	r7, #88	; 0x58
 8006b74:	f000 80c0 	beq.w	8006cf8 <_printf_i+0x1a8>
 8006b78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b7c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006b80:	e03a      	b.n	8006bf8 <_printf_i+0xa8>
 8006b82:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006b86:	2b15      	cmp	r3, #21
 8006b88:	d8f6      	bhi.n	8006b78 <_printf_i+0x28>
 8006b8a:	a101      	add	r1, pc, #4	; (adr r1, 8006b90 <_printf_i+0x40>)
 8006b8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006b90:	08006be9 	.word	0x08006be9
 8006b94:	08006bfd 	.word	0x08006bfd
 8006b98:	08006b79 	.word	0x08006b79
 8006b9c:	08006b79 	.word	0x08006b79
 8006ba0:	08006b79 	.word	0x08006b79
 8006ba4:	08006b79 	.word	0x08006b79
 8006ba8:	08006bfd 	.word	0x08006bfd
 8006bac:	08006b79 	.word	0x08006b79
 8006bb0:	08006b79 	.word	0x08006b79
 8006bb4:	08006b79 	.word	0x08006b79
 8006bb8:	08006b79 	.word	0x08006b79
 8006bbc:	08006d01 	.word	0x08006d01
 8006bc0:	08006c29 	.word	0x08006c29
 8006bc4:	08006cbb 	.word	0x08006cbb
 8006bc8:	08006b79 	.word	0x08006b79
 8006bcc:	08006b79 	.word	0x08006b79
 8006bd0:	08006d23 	.word	0x08006d23
 8006bd4:	08006b79 	.word	0x08006b79
 8006bd8:	08006c29 	.word	0x08006c29
 8006bdc:	08006b79 	.word	0x08006b79
 8006be0:	08006b79 	.word	0x08006b79
 8006be4:	08006cc3 	.word	0x08006cc3
 8006be8:	682b      	ldr	r3, [r5, #0]
 8006bea:	1d1a      	adds	r2, r3, #4
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	602a      	str	r2, [r5, #0]
 8006bf0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006bf4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	e09f      	b.n	8006d3c <_printf_i+0x1ec>
 8006bfc:	6820      	ldr	r0, [r4, #0]
 8006bfe:	682b      	ldr	r3, [r5, #0]
 8006c00:	0607      	lsls	r7, r0, #24
 8006c02:	f103 0104 	add.w	r1, r3, #4
 8006c06:	6029      	str	r1, [r5, #0]
 8006c08:	d501      	bpl.n	8006c0e <_printf_i+0xbe>
 8006c0a:	681e      	ldr	r6, [r3, #0]
 8006c0c:	e003      	b.n	8006c16 <_printf_i+0xc6>
 8006c0e:	0646      	lsls	r6, r0, #25
 8006c10:	d5fb      	bpl.n	8006c0a <_printf_i+0xba>
 8006c12:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006c16:	2e00      	cmp	r6, #0
 8006c18:	da03      	bge.n	8006c22 <_printf_i+0xd2>
 8006c1a:	232d      	movs	r3, #45	; 0x2d
 8006c1c:	4276      	negs	r6, r6
 8006c1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c22:	485a      	ldr	r0, [pc, #360]	; (8006d8c <_printf_i+0x23c>)
 8006c24:	230a      	movs	r3, #10
 8006c26:	e012      	b.n	8006c4e <_printf_i+0xfe>
 8006c28:	682b      	ldr	r3, [r5, #0]
 8006c2a:	6820      	ldr	r0, [r4, #0]
 8006c2c:	1d19      	adds	r1, r3, #4
 8006c2e:	6029      	str	r1, [r5, #0]
 8006c30:	0605      	lsls	r5, r0, #24
 8006c32:	d501      	bpl.n	8006c38 <_printf_i+0xe8>
 8006c34:	681e      	ldr	r6, [r3, #0]
 8006c36:	e002      	b.n	8006c3e <_printf_i+0xee>
 8006c38:	0641      	lsls	r1, r0, #25
 8006c3a:	d5fb      	bpl.n	8006c34 <_printf_i+0xe4>
 8006c3c:	881e      	ldrh	r6, [r3, #0]
 8006c3e:	4853      	ldr	r0, [pc, #332]	; (8006d8c <_printf_i+0x23c>)
 8006c40:	2f6f      	cmp	r7, #111	; 0x6f
 8006c42:	bf0c      	ite	eq
 8006c44:	2308      	moveq	r3, #8
 8006c46:	230a      	movne	r3, #10
 8006c48:	2100      	movs	r1, #0
 8006c4a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006c4e:	6865      	ldr	r5, [r4, #4]
 8006c50:	60a5      	str	r5, [r4, #8]
 8006c52:	2d00      	cmp	r5, #0
 8006c54:	bfa2      	ittt	ge
 8006c56:	6821      	ldrge	r1, [r4, #0]
 8006c58:	f021 0104 	bicge.w	r1, r1, #4
 8006c5c:	6021      	strge	r1, [r4, #0]
 8006c5e:	b90e      	cbnz	r6, 8006c64 <_printf_i+0x114>
 8006c60:	2d00      	cmp	r5, #0
 8006c62:	d04b      	beq.n	8006cfc <_printf_i+0x1ac>
 8006c64:	4615      	mov	r5, r2
 8006c66:	fbb6 f1f3 	udiv	r1, r6, r3
 8006c6a:	fb03 6711 	mls	r7, r3, r1, r6
 8006c6e:	5dc7      	ldrb	r7, [r0, r7]
 8006c70:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006c74:	4637      	mov	r7, r6
 8006c76:	42bb      	cmp	r3, r7
 8006c78:	460e      	mov	r6, r1
 8006c7a:	d9f4      	bls.n	8006c66 <_printf_i+0x116>
 8006c7c:	2b08      	cmp	r3, #8
 8006c7e:	d10b      	bne.n	8006c98 <_printf_i+0x148>
 8006c80:	6823      	ldr	r3, [r4, #0]
 8006c82:	07de      	lsls	r6, r3, #31
 8006c84:	d508      	bpl.n	8006c98 <_printf_i+0x148>
 8006c86:	6923      	ldr	r3, [r4, #16]
 8006c88:	6861      	ldr	r1, [r4, #4]
 8006c8a:	4299      	cmp	r1, r3
 8006c8c:	bfde      	ittt	le
 8006c8e:	2330      	movle	r3, #48	; 0x30
 8006c90:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006c94:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006c98:	1b52      	subs	r2, r2, r5
 8006c9a:	6122      	str	r2, [r4, #16]
 8006c9c:	f8cd a000 	str.w	sl, [sp]
 8006ca0:	464b      	mov	r3, r9
 8006ca2:	aa03      	add	r2, sp, #12
 8006ca4:	4621      	mov	r1, r4
 8006ca6:	4640      	mov	r0, r8
 8006ca8:	f7ff fee4 	bl	8006a74 <_printf_common>
 8006cac:	3001      	adds	r0, #1
 8006cae:	d14a      	bne.n	8006d46 <_printf_i+0x1f6>
 8006cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8006cb4:	b004      	add	sp, #16
 8006cb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cba:	6823      	ldr	r3, [r4, #0]
 8006cbc:	f043 0320 	orr.w	r3, r3, #32
 8006cc0:	6023      	str	r3, [r4, #0]
 8006cc2:	4833      	ldr	r0, [pc, #204]	; (8006d90 <_printf_i+0x240>)
 8006cc4:	2778      	movs	r7, #120	; 0x78
 8006cc6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006cca:	6823      	ldr	r3, [r4, #0]
 8006ccc:	6829      	ldr	r1, [r5, #0]
 8006cce:	061f      	lsls	r7, r3, #24
 8006cd0:	f851 6b04 	ldr.w	r6, [r1], #4
 8006cd4:	d402      	bmi.n	8006cdc <_printf_i+0x18c>
 8006cd6:	065f      	lsls	r7, r3, #25
 8006cd8:	bf48      	it	mi
 8006cda:	b2b6      	uxthmi	r6, r6
 8006cdc:	07df      	lsls	r7, r3, #31
 8006cde:	bf48      	it	mi
 8006ce0:	f043 0320 	orrmi.w	r3, r3, #32
 8006ce4:	6029      	str	r1, [r5, #0]
 8006ce6:	bf48      	it	mi
 8006ce8:	6023      	strmi	r3, [r4, #0]
 8006cea:	b91e      	cbnz	r6, 8006cf4 <_printf_i+0x1a4>
 8006cec:	6823      	ldr	r3, [r4, #0]
 8006cee:	f023 0320 	bic.w	r3, r3, #32
 8006cf2:	6023      	str	r3, [r4, #0]
 8006cf4:	2310      	movs	r3, #16
 8006cf6:	e7a7      	b.n	8006c48 <_printf_i+0xf8>
 8006cf8:	4824      	ldr	r0, [pc, #144]	; (8006d8c <_printf_i+0x23c>)
 8006cfa:	e7e4      	b.n	8006cc6 <_printf_i+0x176>
 8006cfc:	4615      	mov	r5, r2
 8006cfe:	e7bd      	b.n	8006c7c <_printf_i+0x12c>
 8006d00:	682b      	ldr	r3, [r5, #0]
 8006d02:	6826      	ldr	r6, [r4, #0]
 8006d04:	6961      	ldr	r1, [r4, #20]
 8006d06:	1d18      	adds	r0, r3, #4
 8006d08:	6028      	str	r0, [r5, #0]
 8006d0a:	0635      	lsls	r5, r6, #24
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	d501      	bpl.n	8006d14 <_printf_i+0x1c4>
 8006d10:	6019      	str	r1, [r3, #0]
 8006d12:	e002      	b.n	8006d1a <_printf_i+0x1ca>
 8006d14:	0670      	lsls	r0, r6, #25
 8006d16:	d5fb      	bpl.n	8006d10 <_printf_i+0x1c0>
 8006d18:	8019      	strh	r1, [r3, #0]
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	6123      	str	r3, [r4, #16]
 8006d1e:	4615      	mov	r5, r2
 8006d20:	e7bc      	b.n	8006c9c <_printf_i+0x14c>
 8006d22:	682b      	ldr	r3, [r5, #0]
 8006d24:	1d1a      	adds	r2, r3, #4
 8006d26:	602a      	str	r2, [r5, #0]
 8006d28:	681d      	ldr	r5, [r3, #0]
 8006d2a:	6862      	ldr	r2, [r4, #4]
 8006d2c:	2100      	movs	r1, #0
 8006d2e:	4628      	mov	r0, r5
 8006d30:	f7f9 fa8e 	bl	8000250 <memchr>
 8006d34:	b108      	cbz	r0, 8006d3a <_printf_i+0x1ea>
 8006d36:	1b40      	subs	r0, r0, r5
 8006d38:	6060      	str	r0, [r4, #4]
 8006d3a:	6863      	ldr	r3, [r4, #4]
 8006d3c:	6123      	str	r3, [r4, #16]
 8006d3e:	2300      	movs	r3, #0
 8006d40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d44:	e7aa      	b.n	8006c9c <_printf_i+0x14c>
 8006d46:	6923      	ldr	r3, [r4, #16]
 8006d48:	462a      	mov	r2, r5
 8006d4a:	4649      	mov	r1, r9
 8006d4c:	4640      	mov	r0, r8
 8006d4e:	47d0      	blx	sl
 8006d50:	3001      	adds	r0, #1
 8006d52:	d0ad      	beq.n	8006cb0 <_printf_i+0x160>
 8006d54:	6823      	ldr	r3, [r4, #0]
 8006d56:	079b      	lsls	r3, r3, #30
 8006d58:	d413      	bmi.n	8006d82 <_printf_i+0x232>
 8006d5a:	68e0      	ldr	r0, [r4, #12]
 8006d5c:	9b03      	ldr	r3, [sp, #12]
 8006d5e:	4298      	cmp	r0, r3
 8006d60:	bfb8      	it	lt
 8006d62:	4618      	movlt	r0, r3
 8006d64:	e7a6      	b.n	8006cb4 <_printf_i+0x164>
 8006d66:	2301      	movs	r3, #1
 8006d68:	4632      	mov	r2, r6
 8006d6a:	4649      	mov	r1, r9
 8006d6c:	4640      	mov	r0, r8
 8006d6e:	47d0      	blx	sl
 8006d70:	3001      	adds	r0, #1
 8006d72:	d09d      	beq.n	8006cb0 <_printf_i+0x160>
 8006d74:	3501      	adds	r5, #1
 8006d76:	68e3      	ldr	r3, [r4, #12]
 8006d78:	9903      	ldr	r1, [sp, #12]
 8006d7a:	1a5b      	subs	r3, r3, r1
 8006d7c:	42ab      	cmp	r3, r5
 8006d7e:	dcf2      	bgt.n	8006d66 <_printf_i+0x216>
 8006d80:	e7eb      	b.n	8006d5a <_printf_i+0x20a>
 8006d82:	2500      	movs	r5, #0
 8006d84:	f104 0619 	add.w	r6, r4, #25
 8006d88:	e7f5      	b.n	8006d76 <_printf_i+0x226>
 8006d8a:	bf00      	nop
 8006d8c:	08006ec9 	.word	0x08006ec9
 8006d90:	08006eda 	.word	0x08006eda

08006d94 <memmove>:
 8006d94:	4288      	cmp	r0, r1
 8006d96:	b510      	push	{r4, lr}
 8006d98:	eb01 0402 	add.w	r4, r1, r2
 8006d9c:	d902      	bls.n	8006da4 <memmove+0x10>
 8006d9e:	4284      	cmp	r4, r0
 8006da0:	4623      	mov	r3, r4
 8006da2:	d807      	bhi.n	8006db4 <memmove+0x20>
 8006da4:	1e43      	subs	r3, r0, #1
 8006da6:	42a1      	cmp	r1, r4
 8006da8:	d008      	beq.n	8006dbc <memmove+0x28>
 8006daa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006dae:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006db2:	e7f8      	b.n	8006da6 <memmove+0x12>
 8006db4:	4402      	add	r2, r0
 8006db6:	4601      	mov	r1, r0
 8006db8:	428a      	cmp	r2, r1
 8006dba:	d100      	bne.n	8006dbe <memmove+0x2a>
 8006dbc:	bd10      	pop	{r4, pc}
 8006dbe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006dc2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006dc6:	e7f7      	b.n	8006db8 <memmove+0x24>

08006dc8 <_sbrk_r>:
 8006dc8:	b538      	push	{r3, r4, r5, lr}
 8006dca:	4d06      	ldr	r5, [pc, #24]	; (8006de4 <_sbrk_r+0x1c>)
 8006dcc:	2300      	movs	r3, #0
 8006dce:	4604      	mov	r4, r0
 8006dd0:	4608      	mov	r0, r1
 8006dd2:	602b      	str	r3, [r5, #0]
 8006dd4:	f7fa fd38 	bl	8001848 <_sbrk>
 8006dd8:	1c43      	adds	r3, r0, #1
 8006dda:	d102      	bne.n	8006de2 <_sbrk_r+0x1a>
 8006ddc:	682b      	ldr	r3, [r5, #0]
 8006dde:	b103      	cbz	r3, 8006de2 <_sbrk_r+0x1a>
 8006de0:	6023      	str	r3, [r4, #0]
 8006de2:	bd38      	pop	{r3, r4, r5, pc}
 8006de4:	20000b6c 	.word	0x20000b6c

08006de8 <memcpy>:
 8006de8:	440a      	add	r2, r1
 8006dea:	4291      	cmp	r1, r2
 8006dec:	f100 33ff 	add.w	r3, r0, #4294967295
 8006df0:	d100      	bne.n	8006df4 <memcpy+0xc>
 8006df2:	4770      	bx	lr
 8006df4:	b510      	push	{r4, lr}
 8006df6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006dfa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006dfe:	4291      	cmp	r1, r2
 8006e00:	d1f9      	bne.n	8006df6 <memcpy+0xe>
 8006e02:	bd10      	pop	{r4, pc}

08006e04 <_realloc_r>:
 8006e04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e08:	4680      	mov	r8, r0
 8006e0a:	4614      	mov	r4, r2
 8006e0c:	460e      	mov	r6, r1
 8006e0e:	b921      	cbnz	r1, 8006e1a <_realloc_r+0x16>
 8006e10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006e14:	4611      	mov	r1, r2
 8006e16:	f7ff bc49 	b.w	80066ac <_malloc_r>
 8006e1a:	b92a      	cbnz	r2, 8006e28 <_realloc_r+0x24>
 8006e1c:	f7ff fbda 	bl	80065d4 <_free_r>
 8006e20:	4625      	mov	r5, r4
 8006e22:	4628      	mov	r0, r5
 8006e24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e28:	f000 f81b 	bl	8006e62 <_malloc_usable_size_r>
 8006e2c:	4284      	cmp	r4, r0
 8006e2e:	4607      	mov	r7, r0
 8006e30:	d802      	bhi.n	8006e38 <_realloc_r+0x34>
 8006e32:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006e36:	d812      	bhi.n	8006e5e <_realloc_r+0x5a>
 8006e38:	4621      	mov	r1, r4
 8006e3a:	4640      	mov	r0, r8
 8006e3c:	f7ff fc36 	bl	80066ac <_malloc_r>
 8006e40:	4605      	mov	r5, r0
 8006e42:	2800      	cmp	r0, #0
 8006e44:	d0ed      	beq.n	8006e22 <_realloc_r+0x1e>
 8006e46:	42bc      	cmp	r4, r7
 8006e48:	4622      	mov	r2, r4
 8006e4a:	4631      	mov	r1, r6
 8006e4c:	bf28      	it	cs
 8006e4e:	463a      	movcs	r2, r7
 8006e50:	f7ff ffca 	bl	8006de8 <memcpy>
 8006e54:	4631      	mov	r1, r6
 8006e56:	4640      	mov	r0, r8
 8006e58:	f7ff fbbc 	bl	80065d4 <_free_r>
 8006e5c:	e7e1      	b.n	8006e22 <_realloc_r+0x1e>
 8006e5e:	4635      	mov	r5, r6
 8006e60:	e7df      	b.n	8006e22 <_realloc_r+0x1e>

08006e62 <_malloc_usable_size_r>:
 8006e62:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e66:	1f18      	subs	r0, r3, #4
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	bfbc      	itt	lt
 8006e6c:	580b      	ldrlt	r3, [r1, r0]
 8006e6e:	18c0      	addlt	r0, r0, r3
 8006e70:	4770      	bx	lr
	...

08006e74 <_init>:
 8006e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e76:	bf00      	nop
 8006e78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e7a:	bc08      	pop	{r3}
 8006e7c:	469e      	mov	lr, r3
 8006e7e:	4770      	bx	lr

08006e80 <_fini>:
 8006e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e82:	bf00      	nop
 8006e84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e86:	bc08      	pop	{r3}
 8006e88:	469e      	mov	lr, r3
 8006e8a:	4770      	bx	lr
